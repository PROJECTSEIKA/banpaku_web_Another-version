{"ast":null,"code":"import React,{useEffect,useMemo,useRef,useState}from\"react\";import'./style.css';// style.cssを再度有効化\nimport{nowInSec,SkyWayAuthToken,SkyWayContext,SkyWayRoom,SkyWayStreamFactory,uuidV4,RemoteDataStream,// RemoteDataStreamをインポート\nRemoteVideoStream,// RemoteVideoStreamをインポート\nRemoteAudioStream// RemoteAudioStreamをインポート\n}from'@skyway-sdk/room';/**\r\n * ホーム画面コンポーネント\r\n * @param {object} props - プロパティ\r\n * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Home(_ref){let{setIsLoggedIn}=_ref;// ルーム名\nconst[roomName,setRoomName]=useState(\"\");// 自分の参加者情報 (ルームに参加すると設定されます)\nconst[me,setMe]=useState(null);// SkyWayコンテキストのインスタンス\nconst[skywayContext,setSkywayContext]=useState(null);// SkyWayルームのインスタンス\nconst[skywayRoom,setSkywayRoom]=useState(null);// リモートビデオ要素を管理するためのMap (memberId -> videoElement)\nconst remoteVideoElements=useRef(new Map());// リモートビデオを表示するDOM要素への参照\nconst robotDisplayRef=useRef(null);// ローカルストリームの参照を保持\nconst localStreamRef=useRef(null);// 受信したメッセージを表示するための状態\n// src/home.js\n// eslint-disable-next-line no-unused-vars\nconst[receivedMessages,setReceivedMessages]=useState([]);// 送信したデータストリームの参照を保持\nconst localDataStreamRef=useRef(null);// LocalDataStreamの参照を保持\n// マイクの状態を表示するための状態 (ミュート状態を管理)\nconst[isMuted,setIsMuted]=useState(false);// オーディオストリームのPublicationを保持するための参照\nconst audioPublicationRef=useRef(null);// AIモードがONかどうかを管理する状態\nconst[isAiModeOn,setIsAiModeOn]=useState(false);// AIからの提案を保持する状態\n// { key: 'ai_assist_1', text: '提案内容' } の形式で格納\nconst[aiSuggestions,setAiSuggestions]=useState([null,null]);// 2つの提案を保持するため、初期値をnullで埋める\n// モーションが進行中かどうかを管理する状態\nconst[isMoveInProgress,setIsMoveInProgress]=useState(false);// 翻訳されたテキストを保持する状態を追加\nconst[translatedText,setTranslatedText]=useState(\"\");// 🌟追加: 音声認識が実行中かどうかを管理する状態\nconst[isListening,setIsListening]=useState(false);// 🌟追加: SpeechRecognitionオブジェクトの参照を保持\nconst recognition=useRef(null);const URL=\"https://translation.googleapis.com/language/translate/v2?key=\";const apiKey='AIzaSyBBk7P0P0XCyh3p0Ov7jiP9d1n02wYk_AY';// メッセージとモーションの多言語マッピング\nconst messages=useMemo(()=>({hello:{japanese:'リセット',english:'Hello'},goodbye:{japanese:'決めポーズ',english:'Goodbye'},bow:{japanese:'バイバイ',english:'Bow'},flap:{japanese:'YES',english:'Flap'},lookUp:{japanese:'NO',english:'Look up'},lookDown:{japanese:'右手を上げる',english:'Look down'},lookRight:{japanese:'右手を下げる',english:'Look right'},lookLeft:{japanese:'左手を上げる',english:'Left hand up'// Changed from 'Look left' for clarity\n},nod:{japanese:'左手を下げる',english:'Left hand down'// Changed from 'Nod' for clarity\n},tiltHead:{japanese:'上を向く',english:'Look up'// Changed from 'Tilt head' for clarity\n},spin:{japanese:'下を向く',english:'Look down'// Changed from 'Spin' for clarity\n},jump:{japanese:'右を向く',english:'Look right'// Changed from 'Jump' for clarity\n},dance:{japanese:'左を向く',english:'Look left'// Changed from 'Dance' for clarity\n},bowDeep:{japanese:'パタパタ',english:'Flap arms'// Changed from 'Deep bow' for clarity\n},doingSomething:{japanese:'こんにちは',english:'Hello'},thankYou:{japanese:'バイバイ',english:'Goodbye'// Changed from 'Thank you' for clarity\n},good:{japanese:'ようこそ',english:'Welcome'// Changed from 'Good' for clarity\n},ookini:{japanese:'ありがとう',english:'Thank you (Kansai dialect)'},amazing:{japanese:'楽しんでね',english:'Enjoy'// Changed from 'Amazing' for clarity\n},takepicture:{japanese:'写真とろう',english:'take_picture'// Changed from 'Amazing' for clarity\n},wait:{japanese:'ちょっと待ってね',english:'wait'// Changed from 'Amazing' for clarity\n},good:{japanese:'いいね',english:'good'// Changed from 'Amazing' for clarity\n},Where_are_you_from:{japanese:'どこからきたの',english:'Where_are_you_from'// Changed from 'Amazing' for clarity\n},Yes:{japanese:'はい',english:'Yes'// Changed from 'Amazing' for clarity\n},No:{japanese:'いいえ',english:'No'// Changed from 'Amazing' for clarity\n},sorry:{japanese:'ごめんね',english:'Sorry'// Changed from 'Amazing' for clarity\n},yourewelcome:{japanese:'どういたしまして',english:'yourewelcome'// Changed from 'Amazing' for clarity\n},name:{japanese:'なまえ',english:'name'// Changed from 'Amazing' for clarity\n}}),[]);/**\r\n   * ログアウトボタンクリック時のハンドラ\r\n   */const handleLogout=()=>{setIsLoggedIn(false);// ログイン状態をfalseに設定\n};// SkyWay App ID と Secret Key\n// 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\n// サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\nconst appId=useMemo(()=>\"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\",[]);const secretKey=useMemo(()=>\"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\",[]);// SkyWay認証トークンの生成\nconst token=useMemo(()=>{if(appId==null||secretKey==null)return undefined;return new SkyWayAuthToken({jti:uuidV4(),// JWT ID\niat:nowInSec(),// 発行時刻\nexp:nowInSec()+60*60*24,// 有効期限 (24時間)\nversion:3,scope:{appId:appId,rooms:[{name:\"*\",// すべてのルーム名に適用\nmethods:[\"create\",\"close\",\"updateMetadata\"],// ルーム操作の権限\nmember:{name:\"*\",// すべてのメンバーに適用\nmethods:[\"publish\",\"subscribe\",\"updateMetadata\"]// メンバー操作の権限\n}}],turn:{enabled:true// TURNサーバーの使用を許可 (NAT越えのため)\n}}}).encode(secretKey);},[appId,secretKey]);/**\r\n   * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n   * トークンが利用可能になったときに一度だけ実行されます。\r\n   */useEffect(()=>{if(!token)return;let currentContext;const initContext=async()=>{try{currentContext=await SkyWayContext.Create(token);setSkywayContext(currentContext);console.log(\"SkyWayContext created successfully.\");}catch(error){console.error(\"Failed to create SkyWayContext:\",error);}};initContext();// コンポーネントのアンマウント時にコンテキストを破棄\nreturn()=>{if(currentContext){currentContext.dispose();console.log(\"SkyWayContext disposed.\");}};},[token]);// tokenが変更されたときにのみ実行\n// 🌟追加: SpeechRecognition APIの初期化\nuseEffect(()=>{// ブラウザがSpeechRecognitionに対応しているか確認\nconst SpeechRecognition=window.SpeechRecognition||window.webkitSpeechRecognition;if(!SpeechRecognition){console.error(\"SpeechRecognition API is not supported by this browser.\");return;}// SpeechRecognitionオブジェクトを初期化\nrecognition.current=new SpeechRecognition();recognition.current.continuous=true;// 連続的な認識\nrecognition.current.interimResults=true;// 中間結果を返す\nrecognition.current.lang='ja-JP';// 日本語を指定\n// 音声認識の結果を処理するハンドラ\nrecognition.current.onresult=event=>{let finalTranscript='';for(let i=event.resultIndex;i<event.results.length;++i){if(event.results[i].isFinal){finalTranscript=event.results[i][0].transcript;break;// 最初の確定した結果のみを取得\n}}// 確定した結果が空でなければSkywayで送信\nif(finalTranscript.trim()!==''){console.log(\"Transcription final result:\",finalTranscript);// Skywayのデータストリームで送信\nif(localDataStreamRef.current&&me){//const result = `translate_data_web:${finalTranscript}`; \nconst URL2=URL+apiKey+\"&q=\"+encodeURI(finalTranscript)+\"&source=\"+'ja'+\"&target=\"+'en';// eslint-disable-line\nlet xhr=new XMLHttpRequest();xhr.open('POST',[URL2],false);xhr.send();if(xhr.status===200){const res=JSON.parse(xhr.responseText);const res2=res[\"data\"][\"translations\"][0][\"translatedText\"];const res3=\"translate_data_web:\".concat(res2);localDataStreamRef.current.write(res3);}console.log(\"Sent transcription: \\\"\".concat(finalTranscript,\"\\\"\"));// 自分の画面にも表示\nsetReceivedMessages(prevMessages=>[...prevMessages,{senderId:me.id,message:finalTranscript,isLocal:true}]);}}};// 認識エラー時のハンドラ\nrecognition.current.onerror=event=>{console.error(\"Speech recognition error:\",event.error);setIsListening(false);// エラー時はリスニング状態を停止\n};// 認識終了時のハンドラ\nrecognition.current.onend=()=>{console.log(\"Speech recognition ended.\");// 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\n// if (isListening) {\n//   recognition.current.start();\n// }\n};// コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\nreturn()=>{if(recognition.current){recognition.current.stop();}};},[me,localDataStreamRef]);/**\r\n   * リモートストリームをDOMに追加するヘルパー関数\r\n   * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */const attachRemoteStream=(stream,memberId)=>{if(robotDisplayRef.current&&(stream instanceof RemoteVideoStream||stream instanceof RemoteAudioStream)){// 既存のビデオ要素があれば削除\nconst existingVideo=remoteVideoElements.current.get(memberId);if(existingVideo){robotDisplayRef.current.removeChild(existingVideo);remoteVideoElements.current.delete(memberId);}const video=document.createElement(\"video\");video.autoplay=true;// 自動再生\nvideo.playsInline=true;// インライン再生 (iOSなどで必要)\nvideo.className=\"remote-video object-cover\";// スタイリング用のクラスとobject-coverを追加\nvideo.dataset.memberId=memberId;// メンバーIDをデータ属性に保存\nstream.attach(video);// ストリームをビデオ要素のソースに設定\nrobotDisplayRef.current.appendChild(video);remoteVideoElements.current.set(memberId,video);console.log(\"Attached stream from \".concat(memberId,\" to DOM.\"));}else{console.warn(\"Attempted to attach non-media stream or robotDisplayRef is null for member \".concat(memberId,\".\"));}};/**\r\n   * データストリームの受信を処理するヘルパー関数\r\n   * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */const handleDataStream=(stream,memberId)=>{if(stream instanceof RemoteDataStream){stream.onData.add(data=>{console.log(\"Received data from \".concat(memberId,\":\"),data);// 受信したメッセージを状態に追加\nsetReceivedMessages(prevMessages=>[...prevMessages,{senderId:memberId,message:data}]);// \"move_finish\" シグナルをチェック\nif(data===\"move_finish\"){console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");setIsMoveInProgress(false);// モーション終了\n}// AI提案のフォーマットをチェック\n// 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\nconst aiCombinedSuggestionRegex=/^ai_assist_1:(.*):ai_assist_2:(.*)$/;const combinedMatch=String(data).match(aiCombinedSuggestionRegex);if(combinedMatch){const suggestion1Content=combinedMatch[1];// キャプチャグループ1が最初の提案\nconst suggestion2Content=combinedMatch[2];// キャプチャグループ2が2番目の提案\nconsole.log(suggestion1Content);console.log(suggestion2Content);setAiSuggestions([{key:'ai_assist_1',text:suggestion1Content},// キーをai_assist_1に修正\n{key:'ai_assist_2',text:suggestion2Content}// キーをai_assist_2に修正\n]);console.log(\"Received combined AI suggestions.\");}else{// 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\nconst aiSingleSuggestionRegex=/^ai_assist_(\\d+):(.*)$/;const singleMatch=String(data).match(aiSingleSuggestionRegex);if(singleMatch){const suggestionNumber=parseInt(singleMatch[1],10);const suggestionContent=singleMatch[2];if(suggestionNumber===1||suggestionNumber===2){setAiSuggestions(prevSuggestions=>{const newSuggestions=[...prevSuggestions];newSuggestions[suggestionNumber-1]={key:\"ai_assist_\".concat(suggestionNumber),// キーをai_assist_Nに修正\ntext:suggestionContent};return newSuggestions;});console.log(\"Received single AI suggestion \".concat(suggestionNumber,\".\"));}}}// 新しい翻訳フォーマットをチェック\nconst translateRegex=/^translate_request:(.*)$/;const translateMatch=String(data).match(translateRegex);if(translateMatch){const translatedContent=translateMatch[1];setTranslatedText(translatedContent);// 状態を更新\nconsole.log(\"Received translated text: \".concat(translatedContent));}else{// 翻訳データではない場合、翻訳テキストをクリアするかは要検討\n// setTranslatedText(\"\");\n}});console.log(\"Listening for data from \".concat(memberId,\".\"));}else{console.warn(\"Attempted to handle non-data stream as data stream for member \".concat(memberId,\".\"));}};/**\r\n   * ルームに参加するハンドラ\r\n   * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n   */const handleJoinRoom=async()=>{if(!skywayContext){console.error(\"SkyWayContext is not initialized. Please wait or check token.\");return;}if(!roomName){console.error(\"Room name is empty. Please enter a room name to join.\");return;}if(skywayRoom&&me){console.warn(\"Already in a room. Please leave the current room first.\");return;}try{// 指定されたルーム名でP2Pルームを作成または検索\nconst room=await SkyWayRoom.FindOrCreate(skywayContext,{type:\"p2p\",// P2Pルームタイプ\nname:roomName});// roomオブジェクトが有効であることを確認\nif(!room){console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");throw new Error(\"Failed to create or find SkyWayRoom.\");}setSkywayRoom(room);console.log(\"SkyWayRoom '\".concat(roomName,\"' found or created.\"));// ルームに参加し、自分のメンバー情報を取得\nconst localMember=await room.join();// localMemberが有効であることを確認\nif(!localMember){console.error(\"room.join() returned null or undefined localMember.\");throw new Error(\"Failed to join the room.\");}setMe(localMember);console.log(\"Joined room '\".concat(roomName,\"' as member ID: \").concat(localMember.id));// ルームIDと自分のIDをコンソールに表示\nconsole.log(\"Room ID: \".concat(roomName,\" / My ID: \").concat(localMember.id));// 自分のカメラとマイクのストリームを作成し、公開\nconst{audio,video}=await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();localStreamRef.current=video;// ローカルビデオストリームを保存\nawait localMember.publish(video);const publication_audio=await localMember.publish(audio);audioPublicationRef.current=publication_audio;// オーディオPublicationを保存\nsetIsMuted(false);console.log(\"Published local camera and microphone stream.\");// 自分のデータストリームを作成し、公開\nconst dataStream=await SkyWayStreamFactory.createDataStream();localDataStreamRef.current=dataStream;// ローカルデータストリームを保存\nawait localMember.publish(dataStream);console.log(\"Published local data stream.\");// ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\nsetIsMoveInProgress(false);// --- 既存のストリームを購読するロジック ---\n// ルーム内の既存の公開ストリームをすべて購読する\nfor(const publication of room.publications){// 自分のストリームは購読しない\nif(localMember.id===publication.publisher.id){continue;}try{const{stream}=await localMember.subscribe(publication.id);console.log(\"Subscribed to existing stream from \".concat(publication.publisher.id,\", type: \").concat(publication.contentType));if(publication.contentType==='video'||publication.contentType==='audio'){attachRemoteStream(stream,publication.publisher.id);}else if(publication.contentType==='data'){handleDataStream(stream,publication.publisher.id);}else{console.warn(\"Unknown stream content type: \".concat(publication.contentType,\" from \").concat(publication.publisher.id));}}catch(subscribeError){console.error(\"Failed to subscribe to existing stream from \".concat(publication.publisher.id,\":\"),subscribeError);}}// --- ルームイベントリスナーの設定 ---\n// メンバーがルームに参加したときのイベント\nif(room.onMemberJoined){room.onMemberJoined.add(e=>{console.log(\"Member joined: \".concat(e.member.id));});}else{console.error(\"room.onMemberJoined is undefined. This is unexpected.\");}// メンバーがルームを離脱したときのイベント\nif(room.onMemberLeft){room.onMemberLeft.add(e=>{console.log(\"Member left: \".concat(e.member.id));// 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\nconst videoElement=remoteVideoElements.current.get(e.member.id);if(videoElement&&robotDisplayRef.current){robotDisplayRef.current.removeChild(videoElement);remoteVideoElements.current.delete(e.member.id);console.log(\"Removed video for member \".concat(e.member.id));}// データストリーム関連のクリーンアップもここに追加可能ですが、\n// onDataリスナーはストリームが閉じられると自動的に停止します。\n});}else{console.error(\"room.onMemberLeft is undefined. This is unexpected.\");}// ストリームが公開されたときのイベント\nif(room.onStreamPublished){room.onStreamPublished.add(async e=>{console.log(\"Stream published by \".concat(e.publication.publisher.id,\", type: \").concat(e.publication.contentType));// 自分のストリームは購読しない\nif(localMember.id!==e.publication.publisher.id){try{// リモートストリームを購読\nconst{stream}=await localMember.subscribe(e.publication.id);console.log(\"Subscribed to stream from \".concat(e.publication.publisher.id));if(e.publication.contentType==='video'||e.publication.contentType==='audio'){attachRemoteStream(stream,e.publication.publisher.id);}else if(e.publication.contentType==='data'){handleDataStream(stream,e.publication.publisher.id);}else{console.warn(\"Unknown stream content type: \".concat(e.publication.contentType,\" from \").concat(e.publication.publisher.id));}}catch(subscribeError){console.error(\"Failed to subscribe to stream from \".concat(e.publication.publisher.id,\":\"),subscribeError);}}else{console.log(\"Skipping subscription for own stream: \".concat(e.publication.publisher.id));}});}else{console.error(\"room.onStreamPublished is undefined. This is unexpected.\");}// ストリームが非公開になったときのイベント\nif(room.onStreamUnpublished){room.onStreamUnpublished.add(e=>{console.log(\"Stream unpublished by \".concat(e.publication.publisher.id));// 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\nconst videoElement=remoteVideoElements.current.get(e.publication.publisher.id);if(videoElement&&robotDisplayRef.current){robotDisplayRef.current.removeChild(videoElement);remoteVideoElements.current.delete(e.publication.publisher.id);console.log(\"Removed unpublished video for member \".concat(e.publication.publisher.id));}});}else{console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");}}catch(error){console.error(\"Failed to join room:\",error);// エラー発生時に状態をリセットして再試行可能にする\nsetSkywayRoom(null);setMe(null);// エラー時に既存のビデオ要素をクリーンアップ\nif(robotDisplayRef.current){Array.from(robotDisplayRef.current.children).forEach(child=>{if(child.tagName==='VIDEO'){// ビデオ要素のsrcObjectをクリアし、トラックを停止\nif(child.srcObject&&typeof child.srcObject.getTracks==='function'){child.srcObject.getTracks().forEach(track=>track.stop());child.srcObject=null;}child.remove();// DOMから要素を削除\n}});}remoteVideoElements.current.clear();if(localStreamRef.current){// LocalVideoStreamのstop()メソッドを呼び出す\nif(typeof localStreamRef.current.stop==='function'){localStreamRef.current.stop();console.log(\"Stopped local media stream during join error cleanup.\");}else{console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");}localStreamRef.current=null;}// LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\nlocalDataStreamRef.current=null;// 参照をクリア\nconsole.log(\"Local data stream reference cleared during join error cleanup.\");// ミュート状態もリセット\nsetIsMuted(false);audioPublicationRef.current=null;setIsMoveInProgress(false);// エラー時もモーション状態をリセット\nsetTranslatedText(\"\");// 翻訳テキストをクリア\n}};/**\r\n   * ルームから退出するハンドラ\r\n   */const handleLeaveRoom=async()=>{if(skywayRoom&&me){try{// ローカルストリームを停止し、公開を解除\nif(localStreamRef.current){// LocalVideoStreamのstop()メソッドを呼び出す\nif(typeof localStreamRef.current.stop==='function'){localStreamRef.current.stop();console.log(\"Stopped local media stream.\");}else{console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during leave.\");}localStreamRef.current=null;}// LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\nlocalDataStreamRef.current=null;// 参照をクリア\nconsole.log(\"Local data stream reference cleared.\");// オーディオPublicationの参照をクリア\naudioPublicationRef.current=null;setIsMuted(false);// ミュート状態をリセット\nsetTranslatedText(\"\");// 翻訳テキストをクリア\n// �追加: ルーム退出時に音声認識を停止\nif(isListening){recognition.current.stop();setIsListening(false);}await me.leave();// ルームから退出\nconsole.log(\"Left room '\".concat(roomName,\"'\"));// ルーム退出をコンソールに表示\nconsole.log(\"Left room: \".concat(roomName));// room.dispose()を使用\nif(skywayRoom){await skywayRoom.dispose();// ルームを閉じる (これはルームの作成者のみが効果的です)\nconsole.log(\"SkyWay Room disposed.\");}// SkyWay SDKに関するすべての操作が不要になった場合にcontext.dispose()を呼び出す\n// このコンポーネントがアンマウントされる際にuseEffectのクリーンアップ関数で処理されるため、ここでは呼び出さない\n}catch(error){}finally{// 状態をリセット\nsetMe(null);setSkywayRoom(null);setReceivedMessages([]);// 受信メッセージもクリア\n// すべてのリモートビデオ要素をDOMから削除\nif(robotDisplayRef.current){Array.from(robotDisplayRef.current.children).forEach(child=>{if(child.tagName==='VIDEO'){// ビデオ要素のsrcObjectをクリアし、トラックを停止\nif(child.srcObject&&typeof child.srcObject.getTracks==='function'){child.srcObject.getTracks().forEach(track=>track.stop());child.srcObject=null;}child.remove();// DOMから要素を削除\n}});}remoteVideoElements.current.clear();// AIモードもオフにする\nsetIsAiModeOn(false);setAiSuggestions([null,null]);// 提案もクリア\nsetIsMoveInProgress(false);// ルーム退出時もモーション状態をリセット\n}}};/**\r\n   * モーションを操作するボタンを押した時の処理\r\n   * @param {string | object} messageOrKey - 送信するメッセージのキー (messagesオブジェクトのキー) またはAI提案オブジェクト\r\n   */const handleSend=async messageOrKey=>{if(me&&skywayRoom&&localDataStreamRef.current){try{let messageToSend;let shouldSetMoveInProgress=false;// モーション進行中フラグを制御するための新しい変数\nif(typeof messageOrKey==='string'){// サイドボタンからの送信の場合、直接メッセージ文字列を使用\nif(messageOrKey.startsWith(\"template_motion_\")){messageToSend=messageOrKey;shouldSetMoveInProgress=true;// モーションコマンドの場合のみフラグを立てる\n}else if(messageOrKey.startsWith(\"template_voice_\")){messageToSend=messageOrKey;// ボイスコマンドの場合はshouldSetMoveInProgressをtrueにしない\n}else if(messageOrKey.startsWith(\"robot_reset\")){messageToSend=messageOrKey;}else{// 既存のmessagesオブジェクトからのルックアップ (AI提案以外でキーが渡された場合など)\nmessageToSend=messages[messageOrKey];}}else if(typeof messageOrKey==='object'&&messageOrKey.key){// messageOrKey.text から messageOrKey.key に変更\n// AI提案ボタンからの送信\nmessageToSend=messageOrKey.key;// 提案のキー（ai_assist_1など）を送信\n// AI提案の場合はshouldSetMoveInProgressをtrueにしない\n}if(!messageToSend){console.warn(\"Message to send is empty or not found.\");return;}localDataStreamRef.current.write(messageToSend);console.log(\"Sent message: \\\"\".concat(messageToSend,\"\\\"\"));// 送信したメッセージも自身の画面に表示\nsetReceivedMessages(prevMessages=>[...prevMessages,{senderId:me.id,message:messageToSend,isLocal:true}]);setAiSuggestions([null,null]);// 送信したら提案をクリア\n// shouldSetMoveInProgressがtrueの場合のみモーション進行中状態にする\nif(shouldSetMoveInProgress){setIsMoveInProgress(true);}// AI提案やボイスコマンドの場合は、isMoveInProgressは変更しない\n// (以前のモーションが進行中であればそのまま、そうでなければfalseのまま)\n}catch(error){console.error(\"Failed to send data:\",error);}}else{console.warn(\"Cannot send message: Not in a room, 'me' object is not available, or data stream is not ready.\");}};/**\r\n   * マイクのミュート/ミュート解除を切り替えるハンドラ\r\n   */const handleMute=async()=>{console.log(\"start\");if(!audioPublicationRef.current){console.warn(\"Audio publication not available. Cannot toggle mute.\");return;}try{if(isMuted){// 現在ミュート状態なら、ミュートを解除\nawait audioPublicationRef.current.enable();console.log(\"Microphone unmuted.\");}else{// 現在ミュート状態でないなら、ミュート\nawait audioPublicationRef.current.disable();console.log(\"Microphone muted.\");}setIsMuted(!isMuted);// ミュート状態をトグル\n}catch(error){console.error(\"Failed to toggle microphone mute state:\",error);}};// AIモードが変更されたときにシグナルを送信するためのフラグ\nconst isInitialAiModeRender=useRef(true);/**\r\n   * AIモードの状態変更を監視し、シグナルを送信するuseEffect\r\n   */useEffect(()=>{// 初回レンダリング時はシグナルを送信しない\nif(isInitialAiModeRender.current){isInitialAiModeRender.current=false;return;}// me オブジェクトとデータストリームが利用可能であることを確認\nif(!me||!localDataStreamRef.current){return;}if(isAiModeOn){// AIモードがONになったら、AIに提案を要求するメッセージを送信\nlocalDataStreamRef.current.write(\"robot_reset\");console.log(\"Sent AI_MODE_REQUEST_SUGGESTIONS signal.\");setAiSuggestions([null,null]);// 新しいセッションのために提案をクリア\n}else{// AIモードがOFFになったら提案をクリアし、AIモード終了のシグナルを送信\nlocalDataStreamRef.current.write(\"robot_reset\");console.log(\"Sent AI_MODE_OFF_SIGNAL.\");setAiSuggestions([null,null]);// 提案をクリア\n}},[isAiModeOn,me,localDataStreamRef]);// isAiModeOn, me, localDataStreamRef の変更に反応\n/**\r\n   * AIモードを切り替えるハンドラ\r\n   * この関数はAIモードの状態をトグルするのみで、シグナル送信はuseEffectに任せる\r\n   *//* eslint-disable */const handleAiModeToggle=()=>{setIsAiModeOn(prev=>!prev);};/* eslint-enable */// 🌟追加: 音声認識の開始・停止を切り替えるハンドラ\nconst handleToggleListening=()=>{if(!recognition.current){console.error(\"SpeechRecognition API is not initialized.\");return;}if(isListening){// 認識を停止\nrecognition.current.stop();console.log(\"Stopped speech recognition.\");}else{// 認識を開始\nrecognition.current.start();console.log(\"Started speech recognition.\");}setIsListening(!isListening);};return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header-left\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"motion-btn\",disabled:isAiModeOn||isMoveInProgress,children:\"\\u30E2\\u30FC\\u30B7\\u30E7\\u30F3\"}),translatedText&&/*#__PURE__*/_jsxs(\"div\",{className:\"translated-text\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"translated-text-label\",children:\"\\u7FFB\\u8A33: \"}),/*#__PURE__*/_jsx(\"span\",{className:\"translated-text-content\",children:translatedText})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"header-right\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"room-controls\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\u30EB\\u30FC\\u30E0\\u540D\\u3092\\u5165\\u529B\",value:roomName,onChange:e=>setRoomName(e.target.value),className:\"room-input\",disabled:!!me// ルーム参加中は入力不可にする\n}),!me?/*#__PURE__*/// ルームに参加していない場合\n_jsx(\"button\",{onClick:handleJoinRoom,className:\"join-room-btn\",disabled:!skywayContext||!roomName,children:\"\\u30EB\\u30FC\\u30E0\\u306B\\u53C2\\u52A0\"}):/*#__PURE__*/// ルームに参加している場合\n_jsx(\"button\",{onClick:handleLeaveRoom,className:\"leave-room-btn\",children:\"\\u30EB\\u30FC\\u30E0\\u3092\\u9000\\u51FA\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLogout,className:\"logout-btn\",children:\"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\"}),/*#__PURE__*/_jsx(\"button\",{className:\"voice-btn\",disabled:isAiModeOn||isMoveInProgress,children:\"\\u30DC\\u30A4\\u30B9\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"side-panel\",children:/*#__PURE__*/_jsx(\"div\",{className:\"side-panel-content\",children:Object.keys(messages).slice(0,14).map(key=>/*#__PURE__*/// 左側のボタン数を調整\n_jsxs(\"button\",{// 左側のボタンは \"template_motion_〇〇\" 形式で送信\nonClick:()=>handleSend(\"template_motion_\".concat(messages[key].japanese)),className:\"side-btn\",disabled:isAiModeOn||!me||isMoveInProgress// AIモード中、未参加、モーション中は無効化\n,children:[messages[key].japanese,\" \"]},key))})}),/*#__PURE__*/_jsx(\"div\",{className:\"main-area\",children:/*#__PURE__*/_jsx(\"div\",{className:\"robot-display\",ref:robotDisplayRef,children:(aiSuggestions[0]||aiSuggestions[1])&&/*#__PURE__*/_jsxs(\"div\",{className:\"ai-suggestions\",children:[aiSuggestions[0]&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleSend(aiSuggestions[0]),className:\"ai-suggestion-btn\",disabled:isMoveInProgress// モーション中は無効化\n,children:aiSuggestions[0].text}),aiSuggestions[1]&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleSend(aiSuggestions[1]),className:\"ai-suggestion-btn\",disabled:isMoveInProgress// モーション中は無効化\n,children:aiSuggestions[1].text})]})})}),/*#__PURE__*/_jsx(\"div\",{className:\"side-panel right\",children:/*#__PURE__*/_jsx(\"div\",{className:\"side-panel-content\",children:Object.keys(messages).slice(14).map(key=>/*#__PURE__*/// 右側のボタン数を調整\n_jsxs(\"button\",{// 右側のボタンは \"template_voice_〇〇\" 形式で送信\nonClick:()=>handleSend(\"template_voice_\".concat(messages[key].japanese)),className:\"side-btn\",disabled:isAiModeOn||!me||isMoveInProgress// AIモード中、未参加、モーション中は無効化\n,children:[messages[key].japanese,\" \"]},key))})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bottom-controls\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"control-btn ai-btn\",onClick:()=>handleAiModeToggle(),disabled:!me// ルームに参加していない場合は無効\n,children:isAiModeOn?'リセット   ':'AIモードON'}),/*#__PURE__*/_jsx(\"button\",{className:\"control-btn speech-recognition-btn \".concat(isListening?'listening':''),onClick:handleToggleListening,disabled:!me||!localDataStreamRef.current||isAiModeOn// ルーム未参加、データストリーム未準備、AIモード中は無効\n,children:isListening?'🔴 音声認識を停止':'🎤 音声認識を開始'}),/*#__PURE__*/_jsxs(\"button\",{className:\"control-btn mic-btn \".concat(isMuted?'muted':'')// ミュート状態に応じてクラスを追加\n,onClick:handleMute,id:\"micBtn\",disabled:!me||!audioPublicationRef.current||isAiModeOn// ルームに参加していない、またはオーディオが公開されていない、AIモード中は無効\n,children:[isMuted?'🔇 マイクミュート':'🎤 マイクON',\" \"]})]})]});}export default Home;","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","nowInSec","SkyWayAuthToken","SkyWayContext","SkyWayRoom","SkyWayStreamFactory","uuidV4","RemoteDataStream","RemoteVideoStream","RemoteAudioStream","jsx","_jsx","jsxs","_jsxs","Home","_ref","setIsLoggedIn","roomName","setRoomName","me","setMe","skywayContext","setSkywayContext","skywayRoom","setSkywayRoom","remoteVideoElements","Map","robotDisplayRef","localStreamRef","receivedMessages","setReceivedMessages","localDataStreamRef","isMuted","setIsMuted","audioPublicationRef","isAiModeOn","setIsAiModeOn","aiSuggestions","setAiSuggestions","isMoveInProgress","setIsMoveInProgress","translatedText","setTranslatedText","isListening","setIsListening","recognition","URL","apiKey","messages","hello","japanese","english","goodbye","bow","flap","lookUp","lookDown","lookRight","lookLeft","nod","tiltHead","spin","jump","dance","bowDeep","doingSomething","thankYou","good","ookini","amazing","takepicture","wait","Where_are_you_from","Yes","No","sorry","yourewelcome","name","handleLogout","appId","secretKey","token","undefined","jti","iat","exp","version","scope","rooms","methods","member","turn","enabled","encode","currentContext","initContext","Create","console","log","error","dispose","SpeechRecognition","window","webkitSpeechRecognition","current","continuous","interimResults","lang","onresult","event","finalTranscript","i","resultIndex","results","length","isFinal","transcript","trim","URL2","encodeURI","xhr","XMLHttpRequest","open","send","status","res","JSON","parse","responseText","res2","res3","concat","write","prevMessages","senderId","id","message","isLocal","onerror","onend","stop","attachRemoteStream","stream","memberId","existingVideo","get","removeChild","delete","video","document","createElement","autoplay","playsInline","className","dataset","attach","appendChild","set","warn","handleDataStream","onData","add","data","aiCombinedSuggestionRegex","combinedMatch","String","match","suggestion1Content","suggestion2Content","key","text","aiSingleSuggestionRegex","singleMatch","suggestionNumber","parseInt","suggestionContent","prevSuggestions","newSuggestions","translateRegex","translateMatch","translatedContent","handleJoinRoom","room","FindOrCreate","type","Error","localMember","join","audio","createMicrophoneAudioAndCameraStream","publish","publication_audio","dataStream","createDataStream","publication","publications","publisher","subscribe","contentType","subscribeError","onMemberJoined","e","onMemberLeft","videoElement","onStreamPublished","onStreamUnpublished","Array","from","children","forEach","child","tagName","srcObject","getTracks","track","remove","clear","handleLeaveRoom","leave","handleSend","messageOrKey","messageToSend","shouldSetMoveInProgress","startsWith","handleMute","enable","disable","isInitialAiModeRender","handleAiModeToggle","prev","handleToggleListening","start","disabled","placeholder","value","onChange","target","onClick","Object","keys","slice","map","ref"],"sources":["C:/banpaku_2025/banpaku_web_Another-version/src/home.js"],"sourcesContent":["\r\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport './style.css'; // style.cssを再度有効化\r\nimport {\r\n  nowInSec,\r\n  SkyWayAuthToken,\r\n  SkyWayContext,\r\n  SkyWayRoom,\r\n  SkyWayStreamFactory,\r\n  uuidV4,\r\n  RemoteDataStream, // RemoteDataStreamをインポート\r\n  RemoteVideoStream, // RemoteVideoStreamをインポート\r\n  RemoteAudioStream, // RemoteAudioStreamをインポート\r\n} from '@skyway-sdk/room';\r\n\r\n/**\r\n * ホーム画面コンポーネント\r\n * @param {object} props - プロパティ\r\n * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n */\r\nfunction Home({ setIsLoggedIn }) {\r\n  // ルーム名\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  // 自分の参加者情報 (ルームに参加すると設定されます)\r\n  const [me, setMe] = useState(null);\r\n  // SkyWayコンテキストのインスタンス\r\n  const [skywayContext, setSkywayContext] = useState(null);\r\n  // SkyWayルームのインスタンス\r\n  const [skywayRoom, setSkywayRoom] = useState(null);\r\n  // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\r\n  const remoteVideoElements = useRef(new Map());\r\n  // リモートビデオを表示するDOM要素への参照\r\n  const robotDisplayRef = useRef(null);\r\n  // ローカルストリームの参照を保持\r\n  const localStreamRef = useRef(null);\r\n  // 受信したメッセージを表示するための状態\r\n  // src/home.js\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [receivedMessages, setReceivedMessages] = useState([]);\r\n  // 送信したデータストリームの参照を保持\r\n  const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\r\n  // マイクの状態を表示するための状態 (ミュート状態を管理)\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  // オーディオストリームのPublicationを保持するための参照\r\n  const audioPublicationRef = useRef(null);\r\n  // AIモードがONかどうかを管理する状態\r\n  const [isAiModeOn, setIsAiModeOn] = useState(false);\r\n  // AIからの提案を保持する状態\r\n  // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\r\n  const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\r\n  // モーションが進行中かどうかを管理する状態\r\n  const [isMoveInProgress, setIsMoveInProgress] = useState(false);\r\n  // 翻訳されたテキストを保持する状態を追加\r\n  const [translatedText, setTranslatedText] = useState(\"\");\r\n  // 🌟追加: 音声認識が実行中かどうかを管理する状態\r\n  const [isListening, setIsListening] = useState(false);\r\n  // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\r\n  const recognition = useRef(null);\r\n\r\n  const URL = \"https://translation.googleapis.com/language/translate/v2?key=\";\r\n  const apiKey = 'AIzaSyBBk7P0P0XCyh3p0Ov7jiP9d1n02wYk_AY';\r\n  // メッセージとモーションの多言語マッピング\r\n  const messages = useMemo(() => ({\r\n    hello: {\r\n      japanese: 'リセット',\r\n      english: 'Hello'\r\n    },\r\n    goodbye: {\r\n      japanese: '決めポーズ',\r\n      english: 'Goodbye'\r\n    },\r\n    bow: {\r\n      japanese: 'バイバイ',\r\n      english: 'Bow'\r\n    },\r\n    flap: {\r\n      japanese: 'YES',\r\n      english: 'Flap'\r\n    },\r\n    lookUp: {\r\n      japanese: 'NO',\r\n      english: 'Look up'\r\n    },\r\n    lookDown: {\r\n      japanese: '右手を上げる',\r\n      english: 'Look down'\r\n    },\r\n    lookRight: {\r\n      japanese: '右手を下げる',\r\n      english: 'Look right'\r\n    },\r\n    lookLeft: {\r\n      japanese: '左手を上げる',\r\n      english: 'Left hand up' // Changed from 'Look left' for clarity\r\n    },\r\n    nod: {\r\n      japanese: '左手を下げる',\r\n      english: 'Left hand down' // Changed from 'Nod' for clarity\r\n    },\r\n    tiltHead: {\r\n      japanese: '上を向く',\r\n      english: 'Look up' // Changed from 'Tilt head' for clarity\r\n    },\r\n    spin: {\r\n      japanese: '下を向く',\r\n      english: 'Look down' // Changed from 'Spin' for clarity\r\n    },\r\n    jump: {\r\n      japanese: '右を向く',\r\n      english: 'Look right' // Changed from 'Jump' for clarity\r\n    },\r\n    dance: {\r\n      japanese: '左を向く',\r\n      english: 'Look left' // Changed from 'Dance' for clarity\r\n    },\r\n    bowDeep: {\r\n      japanese: 'パタパタ',\r\n      english: 'Flap arms' // Changed from 'Deep bow' for clarity\r\n    },\r\n    doingSomething: {\r\n      japanese: 'こんにちは',\r\n      english: 'Hello'\r\n    },\r\n    thankYou: {\r\n      japanese: 'バイバイ',\r\n      english: 'Goodbye' // Changed from 'Thank you' for clarity\r\n    },\r\n    good: {\r\n      japanese: 'ようこそ',\r\n      english: 'Welcome' // Changed from 'Good' for clarity\r\n    },\r\n    ookini: {\r\n      japanese: 'ありがとう',\r\n      english: 'Thank you (Kansai dialect)'\r\n    },\r\n    amazing: {\r\n      japanese: '楽しんでね',\r\n      english: 'Enjoy' // Changed from 'Amazing' for clarity\r\n    },\r\n     takepicture: {\r\n      japanese: '写真とろう',\r\n      english: 'take_picture' // Changed from 'Amazing' for clarity\r\n    },\r\n    wait: {\r\n      japanese: 'ちょっと待ってね',\r\n      english: 'wait' // Changed from 'Amazing' for clarity\r\n    },\r\n    good: {\r\n      japanese: 'いいね',\r\n      english: 'good' // Changed from 'Amazing' for clarity\r\n    },\r\n    Where_are_you_from: {\r\n      japanese: 'どこからきたの',\r\n      english: 'Where_are_you_from' // Changed from 'Amazing' for clarity\r\n    },\r\n    Yes: {\r\n      japanese: 'はい',\r\n      english: 'Yes' // Changed from 'Amazing' for clarity\r\n    },\r\n    No: {\r\n      japanese: 'いいえ',\r\n      english: 'No' // Changed from 'Amazing' for clarity\r\n    },\r\n    sorry: {\r\n      japanese: 'ごめんね',\r\n      english: 'Sorry' // Changed from 'Amazing' for clarity\r\n    },\r\n    yourewelcome: {\r\n      japanese: 'どういたしまして',\r\n      english: 'yourewelcome' // Changed from 'Amazing' for clarity\r\n    },\r\n    name: {\r\n      japanese: 'なまえ',\r\n      english: 'name' // Changed from 'Amazing' for clarity\r\n    }\r\n  }), []);\r\n\r\n\r\n  /**\r\n   * ログアウトボタンクリック時のハンドラ\r\n   */\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false); // ログイン状態をfalseに設定\r\n  };\r\n\r\n  // SkyWay App ID と Secret Key\r\n  // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\r\n  // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\r\n  const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\r\n  const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\r\n\r\n  // SkyWay認証トークンの生成\r\n  const token = useMemo(() => {\r\n    if (appId == null || secretKey == null) return undefined;\r\n\r\n    return new SkyWayAuthToken({\r\n      jti: uuidV4(), // JWT ID\r\n      iat: nowInSec(), // 発行時刻\r\n      exp: nowInSec() + 60 * 60 * 24, // 有効期限 (24時間)\r\n      version: 3,\r\n      scope: {\r\n        appId: appId,\r\n        rooms: [\r\n          {\r\n            name: \"*\", // すべてのルーム名に適用\r\n            methods: [\"create\", \"close\", \"updateMetadata\"], // ルーム操作の権限\r\n            member: {\r\n              name: \"*\", // すべてのメンバーに適用\r\n              methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\r\n            }\r\n          }],\r\n        turn: {\r\n          enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\r\n        }\r\n      }\r\n    }).encode(secretKey);\r\n\r\n  }, [appId, secretKey]);\r\n\r\n  /**\r\n   * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n   * トークンが利用可能になったときに一度だけ実行されます。\r\n   */\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    let currentContext;\r\n    const initContext = async () => {\r\n      try {\r\n        currentContext = await SkyWayContext.Create(token);\r\n        setSkywayContext(currentContext);\r\n        console.log(\"SkyWayContext created successfully.\");\r\n      } catch (error) {\r\n        console.error(\"Failed to create SkyWayContext:\", error);\r\n      }\r\n    };\r\n\r\n    initContext();\r\n\r\n    // コンポーネントのアンマウント時にコンテキストを破棄\r\n    return () => {\r\n      if (currentContext) {\r\n        currentContext.dispose();\r\n        console.log(\"SkyWayContext disposed.\");\r\n      }\r\n    };\r\n  }, [token]); // tokenが変更されたときにのみ実行\r\n\r\n  // 🌟追加: SpeechRecognition APIの初期化\r\n  useEffect(() => {\r\n    // ブラウザがSpeechRecognitionに対応しているか確認\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    if (!SpeechRecognition) {\r\n      console.error(\"SpeechRecognition API is not supported by this browser.\");\r\n      return;\r\n    }\r\n\r\n    // SpeechRecognitionオブジェクトを初期化\r\n    recognition.current = new SpeechRecognition();\r\n    recognition.current.continuous = true; // 連続的な認識\r\n    recognition.current.interimResults = true; // 中間結果を返す\r\n    recognition.current.lang = 'ja-JP'; // 日本語を指定\r\n\r\n    // 音声認識の結果を処理するハンドラ\r\n    recognition.current.onresult = (event) => {\r\n      let finalTranscript = '';\r\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n        if (event.results[i].isFinal) {\r\n          finalTranscript = event.results[i][0].transcript;\r\n          break; // 最初の確定した結果のみを取得\r\n        }\r\n      }\r\n\r\n      // 確定した結果が空でなければSkywayで送信\r\n      if (finalTranscript.trim() !== '') {\r\n        console.log(\"Transcription final result:\", finalTranscript);\r\n        // Skywayのデータストリームで送信\r\n        if (localDataStreamRef.current && me) {\r\n          //const result = `translate_data_web:${finalTranscript}`; \r\n          const URL2 = URL + apiKey + \"&q=\"+encodeURI(finalTranscript)+\"&source=\"+'ja'+\"&target=\"+'en';  // eslint-disable-line\r\n          let xhr = new XMLHttpRequest()\r\n          xhr.open('POST', [URL2], false)\r\n          xhr.send();\r\n          if (xhr.status === 200) {\r\n            const res = JSON.parse(xhr.responseText); \r\n            const res2 = res[\"data\"][\"translations\"][0][\"translatedText\"]\r\n            const res3 =`translate_data_web:${res2}`;\r\n            localDataStreamRef.current.write(res3);\r\n          }\r\n\r\n          console.log(`Sent transcription: \"${finalTranscript}\"`);\r\n          // 自分の画面にも表示\r\n          setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: finalTranscript, isLocal: true }]);\r\n        }\r\n      }\r\n    };\r\n\r\n    // 認識エラー時のハンドラ\r\n    recognition.current.onerror = (event) => {\r\n      console.error(\"Speech recognition error:\", event.error);\r\n      setIsListening(false); // エラー時はリスニング状態を停止\r\n    };\r\n\r\n    // 認識終了時のハンドラ\r\n    recognition.current.onend = () => {\r\n      console.log(\"Speech recognition ended.\");\r\n      // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\r\n      // if (isListening) {\r\n      //   recognition.current.start();\r\n      // }\r\n    };\r\n\r\n    // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\r\n    return () => {\r\n      if (recognition.current) {\r\n        recognition.current.stop();\r\n      }\r\n    };\r\n  }, [me, localDataStreamRef]);\r\n\r\n  /**\r\n   * リモートストリームをDOMに追加するヘルパー関数\r\n   * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\r\n  const attachRemoteStream = (stream, memberId) => {\r\n    if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\r\n      // 既存のビデオ要素があれば削除\r\n      const existingVideo = remoteVideoElements.current.get(memberId);\r\n      if (existingVideo) {\r\n        robotDisplayRef.current.removeChild(existingVideo);\r\n        remoteVideoElements.current.delete(memberId);\r\n      }\r\n\r\n      const video = document.createElement(\"video\");\r\n      video.autoplay = true; // 自動再生\r\n      video.playsInline = true; // インライン再生 (iOSなどで必要)\r\n      video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\r\n      video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\r\n      stream.attach(video); // ストリームをビデオ要素のソースに設定\r\n      robotDisplayRef.current.appendChild(video);\r\n      remoteVideoElements.current.set(memberId, video);\r\n      console.log(`Attached stream from ${memberId} to DOM.`);\r\n    } else {\r\n      console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * データストリームの受信を処理するヘルパー関数\r\n   * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\r\n  const handleDataStream = (stream, memberId) => {\r\n    if (stream instanceof RemoteDataStream) {\r\n      stream.onData.add((data) => {\r\n        console.log(`Received data from ${memberId}:`, data);\r\n        // 受信したメッセージを状態に追加\r\n        setReceivedMessages(prevMessages => [...prevMessages, { senderId: memberId, message: data }]);\r\n\r\n        // \"move_finish\" シグナルをチェック\r\n        if (data === \"move_finish\") {\r\n          console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\r\n          setIsMoveInProgress(false); // モーション終了\r\n        }\r\n\r\n        // AI提案のフォーマットをチェック\r\n        // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\r\n        const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\r\n        const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\r\n\r\n        if (combinedMatch) {\r\n          const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\r\n          const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\r\n          console.log(suggestion1Content);\r\n          console.log(suggestion2Content);\r\n\r\n          setAiSuggestions([\r\n            { key: 'ai_assist_1', text: suggestion1Content }, // キーをai_assist_1に修正\r\n            { key: 'ai_assist_2', text: suggestion2Content }  // キーをai_assist_2に修正\r\n          ]);\r\n          console.log(\"Received combined AI suggestions.\");\r\n        } else {\r\n          // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\r\n          const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\r\n          const singleMatch = String(data).match(aiSingleSuggestionRegex);\r\n\r\n          if (singleMatch) {\r\n            const suggestionNumber = parseInt(singleMatch[1], 10);\r\n            const suggestionContent = singleMatch[2];\r\n\r\n            if (suggestionNumber === 1 || suggestionNumber === 2) {\r\n              setAiSuggestions(prevSuggestions => {\r\n                const newSuggestions = [...prevSuggestions];\r\n                newSuggestions[suggestionNumber - 1] = {\r\n                  key: `ai_assist_${suggestionNumber}`, // キーをai_assist_Nに修正\r\n                  text: suggestionContent\r\n                };\r\n                return newSuggestions;\r\n              });\r\n              console.log(`Received single AI suggestion ${suggestionNumber}.`);\r\n            }\r\n          }\r\n        }\r\n\r\n        // 新しい翻訳フォーマットをチェック\r\n        const translateRegex = /^translate_request:(.*)$/;\r\n        const translateMatch = String(data).match(translateRegex);\r\n\r\n        if (translateMatch) {\r\n          const translatedContent = translateMatch[1];\r\n          setTranslatedText(translatedContent); // 状態を更新\r\n          console.log(`Received translated text: ${translatedContent}`);\r\n        } else {\r\n          // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\r\n          // setTranslatedText(\"\");\r\n        }\r\n      });\r\n      console.log(`Listening for data from ${memberId}.`);\r\n    } else {\r\n      console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ルームに参加するハンドラ\r\n   * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n   */\r\n  const handleJoinRoom = async () => {\r\n    if (!skywayContext) {\r\n      console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\r\n      return;\r\n    }\r\n    if (!roomName) {\r\n      console.error(\"Room name is empty. Please enter a room name to join.\");\r\n      return;\r\n    }\r\n    if (skywayRoom && me) {\r\n      console.warn(\"Already in a room. Please leave the current room first.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // 指定されたルーム名でP2Pルームを作成または検索\r\n      const room = await SkyWayRoom.FindOrCreate(skywayContext, {\r\n        type: \"p2p\", // P2Pルームタイプ\r\n        name: roomName,\r\n      });\r\n\r\n      // roomオブジェクトが有効であることを確認\r\n      if (!room) {\r\n        console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\r\n        throw new Error(\"Failed to create or find SkyWayRoom.\");\r\n      }\r\n\r\n      setSkywayRoom(room);\r\n      console.log(`SkyWayRoom '${roomName}' found or created.`);\r\n\r\n      // ルームに参加し、自分のメンバー情報を取得\r\n      const localMember = await room.join();\r\n      // localMemberが有効であることを確認\r\n      if (!localMember) {\r\n        console.error(\"room.join() returned null or undefined localMember.\");\r\n        throw new Error(\"Failed to join the room.\");\r\n      }\r\n      setMe(localMember);\r\n      console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\r\n      // ルームIDと自分のIDをコンソールに表示\r\n      console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\r\n\r\n\r\n      // 自分のカメラとマイクのストリームを作成し、公開\r\n      const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\r\n      localStreamRef.current = video; // ローカルビデオストリームを保存\r\n      await localMember.publish(video);\r\n      const publication_audio = await localMember.publish(audio);\r\n      audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\r\n      setIsMuted(false);\r\n      console.log(\"Published local camera and microphone stream.\");\r\n\r\n      // 自分のデータストリームを作成し、公開\r\n      const dataStream = await SkyWayStreamFactory.createDataStream();\r\n      localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\r\n      await localMember.publish(dataStream);\r\n      console.log(\"Published local data stream.\");\r\n\r\n      // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\r\n      setIsMoveInProgress(false);\r\n\r\n\r\n      // --- 既存のストリームを購読するロジック ---\r\n      // ルーム内の既存の公開ストリームをすべて購読する\r\n      for (const publication of room.publications) {\r\n        // 自分のストリームは購読しない\r\n        if (localMember.id === publication.publisher.id) {\r\n          continue;\r\n        }\r\n        try {\r\n          const { stream } = await localMember.subscribe(publication.id);\r\n          console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\r\n\r\n          if (publication.contentType === 'video' || publication.contentType === 'audio') {\r\n            attachRemoteStream(stream, publication.publisher.id);\r\n          } else if (publication.contentType === 'data') {\r\n            handleDataStream(stream, publication.publisher.id);\r\n          } else {\r\n            console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\r\n          }\r\n        } catch (subscribeError) {\r\n          console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\r\n        }\r\n      }\r\n\r\n      // --- ルームイベントリスナーの設定 ---\r\n\r\n      // メンバーがルームに参加したときのイベント\r\n      if (room.onMemberJoined) {\r\n        room.onMemberJoined.add((e) => {\r\n          console.log(`Member joined: ${e.member.id}`);\r\n        });\r\n      } else {\r\n        console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\r\n      }\r\n\r\n      // メンバーがルームを離脱したときのイベント\r\n      if (room.onMemberLeft) {\r\n        room.onMemberLeft.add((e) => {\r\n          console.log(`Member left: ${e.member.id}`);\r\n          // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\r\n          const videoElement = remoteVideoElements.current.get(e.member.id);\r\n          if (videoElement && robotDisplayRef.current) {\r\n            robotDisplayRef.current.removeChild(videoElement);\r\n            remoteVideoElements.current.delete(e.member.id);\r\n            console.log(`Removed video for member ${e.member.id}`);\r\n          }\r\n          // データストリーム関連のクリーンアップもここに追加可能ですが、\r\n          // onDataリスナーはストリームが閉じられると自動的に停止します。\r\n        });\r\n      } else {\r\n        console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\r\n      }\r\n\r\n      // ストリームが公開されたときのイベント\r\n      if (room.onStreamPublished) {\r\n        room.onStreamPublished.add(async (e) => {\r\n          console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\r\n          // 自分のストリームは購読しない\r\n          if (localMember.id !== e.publication.publisher.id) {\r\n            try {\r\n              // リモートストリームを購読\r\n              const { stream } = await localMember.subscribe(e.publication.id);\r\n              console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\r\n\r\n              if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\r\n                attachRemoteStream(stream, e.publication.publisher.id);\r\n              } else if (e.publication.contentType === 'data') {\r\n                handleDataStream(stream, e.publication.publisher.id);\r\n              } else {\r\n                console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\r\n              }\r\n            } catch (subscribeError) {\r\n              console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\r\n            }\r\n          } else {\r\n            console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\r\n      }\r\n\r\n      // ストリームが非公開になったときのイベント\r\n      if (room.onStreamUnpublished) {\r\n        room.onStreamUnpublished.add((e) => {\r\n          console.log(`Stream unpublished by ${e.publication.publisher.id}`);\r\n          // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\r\n          const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\r\n          if (videoElement && robotDisplayRef.current) {\r\n            robotDisplayRef.current.removeChild(videoElement);\r\n            remoteVideoElements.current.delete(e.publication.publisher.id);\r\n            console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error(\"Failed to join room:\", error);\r\n      // エラー発生時に状態をリセットして再試行可能にする\r\n      setSkywayRoom(null);\r\n      setMe(null);\r\n      // エラー時に既存のビデオ要素をクリーンアップ\r\n      if (robotDisplayRef.current) {\r\n        Array.from(robotDisplayRef.current.children).forEach(child => {\r\n          if (child.tagName === 'VIDEO') {\r\n            // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n            if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n              child.srcObject.getTracks().forEach(track => track.stop());\r\n              child.srcObject = null;\r\n            }\r\n            child.remove(); // DOMから要素を削除\r\n          }\r\n        });\r\n      }\r\n      remoteVideoElements.current.clear();\r\n      if (localStreamRef.current) {\r\n        // LocalVideoStreamのstop()メソッドを呼び出す\r\n        if (typeof localStreamRef.current.stop === 'function') {\r\n          localStreamRef.current.stop();\r\n          console.log(\"Stopped local media stream during join error cleanup.\");\r\n        } else {\r\n          console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\r\n        }\r\n        localStreamRef.current = null;\r\n      }\r\n      // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n      localDataStreamRef.current = null; // 参照をクリア\r\n      console.log(\"Local data stream reference cleared during join error cleanup.\");\r\n\r\n      // ミュート状態もリセット\r\n      setIsMuted(false);\r\n      audioPublicationRef.current = null;\r\n      setIsMoveInProgress(false); // エラー時もモーション状態をリセット\r\n      setTranslatedText(\"\"); // 翻訳テキストをクリア\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ルームから退出するハンドラ\r\n   */\r\n  const handleLeaveRoom = async () => {\r\n    if (skywayRoom && me) {\r\n      try {\r\n        // ローカルストリームを停止し、公開を解除\r\n        if (localStreamRef.current) {\r\n          // LocalVideoStreamのstop()メソッドを呼び出す\r\n          if (typeof localStreamRef.current.stop === 'function') {\r\n            localStreamRef.current.stop();\r\n            console.log(\"Stopped local media stream.\");\r\n          } else {\r\n            console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during leave.\");\r\n          }\r\n          localStreamRef.current = null;\r\n        }\r\n        // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n        localDataStreamRef.current = null; // 参照をクリア\r\n        console.log(\"Local data stream reference cleared.\");\r\n\r\n        // オーディオPublicationの参照をクリア\r\n        audioPublicationRef.current = null;\r\n        setIsMuted(false); // ミュート状態をリセット\r\n        setTranslatedText(\"\"); // 翻訳テキストをクリア\r\n        // �追加: ルーム退出時に音声認識を停止\r\n        if (isListening) {\r\n          recognition.current.stop();\r\n          setIsListening(false);\r\n        }\r\n\r\n        await me.leave(); // ルームから退出\r\n        console.log(`Left room '${roomName}'`);\r\n        // ルーム退出をコンソールに表示\r\n        console.log(`Left room: ${roomName}`);\r\n\r\n\r\n        // room.dispose()を使用\r\n        if (skywayRoom) {\r\n          await skywayRoom.dispose(); // ルームを閉じる (これはルームの作成者のみが効果的です)\r\n          console.log(\"SkyWay Room disposed.\");\r\n        }\r\n        // SkyWay SDKに関するすべての操作が不要になった場合にcontext.dispose()を呼び出す\r\n        // このコンポーネントがアンマウントされる際にuseEffectのクリーンアップ関数で処理されるため、ここでは呼び出さない\r\n\r\n      } catch (error) {\r\n      } finally {\r\n        // 状態をリセット\r\n        setMe(null);\r\n        setSkywayRoom(null);\r\n        setReceivedMessages([]); // 受信メッセージもクリア\r\n        // すべてのリモートビデオ要素をDOMから削除\r\n        if (robotDisplayRef.current) {\r\n          Array.from(robotDisplayRef.current.children).forEach(child => {\r\n            if (child.tagName === 'VIDEO') {\r\n              // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n              if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n                child.srcObject.getTracks().forEach(track => track.stop());\r\n                child.srcObject = null;\r\n              }\r\n              child.remove(); // DOMから要素を削除\r\n            }\r\n          });\r\n        }\r\n        remoteVideoElements.current.clear();\r\n        // AIモードもオフにする\r\n        setIsAiModeOn(false);\r\n        setAiSuggestions([null, null]); // 提案もクリア\r\n        setIsMoveInProgress(false); // ルーム退出時もモーション状態をリセット\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * モーションを操作するボタンを押した時の処理\r\n   * @param {string | object} messageOrKey - 送信するメッセージのキー (messagesオブジェクトのキー) またはAI提案オブジェクト\r\n   */\r\n  const handleSend = async (messageOrKey) => {\r\n    if (me && skywayRoom && localDataStreamRef.current) {\r\n      try {\r\n        let messageToSend;\r\n        let shouldSetMoveInProgress = false; // モーション進行中フラグを制御するための新しい変数\r\n\r\n        if (typeof messageOrKey === 'string') {\r\n          // サイドボタンからの送信の場合、直接メッセージ文字列を使用\r\n          if (messageOrKey.startsWith(\"template_motion_\")) {\r\n            messageToSend = messageOrKey;\r\n            shouldSetMoveInProgress = true; // モーションコマンドの場合のみフラグを立てる\r\n          } else if (messageOrKey.startsWith(\"template_voice_\")) {\r\n            messageToSend = messageOrKey;\r\n            // ボイスコマンドの場合はshouldSetMoveInProgressをtrueにしない\r\n          } else if (messageOrKey.startsWith(\"robot_reset\")){\r\n            messageToSend = messageOrKey;\r\n          } else {\r\n            // 既存のmessagesオブジェクトからのルックアップ (AI提案以外でキーが渡された場合など)\r\n            messageToSend = messages[messageOrKey];\r\n          }\r\n        } else if (typeof messageOrKey === 'object' && messageOrKey.key) { // messageOrKey.text から messageOrKey.key に変更\r\n          // AI提案ボタンからの送信\r\n          messageToSend = messageOrKey.key; // 提案のキー（ai_assist_1など）を送信\r\n          // AI提案の場合はshouldSetMoveInProgressをtrueにしない\r\n        }\r\n\r\n        if (!messageToSend) {\r\n          console.warn(`Message to send is empty or not found.`);\r\n          return;\r\n        }\r\n\r\n        localDataStreamRef.current.write(messageToSend);\r\n        console.log(`Sent message: \"${messageToSend}\"`);\r\n        // 送信したメッセージも自身の画面に表示\r\n        setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: messageToSend, isLocal: true }]);\r\n        setAiSuggestions([null, null]); // 送信したら提案をクリア\r\n\r\n        // shouldSetMoveInProgressがtrueの場合のみモーション進行中状態にする\r\n        if (shouldSetMoveInProgress) {\r\n          setIsMoveInProgress(true);\r\n        }\r\n        // AI提案やボイスコマンドの場合は、isMoveInProgressは変更しない\r\n        // (以前のモーションが進行中であればそのまま、そうでなければfalseのまま)\r\n\r\n      } catch (error) {\r\n        console.error(\"Failed to send data:\", error);\r\n      }\r\n    } else {\r\n      console.warn(\"Cannot send message: Not in a room, 'me' object is not available, or data stream is not ready.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * マイクのミュート/ミュート解除を切り替えるハンドラ\r\n   */\r\n  const handleMute = async () => {\r\n    console.log(\"start\");\r\n    if (!audioPublicationRef.current) {\r\n      console.warn(\"Audio publication not available. Cannot toggle mute.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (isMuted) {\r\n        // 現在ミュート状態なら、ミュートを解除\r\n        await audioPublicationRef.current.enable();\r\n        console.log(\"Microphone unmuted.\");\r\n      } else {\r\n        // 現在ミュート状態でないなら、ミュート\r\n        await audioPublicationRef.current.disable();\r\n        console.log(\"Microphone muted.\");\r\n      }\r\n      setIsMuted(!isMuted); // ミュート状態をトグル\r\n    } catch (error) {\r\n      console.error(\"Failed to toggle microphone mute state:\", error);\r\n    }\r\n  };\r\n\r\n  // AIモードが変更されたときにシグナルを送信するためのフラグ\r\n  const isInitialAiModeRender = useRef(true);\r\n\r\n  /**\r\n   * AIモードの状態変更を監視し、シグナルを送信するuseEffect\r\n   */\r\n  useEffect(() => {\r\n    // 初回レンダリング時はシグナルを送信しない\r\n    if (isInitialAiModeRender.current) {\r\n      isInitialAiModeRender.current = false;\r\n      return;\r\n    }\r\n\r\n    // me オブジェクトとデータストリームが利用可能であることを確認\r\n    if (!me || !localDataStreamRef.current) {\r\n      return;\r\n    }\r\n\r\n    if (isAiModeOn) {\r\n      // AIモードがONになったら、AIに提案を要求するメッセージを送信\r\n      localDataStreamRef.current.write(\"robot_reset\");\r\n      console.log(\"Sent AI_MODE_REQUEST_SUGGESTIONS signal.\");\r\n      setAiSuggestions([null, null]); // 新しいセッションのために提案をクリア\r\n    } else {\r\n      // AIモードがOFFになったら提案をクリアし、AIモード終了のシグナルを送信\r\n      localDataStreamRef.current.write(\"robot_reset\");\r\n      console.log(\"Sent AI_MODE_OFF_SIGNAL.\");\r\n      setAiSuggestions([null, null]); // 提案をクリア\r\n    }\r\n  }, [isAiModeOn, me, localDataStreamRef]); // isAiModeOn, me, localDataStreamRef の変更に反応\r\n\r\n  /**\r\n   * AIモードを切り替えるハンドラ\r\n   * この関数はAIモードの状態をトグルするのみで、シグナル送信はuseEffectに任せる\r\n   */\r\n  /* eslint-disable */\r\n  const handleAiModeToggle = () => {\r\n    setIsAiModeOn(prev => !prev);\r\n  };\r\n  /* eslint-enable */\r\n\r\n  // 🌟追加: 音声認識の開始・停止を切り替えるハンドラ\r\n  const handleToggleListening = () => {\r\n    if (!recognition.current) {\r\n      console.error(\"SpeechRecognition API is not initialized.\");\r\n      return;\r\n    }\r\n\r\n    if (isListening) {\r\n      // 認識を停止\r\n      recognition.current.stop();\r\n      console.log(\"Stopped speech recognition.\");\r\n    } else {\r\n      // 認識を開始\r\n      recognition.current.start();\r\n      console.log(\"Started speech recognition.\");\r\n    }\r\n    setIsListening(!isListening);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"header\">\r\n      \r\n        <div className=\"header-left\">\r\n          <button className=\"motion-btn\" disabled={isAiModeOn || isMoveInProgress}>モーション</button>\r\n          {/* 翻訳されたテキストを表示する要素を追加 */}\r\n          {translatedText && (\r\n            <div className=\"translated-text\">\r\n              <span className=\"translated-text-label\">翻訳: </span>\r\n              <span className=\"translated-text-content\">{translatedText}</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"header-right\">\r\n            <div className=\"room-controls\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"ルーム名を入力\"\r\n              value={roomName}\r\n              onChange={(e) => setRoomName(e.target.value)}\r\n              className=\"room-input\"\r\n              disabled={!!me} // ルーム参加中は入力不可にする\r\n            />\r\n            {!me ? ( // ルームに参加していない場合\r\n              <button onClick={handleJoinRoom} className=\"join-room-btn\" disabled={!skywayContext || !roomName}>\r\n                ルームに参加\r\n              </button>\r\n            ) : ( // ルームに参加している場合\r\n              <button onClick={handleLeaveRoom} className=\"leave-room-btn\">\r\n                ルームを退出\r\n              </button>\r\n            )}\r\n          </div>\r\n          <button onClick={handleLogout} className=\"logout-btn\">ログアウト</button>\r\n          <button className=\"voice-btn\" disabled={isAiModeOn || isMoveInProgress}>ボイス</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"main-container\">\r\n        <div className=\"side-panel\">\r\n          <div className=\"side-panel-content\">\r\n            {Object.keys(messages).slice(0, 14).map(key => ( // 左側のボタン数を調整\r\n              <button\r\n                key={key}\r\n                // 左側のボタンは \"template_motion_〇〇\" 形式で送信\r\n                onClick={() => handleSend(`template_motion_${messages[key].japanese}`)}\r\n                className=\"side-btn\"\r\n                disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\r\n              >\r\n                {messages[key].japanese} {/* 常に日本語表示 */}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"main-area\">\r\n\r\n          <div className=\"robot-display\" ref={robotDisplayRef}>\r\n            {/* リモートのビデオストリームがここに動的に追加されます */}\r\n            {/* ルーム情報はコンソールに表示されるため、ここでは表示しません */}\r\n\r\n            {/* AIからの提案表示 */}\r\n            {(aiSuggestions[0] || aiSuggestions[1]) && (\r\n              <div className=\"ai-suggestions\">\r\n                {aiSuggestions[0] && (\r\n                  <button\r\n                    onClick={() => handleSend(aiSuggestions[0])}\r\n                    className=\"ai-suggestion-btn\"\r\n                    disabled={isMoveInProgress} // モーション中は無効化\r\n                  >\r\n                    {aiSuggestions[0].text}\r\n                  </button>\r\n                )}\r\n                {aiSuggestions[1] && (\r\n                  <button\r\n                    onClick={() => handleSend(aiSuggestions[1])}\r\n                    className=\"ai-suggestion-btn\"\r\n                    disabled={isMoveInProgress} // モーション中は無効化\r\n                  >\r\n                    {aiSuggestions[1].text}\r\n                  </button>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"side-panel right\">\r\n          <div className=\"side-panel-content\">\r\n            {Object.keys(messages).slice(14).map(key => ( // 右側のボタン数を調整\r\n              <button\r\n                key={key}\r\n                // 右側のボタンは \"template_voice_〇〇\" 形式で送信\r\n                onClick={() => handleSend(`template_voice_${messages[key].japanese}`)}\r\n                className=\"side-btn\"\r\n                disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\r\n              >\r\n                {messages[key].japanese} {/* 常に日本語表示 */}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-controls\">\r\n        <button\r\n          className={`control-btn ai-btn`}\r\n          onClick={() => handleAiModeToggle()}\r\n          disabled={!me} // ルームに参加していない場合は無効\r\n        >\r\n          {isAiModeOn ? 'リセット   ' : 'AIモードON'}\r\n        </button>\r\n        {/* 🌟追加: 音声認識ボタン */}\r\n        <button\r\n          className={`control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`}\r\n          onClick={handleToggleListening}\r\n          disabled={!me || !localDataStreamRef.current || isAiModeOn} // ルーム未参加、データストリーム未準備、AIモード中は無効\r\n        >\r\n          {isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'}\r\n        </button>\r\n        <button\r\n          className={`control-btn mic-btn ${isMuted ? 'muted' : ''}`} // ミュート状態に応じてクラスを追加\r\n          onClick={handleMute}\r\n          id=\"micBtn\"\r\n          disabled={!me || !audioPublicationRef.current || isAiModeOn} // ルームに参加していない、またはオーディオが公開されていない、AIモード中は無効\r\n        >\r\n          {isMuted ? '🔇 マイクミュート' : '🎤 マイクON'} {/* ミュート状態に応じてアイコンとテキストを変更 */}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}