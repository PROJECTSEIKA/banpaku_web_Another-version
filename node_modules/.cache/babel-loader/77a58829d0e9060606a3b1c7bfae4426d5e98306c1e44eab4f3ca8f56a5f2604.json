{"ast":null,"code":"var _jsxFileName = \"C:\\\\banpaku_2025\\\\banpaku\\\\src\\\\home.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useMemo, useRef, useState } from \"react\";\n// import './style.css'; // style.cssを再度有効化\n// import {\n//   nowInSec,\n//   SkyWayAuthToken,\n//   SkyWayContext,\n//   SkyWayRoom,\n//   SkyWayStreamFactory,\n//   uuidV4,\n//   RemoteDataStream, // RemoteDataStreamをインポート\n//   RemoteVideoStream, // RemoteVideoStreamをインポート\n//   RemoteAudioStream, // RemoteAudioStreamをインポート\n// } from '@skyway-sdk/room';\n\n// /**\n//  * ホーム画面コンポーネント\n//  * @param {object} props - プロパティ\n//  * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\n//  */\n// function Home({ setIsLoggedIn }) {\n//   // ルーム名\n//   const [roomName, setRoomName] = useState(\"\");\n//   // 自分の参加者情報 (ルームに参加すると設定されます)\n//   const [me, setMe] = useState(null);\n//   // SkyWayコンテキストのインスタンス\n//   const [skywayContext, setSkywayContext] = useState(null);\n//   // SkyWayルームのインスタンス\n//   const [skywayRoom, setSkywayRoom] = useState(null);\n//   // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\n//   const remoteVideoElements = useRef(new Map());\n//   // リモートビデオを表示するDOM要素への参照\n//   const robotDisplayRef = useRef(null);\n//   // ローカルストリームの参照を保持\n//   const localStreamRef = useRef(null);\n//   // 受信したメッセージを表示するための状態\n//   // src/home.js\n//   // eslint-disable-next-line no-unused-vars\n//   const [receivedMessages, setReceivedMessages] = useState([]);\n//   // 送信したデータストリームの参照を保持\n//   const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\n//   // マイクの状態を表示するための状態 (ミュート状態を管理)\n//   const [isMuted, setIsMuted] = useState(false);\n//   // オーディオストリームのPublicationを保持するための参照\n//   const audioPublicationRef = useRef(null);\n//   // AIモードがONかどうかを管理する状態\n//   const [isAiModeOn, setIsAiModeOn] = useState(false);\n//   // AIからの提案を保持する状態\n//   // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\n//   const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\n//   // モーションが進行中かどうかを管理する状態\n//   const [isMoveInProgress, setIsMoveInProgress] = useState(false);\n//   // 翻訳されたテキストを保持する状態を追加\n//   const [translatedText, setTranslatedText] = useState(\"\");\n//   // 🌟追加: 音声認識が実行中かどうかを管理する状態\n//   const [isListening, setIsListening] = useState(false);\n//   // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\n//   const recognition = useRef(null);\n\n//   // メッセージとモーションの多言語マッピング\n//   const messages = useMemo(() => ({\n//     hello: {\n//       japanese: 'リセット',\n//       english: 'Hello'\n//     },\n//     goodbye: {\n//       japanese: '決めポーズ',\n//       english: 'Goodbye'\n//     },\n//     bow: {\n//       japanese: 'バイバイ',\n//       english: 'Bow'\n//     },\n//     flap: {\n//       japanese: 'YES',\n//       english: 'Flap'\n//     },\n//     lookUp: {\n//       japanese: 'NO',\n//       english: 'Look up'\n//     },\n//     lookDown: {\n//       japanese: '右手を上げる',\n//       english: 'Look down'\n//     },\n//     lookRight: {\n//       japanese: '右手を下げる',\n//       english: 'Look right'\n//     },\n//     lookLeft: {\n//       japanese: '左手を上げる',\n//       english: 'Left hand up' // Changed from 'Look left' for clarity\n//     },\n//     nod: {\n//       japanese: '左手を下げる',\n//       english: 'Left hand down' // Changed from 'Nod' for clarity\n//     },\n//     tiltHead: {\n//       japanese: '上を向く',\n//       english: 'Look up' // Changed from 'Tilt head' for clarity\n//     },\n//     spin: {\n//       japanese: '下を向く',\n//       english: 'Look down' // Changed from 'Spin' for clarity\n//     },\n//     jump: {\n//       japanese: '右を向く',\n//       english: 'Look right' // Changed from 'Jump' for clarity\n//     },\n//     dance: {\n//       japanese: '左を向く',\n//       english: 'Look left' // Changed from 'Dance' for clarity\n//     },\n//     bowDeep: {\n//       japanese: 'パタパタ',\n//       english: 'Flap arms' // Changed from 'Deep bow' for clarity\n//     },\n//     doingSomething: {\n//       japanese: 'こんにちは',\n//       english: 'Hello'\n//     },\n//     thankYou: {\n//       japanese: 'バイバイ',\n//       english: 'Goodbye' // Changed from 'Thank you' for clarity\n//     },\n//     good: {\n//       japanese: 'ようこそ',\n//       english: 'Welcome' // Changed from 'Good' for clarity\n//     },\n//     ookini: {\n//       japanese: 'ありがとう',\n//       english: 'Thank you (Kansai dialect)'\n//     },\n//     amazing: {\n//       japanese: '楽しんでね',\n//       english: 'Enjoy' // Changed from 'Amazing' for clarity\n//     }\n//   }), []);\n\n//   /**\n//    * ログアウトボタンクリック時のハンドラ\n//    */\n//   const handleLogout = () => {\n//     setIsLoggedIn(false); // ログイン状態をfalseに設定\n//   };\n\n//   // SkyWay App ID と Secret Key\n//   // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\n//   // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\n//   const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\n//   const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\n\n//   // SkyWay認証トークンの生成\n//   const token = useMemo(() => {\n//     if (appId == null || secretKey == null) return undefined;\n\n//     return new SkyWayAuthToken({\n//       jti: uuidV4(), // JWT ID\n//       iat: nowInSec(), // 発行時刻\n//       exp: nowInSec() + 60 * 60 * 24, // 有効期限 (24時間)\n//       version: 3,\n//       scope: {\n//         appId: appId,\n//         rooms: [\n//           {\n//             name: \"*\", // すべてのルーム名に適用\n//             methods: [\"create\", \"close\", \"updateMetadata\"], // ルーム操作の権限\n//             member: {\n//               name: \"*\", // すべてのメンバーに適用\n//               methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\n//             }\n//           }],\n//         turn: {\n//           enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\n//         }\n//       }\n//     }).encode(secretKey);\n\n//   }, [appId, secretKey]);\n\n//   /**\n//    * SkyWayContextの初期化とクリーンアップを行うuseEffect\n//    * トークンが利用可能になったときに一度だけ実行されます。\n//    */\n//   useEffect(() => {\n//     if (!token) return;\n\n//     let currentContext;\n//     const initContext = async () => {\n//       try {\n//         currentContext = await SkyWayContext.Create(token);\n//         setSkywayContext(currentContext);\n//         console.log(\"SkyWayContext created successfully.\");\n//       } catch (error) {\n//         console.error(\"Failed to create SkyWayContext:\", error);\n//       }\n//     };\n\n//     initContext();\n\n//     // コンポーネントのアンマウント時にコンテキストを破棄\n//     return () => {\n//       if (currentContext) {\n//         currentContext.dispose();\n//         console.log(\"SkyWayContext disposed.\");\n//       }\n//     };\n//   }, [token]); // tokenが変更されたときにのみ実行\n\n//   // 🌟追加: SpeechRecognition APIの初期化\n//   useEffect(() => {\n//     // ブラウザがSpeechRecognitionに対応しているか確認\n//     const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n//     if (!SpeechRecognition) {\n//       console.error(\"SpeechRecognition API is not supported by this browser.\");\n//       return;\n//     }\n\n//     // SpeechRecognitionオブジェクトを初期化\n//     recognition.current = new SpeechRecognition();\n//     recognition.current.continuous = true; // 連続的な認識\n//     recognition.current.interimResults = true; // 中間結果を返す\n//     recognition.current.lang = 'ja-JP'; // 日本語を指定\n\n//     // 音声認識の結果を処理するハンドラ\n//     recognition.current.onresult = (event) => {\n//       let finalTranscript = '';\n//       for (let i = event.resultIndex; i < event.results.length; ++i) {\n//         if (event.results[i].isFinal) {\n//           finalTranscript = event.results[i][0].transcript;\n//           break; // 最初の確定した結果のみを取得\n//         }\n//       }\n\n//       // 確定した結果が空でなければSkywayで送信\n//       if (finalTranscript.trim() !== '') {\n//         console.log(\"Transcription final result:\", finalTranscript);\n//         // Skywayのデータストリームで送信\n//         if (localDataStreamRef.current && me) {\n//           localDataStreamRef.current.write(finalTranscript);\n//           console.log(`Sent transcription: \"${finalTranscript}\"`);\n//           // 自分の画面にも表示\n//           setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: finalTranscript, isLocal: true }]);\n//         }\n//       }\n//     };\n\n//     // 認識エラー時のハンドラ\n//     recognition.current.onerror = (event) => {\n//       console.error(\"Speech recognition error:\", event.error);\n//       setIsListening(false); // エラー時はリスニング状態を停止\n//     };\n\n//     // 認識終了時のハンドラ\n//     recognition.current.onend = () => {\n//       console.log(\"Speech recognition ended.\");\n//       // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\n//       // if (isListening) {\n//       //   recognition.current.start();\n//       // }\n//     };\n\n//     // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\n//     return () => {\n//       if (recognition.current) {\n//         recognition.current.stop();\n//       }\n//     };\n//   }, [me, localDataStreamRef]);\n\n//   /**\n//    * リモートストリームをDOMに追加するヘルパー関数\n//    * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\n//    * @param {string} memberId - ストリームのパブリッシャーのメンバーID\n//    */\n//   const attachRemoteStream = (stream, memberId) => {\n//     if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\n//       // 既存のビデオ要素があれば削除\n//       const existingVideo = remoteVideoElements.current.get(memberId);\n//       if (existingVideo) {\n//         robotDisplayRef.current.removeChild(existingVideo);\n//         remoteVideoElements.current.delete(memberId);\n//       }\n\n//       const video = document.createElement(\"video\");\n//       video.autoplay = true; // 自動再生\n//       video.playsInline = true; // インライン再生 (iOSなどで必要)\n//       video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\n//       video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\n//       stream.attach(video); // ストリームをビデオ要素のソースに設定\n//       robotDisplayRef.current.appendChild(video);\n//       remoteVideoElements.current.set(memberId, video);\n//       console.log(`Attached stream from ${memberId} to DOM.`);\n//     } else {\n//       console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\n//     }\n//   };\n\n//   /**\n//    * データストリームの受信を処理するヘルパー関数\n//    * @param {RemoteDataStream} stream - 受信するデータストリーム\n//    * @param {string} memberId - ストリームのパブリッシャーのメンバーID\n//    */\n//   const handleDataStream = (stream, memberId) => {\n//     if (stream instanceof RemoteDataStream) {\n//       stream.onData.add((data) => {\n//         console.log(`Received data from ${memberId}:`, data);\n//         // 受信したメッセージを状態に追加\n//         setReceivedMessages(prevMessages => [...prevMessages, { senderId: memberId, message: data }]);\n\n//         // \"move_finish\" シグナルをチェック\n//         if (data === \"move_finish\") {\n//           console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\n//           setIsMoveInProgress(false); // モーション終了\n//         }\n\n//         // AI提案のフォーマットをチェック\n//         // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\n//         const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\n//         const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\n\n//         if (combinedMatch) {\n//           const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\n//           const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\n\n//           setAiSuggestions([\n//             { key: 'ai_assist_1', text: suggestion1Content }, // キーをai_assist_1に修正\n//             { key: 'ai_assist_2', text: suggestion2Content }  // キーをai_assist_2に修正\n//           ]);\n//           console.log(\"Received combined AI suggestions.\");\n//         } else {\n//           // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\n//           const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\n//           const singleMatch = String(data).match(aiSingleSuggestionRegex);\n\n//           if (singleMatch) {\n//             const suggestionNumber = parseInt(singleMatch[1], 10);\n//             const suggestionContent = singleMatch[2];\n\n//             if (suggestionNumber === 1 || suggestionNumber === 2) {\n//               setAiSuggestions(prevSuggestions => {\n//                 const newSuggestions = [...prevSuggestions];\n//                 newSuggestions[suggestionNumber - 1] = {\n//                   key: `ai_assist_${suggestionNumber}`, // キーをai_assist_Nに修正\n//                   text: suggestionContent\n//                 };\n//                 return newSuggestions;\n//               });\n//               console.log(`Received single AI suggestion ${suggestionNumber}.`);\n//             }\n//           }\n//         }\n\n//         // 新しい翻訳フォーマットをチェック\n//         const translateRegex = /^translate_request:(.*)$/;\n//         const translateMatch = String(data).match(translateRegex);\n\n//         if (translateMatch) {\n//           const translatedContent = translateMatch[1];\n//           setTranslatedText(translatedContent); // 状態を更新\n//           console.log(`Received translated text: ${translatedContent}`);\n//         } else {\n//           // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\n//           // setTranslatedText(\"\");\n//         }\n//       });\n//       console.log(`Listening for data from ${memberId}.`);\n//     } else {\n//       console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\n//     }\n//   };\n\n//   /**\n//    * ルームに参加するハンドラ\n//    * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\n//    */\n//   const handleJoinRoom = async () => {\n//     if (!skywayContext) {\n//       console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\n//       return;\n//     }\n//     if (!roomName) {\n//       console.error(\"Room name is empty. Please enter a room name to join.\");\n//       return;\n//     }\n//     if (skywayRoom && me) {\n//       console.warn(\"Already in a room. Please leave the current room first.\");\n//       return;\n//     }\n\n//     try {\n//       // 指定されたルーム名でP2Pルームを作成または検索\n//       const room = await SkyWayRoom.FindOrCreate(skywayContext, {\n//         type: \"p2p\", // P2Pルームタイプ\n//         name: roomName,\n//       });\n\n//       // roomオブジェクトが有効であることを確認\n//       if (!room) {\n//         console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\n//         throw new Error(\"Failed to create or find SkyWayRoom.\");\n//       }\n\n//       setSkywayRoom(room);\n//       console.log(`SkyWayRoom '${roomName}' found or created.`);\n\n//       // ルームに参加し、自分のメンバー情報を取得\n//       const localMember = await room.join();\n//       // localMemberが有効であることを確認\n//       if (!localMember) {\n//         console.error(\"room.join() returned null or undefined localMember.\");\n//         throw new Error(\"Failed to join the room.\");\n//       }\n//       setMe(localMember);\n//       console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\n//       // ルームIDと自分のIDをコンソールに表示\n//       console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\n\n//       // 自分のカメラとマイクのストリームを作成し、公開\n//       const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\n//       localStreamRef.current = video; // ローカルビデオストリームを保存\n//       await localMember.publish(video);\n//       const publication_audio = await localMember.publish(audio);\n//       audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\n//       setIsMuted(false);\n//       console.log(\"Published local camera and microphone stream.\");\n\n//       // 自分のデータストリームを作成し、公開\n//       const dataStream = await SkyWayStreamFactory.createDataStream();\n//       localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\n//       await localMember.publish(dataStream);\n//       console.log(\"Published local data stream.\");\n\n//       // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\n//       setIsMoveInProgress(false);\n\n//       // --- 既存のストリームを購読するロジック ---\n//       // ルーム内の既存の公開ストリームをすべて購読する\n//       for (const publication of room.publications) {\n//         // 自分のストリームは購読しない\n//         if (localMember.id === publication.publisher.id) {\n//           continue;\n//         }\n//         try {\n//           const { stream } = await localMember.subscribe(publication.id);\n//           console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\n\n//           if (publication.contentType === 'video' || publication.contentType === 'audio') {\n//             attachRemoteStream(stream, publication.publisher.id);\n//           } else if (publication.contentType === 'data') {\n//             handleDataStream(stream, publication.publisher.id);\n//           } else {\n//             console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\n//           }\n//         } catch (subscribeError) {\n//           console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\n//         }\n//       }\n\n//       // --- ルームイベントリスナーの設定 ---\n\n//       // メンバーがルームに参加したときのイベント\n//       if (room.onMemberJoined) {\n//         room.onMemberJoined.add((e) => {\n//           console.log(`Member joined: ${e.member.id}`);\n//         });\n//       } else {\n//         console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\n//       }\n\n//       // メンバーがルームを離脱したときのイベント\n//       if (room.onMemberLeft) {\n//         room.onMemberLeft.add((e) => {\n//           console.log(`Member left: ${e.member.id}`);\n//           // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\n//           const videoElement = remoteVideoElements.current.get(e.member.id);\n//           if (videoElement && robotDisplayRef.current) {\n//             robotDisplayRef.current.removeChild(videoElement);\n//             remoteVideoElements.current.delete(e.member.id);\n//             console.log(`Removed video for member ${e.member.id}`);\n//           }\n//           // データストリーム関連のクリーンアップもここに追加可能ですが、\n//           // onDataリスナーはストリームが閉じられると自動的に停止します。\n//         });\n//       } else {\n//         console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\n//       }\n\n//       // ストリームが公開されたときのイベント\n//       if (room.onStreamPublished) {\n//         room.onStreamPublished.add(async (e) => {\n//           console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\n//           // 自分のストリームは購読しない\n//           if (localMember.id !== e.publication.publisher.id) {\n//             try {\n//               // リモートストリームを購読\n//               const { stream } = await localMember.subscribe(e.publication.id);\n//               console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\n\n//               if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\n//                 attachRemoteStream(stream, e.publication.publisher.id);\n//               } else if (e.publication.contentType === 'data') {\n//                 handleDataStream(stream, e.publication.publisher.id);\n//               } else {\n//                 console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\n//               }\n//             } catch (subscribeError) {\n//               console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\n//             }\n//           } else {\n//             console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\n//           }\n//         });\n//       } else {\n//         console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\n//       }\n\n//       // ストリームが非公開になったときのイベント\n//       if (room.onStreamUnpublished) {\n//         room.onStreamUnpublished.add((e) => {\n//           console.log(`Stream unpublished by ${e.publication.publisher.id}`);\n//           // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\n//           const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\n//           if (videoElement && robotDisplayRef.current) {\n//             robotDisplayRef.current.removeChild(videoElement);\n//             remoteVideoElements.current.delete(e.publication.publisher.id);\n//             console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\n//           }\n//         });\n//       } else {\n//         console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\n//       }\n\n//     } catch (error) {\n//       console.error(\"Failed to join room:\", error);\n//       // エラー発生時に状態をリセットして再試行可能にする\n//       setSkywayRoom(null);\n//       setMe(null);\n//       // エラー時に既存のビデオ要素をクリーンアップ\n//       if (robotDisplayRef.current) {\n//         Array.from(robotDisplayRef.current.children).forEach(child => {\n//           if (child.tagName === 'VIDEO') {\n//             // ビデオ要素のsrcObjectをクリアし、トラックを停止\n//             if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\n//               child.srcObject.getTracks().forEach(track => track.stop());\n//               child.srcObject = null;\n//             }\n//             child.remove(); // DOMから要素を削除\n//           }\n//         });\n//       }\n//       remoteVideoElements.current.clear();\n//       if (localStreamRef.current) {\n//         // LocalVideoStreamのstop()メソッドを呼び出す\n//         if (typeof localStreamRef.current.stop === 'function') {\n//           localStreamRef.current.stop();\n//           console.log(\"Stopped local media stream during join error cleanup.\");\n//         } else {\n//           console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\n//         }\n//         localStreamRef.current = null;\n//       }\n//       // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\n//       localDataStreamRef.current = null; // 参照をクリア\n//       console.log(\"Local data stream reference cleared during join error cleanup.\");\n\n//       // ミュート状態もリセット\n//       setIsMuted(false);\n//       audioPublicationRef.current = null;\n//       setIsMoveInProgress(false); // エラー時もモーション状態をリセット\n//       setTranslatedText(\"\"); // 翻訳テキストをクリア\n//     }\n//   };\n\n//   /**\n//    * ルームから退出するハンドラ\n//    */\n//   const handleLeaveRoom = async () => {\n//     if (skywayRoom && me) {\n//       try {\n//         // ローカルストリームを停止し、公開を解除\n//         if (localStreamRef.current) {\n//           // LocalVideoStreamのstop()メソッドを呼び出す\n//           if (typeof localStreamRef.current.stop === 'function') {\n//             localStreamRef.current.stop();\n//             console.log(\"Stopped local media stream.\");\n//           } else {\n//             console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during leave.\");\n//           }\n//           localStreamRef.current = null;\n//         }\n//         // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\n//         localDataStreamRef.current = null; // 参照をクリア\n//         console.log(\"Local data stream reference cleared.\");\n\n//         // オーディオPublicationの参照をクリア\n//         audioPublicationRef.current = null;\n//         setIsMuted(false); // ミュート状態をリセット\n//         setTranslatedText(\"\"); // 翻訳テキストをクリア\n//         // �追加: ルーム退出時に音声認識を停止\n//         if (isListening) {\n//           recognition.current.stop();\n//           setIsListening(false);\n//         }\n\n//         await me.leave(); // ルームから退出\n//         console.log(`Left room '${roomName}'`);\n//         // ルーム退出をコンソールに表示\n//         console.log(`Left room: ${roomName}`);\n\n//         // room.dispose()を使用\n//         if (skywayRoom) {\n//           await skywayRoom.dispose(); // ルームを閉じる (これはルームの作成者のみが効果的です)\n//           console.log(\"SkyWay Room disposed.\");\n//         }\n//         // SkyWay SDKに関するすべての操作が不要になった場合にcontext.dispose()を呼び出す\n//         // このコンポーネントがアンマウントされる際にuseEffectのクリーンアップ関数で処理されるため、ここでは呼び出さない\n\n//       } catch (error) {\n//       } finally {\n//         // 状態をリセット\n//         setMe(null);\n//         setSkywayRoom(null);\n//         setReceivedMessages([]); // 受信メッセージもクリア\n//         // すべてのリモートビデオ要素をDOMから削除\n//         if (robotDisplayRef.current) {\n//           Array.from(robotDisplayRef.current.children).forEach(child => {\n//             if (child.tagName === 'VIDEO') {\n//               // ビデオ要素のsrcObjectをクリアし、トラックを停止\n//               if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\n//                 child.srcObject.getTracks().forEach(track => track.stop());\n//                 child.srcObject = null;\n//               }\n//               child.remove(); // DOMから要素を削除\n//             }\n//           });\n//         }\n//         remoteVideoElements.current.clear();\n//         // AIモードもオフにする\n//         setIsAiModeOn(false);\n//         setAiSuggestions([null, null]); // 提案もクリア\n//         setIsMoveInProgress(false); // ルーム退出時もモーション状態をリセット\n//       }\n//     }\n//   };\n\n//   /**\n//    * モーションを操作するボタンを押した時の処理\n//    * @param {string | object} messageOrKey - 送信するメッセージのキー (messagesオブジェクトのキー) またはAI提案オブジェクト\n//    */\n//   const handleSend = async (messageOrKey) => {\n//     if (me && skywayRoom && localDataStreamRef.current) {\n//       try {\n//         let messageToSend;\n//         let shouldSetMoveInProgress = false; // モーション進行中フラグを制御するための新しい変数\n\n//         if (typeof messageOrKey === 'string') {\n//           // サイドボタンからの送信の場合、直接メッセージ文字列を使用\n//           if (messageOrKey.startsWith(\"template_motion_\")) {\n//             messageToSend = messageOrKey;\n//             shouldSetMoveInProgress = true; // モーションコマンドの場合のみフラグを立てる\n//           } else if (messageOrKey.startsWith(\"template_voice_\")) {\n//             messageToSend = messageOrKey;\n//             // ボイスコマンドの場合はshouldSetMoveInProgressをtrueにしない\n//           } else if (messageOrKey.startsWith(\"robot_reset\")){\n//             messageToSend = messageOrKey;\n//           } else {\n//             // 既存のmessagesオブジェクトからのルックアップ (AI提案以外でキーが渡された場合など)\n//             messageToSend = messages[messageOrKey];\n//           }\n//         } else if (typeof messageOrKey === 'object' && messageOrKey.key) { // messageOrKey.text から messageOrKey.key に変更\n//           // AI提案ボタンからの送信\n//           messageToSend = messageOrKey.key; // 提案のキー（ai_assist_1など）を送信\n//           // AI提案の場合はshouldSetMoveInProgressをtrueにしない\n//         }\n\n//         if (!messageToSend) {\n//           console.warn(`Message to send is empty or not found.`);\n//           return;\n//         }\n\n//         localDataStreamRef.current.write(messageToSend);\n//         console.log(`Sent message: \"${messageToSend}\"`);\n//         // 送信したメッセージも自身の画面に表示\n//         setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: messageToSend, isLocal: true }]);\n//         setAiSuggestions([null, null]); // 送信したら提案をクリア\n\n//         // shouldSetMoveInProgressがtrueの場合のみモーション進行中状態にする\n//         if (shouldSetMoveInProgress) {\n//           setIsMoveInProgress(true);\n//         }\n//         // AI提案やボイスコマンドの場合は、isMoveInProgressは変更しない\n//         // (以前のモーションが進行中であればそのまま、そうでなければfalseのまま)\n\n//       } catch (error) {\n//         console.error(\"Failed to send data:\", error);\n//       }\n//     } else {\n//       console.warn(\"Cannot send message: Not in a room, 'me' object is not available, or data stream is not ready.\");\n//     }\n//   };\n\n//   /**\n//    * マイクのミュート/ミュート解除を切り替えるハンドラ\n//    */\n//   const handleMute = async () => {\n//     console.log(\"start\");\n//     if (!audioPublicationRef.current) {\n//       console.warn(\"Audio publication not available. Cannot toggle mute.\");\n//       return;\n//     }\n\n//     try {\n//       if (isMuted) {\n//         // 現在ミュート状態なら、ミュートを解除\n//         await audioPublicationRef.current.enable();\n//         console.log(\"Microphone unmuted.\");\n//       } else {\n//         // 現在ミュート状態でないなら、ミュート\n//         await audioPublicationRef.current.disable();\n//         console.log(\"Microphone muted.\");\n//       }\n//       setIsMuted(!isMuted); // ミュート状態をトグル\n//     } catch (error) {\n//       console.error(\"Failed to toggle microphone mute state:\", error);\n//     }\n//   };\n\n//   // AIモードが変更されたときにシグナルを送信するためのフラグ\n//   const isInitialAiModeRender = useRef(true);\n\n//   /**\n//    * AIモードの状態変更を監視し、シグナルを送信するuseEffect\n//    */\n//   useEffect(() => {\n//     // 初回レンダリング時はシグナルを送信しない\n//     if (isInitialAiModeRender.current) {\n//       isInitialAiModeRender.current = false;\n//       return;\n//     }\n\n//     // me オブジェクトとデータストリームが利用可能であることを確認\n//     if (!me || !localDataStreamRef.current) {\n//       return;\n//     }\n\n//     if (isAiModeOn) {\n//       // AIモードがONになったら、AIに提案を要求するメッセージを送信\n//       localDataStreamRef.current.write(\"ai_assist_on\");\n//       console.log(\"Sent AI_MODE_REQUEST_SUGGESTIONS signal.\");\n//       setAiSuggestions([null, null]); // 新しいセッションのために提案をクリア\n//     } else {\n//       // AIモードがOFFになったら提案をクリアし、AIモード終了のシグナルを送信\n//       localDataStreamRef.current.write(\"ai_assist_off\");\n//       console.log(\"Sent AI_MODE_OFF_SIGNAL.\");\n//       setAiSuggestions([null, null]); // 提案をクリア\n//     }\n//   }, [isAiModeOn, me, localDataStreamRef]); // isAiModeOn, me, localDataStreamRef の変更に反応\n\n//   /**\n//    * AIモードを切り替えるハンドラ\n//    * この関数はAIモードの状態をトグルするのみで、シグナル送信はuseEffectに任せる\n//    */\n//   /* eslint-disable */\n//   const handleAiModeToggle = () => {\n//     setIsAiModeOn(prev => !prev);\n//   };\n//   /* eslint-enable */\n\n//   // 🌟追加: 音声認識の開始・停止を切り替えるハンドラ\n//   const handleToggleListening = () => {\n//     if (!recognition.current) {\n//       console.error(\"SpeechRecognition API is not initialized.\");\n//       return;\n//     }\n\n//     if (isListening) {\n//       // 認識を停止\n//       recognition.current.stop();\n//       console.log(\"Stopped speech recognition.\");\n//     } else {\n//       // 認識を開始\n//       recognition.current.start();\n//       console.log(\"Started speech recognition.\");\n//     }\n//     setIsListening(!isListening);\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"header\">\n//         <div className=\"header-left\">\n//           <button className=\"motion-btn\" disabled={isAiModeOn || isMoveInProgress}>モーション</button>\n//           {/* 翻訳されたテキストを表示する要素を追加 */}\n//           {translatedText && (\n//             <div className=\"translated-text\">\n//               <span className=\"translated-text-label\">翻訳: </span>\n//               <span className=\"translated-text-content\">{translatedText}</span>\n//             </div>\n//           )}\n//         </div>\n//         <div className=\"header-right\">\n//           <button onClick={handleLogout} className=\"logout-btn\">ログアウト</button>\n//           <button className=\"voice-btn\" disabled={isAiModeOn || isMoveInProgress}>ボイス</button>\n//         </div>\n//       </div>\n//       <div className=\"main-container\">\n//         <div className=\"side-panel\">\n//           <div className=\"side-panel-content\">\n//             {Object.keys(messages).slice(0, 14).map(key => ( // 左側のボタン数を調整\n//               <button\n//                 key={key}\n//                 // 左側のボタンは \"template_motion_〇〇\" 形式で送信\n//                 onClick={() => handleSend(`template_motion_${messages[key].japanese}`)}\n//                 className=\"side-btn\"\n//                 disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\n//               >\n//                 {messages[key].japanese} {/* 常に日本語表示 */}\n//               </button>\n//             ))}\n//           </div>\n//         </div>\n//         <div className=\"main-area\">\n//           <div className=\"room-controls\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"ルーム名を入力\"\n//               value={roomName}\n//               onChange={(e) => setRoomName(e.target.value)}\n//               className=\"room-input\"\n//               disabled={!!me} // ルーム参加中は入力不可にする\n//             />\n//             {!me ? ( // ルームに参加していない場合\n//               <button onClick={handleJoinRoom} className=\"join-room-btn\" disabled={!skywayContext || !roomName}>\n//                 ルームに参加\n//               </button>\n//             ) : ( // ルームに参加している場合\n//               <button onClick={handleLeaveRoom} className=\"leave-room-btn\">\n//                 ルームを退出\n//               </button>\n//             )}\n//           </div>\n//           <div className=\"robot-display\" ref={robotDisplayRef}>\n//             {/* リモートのビデオストリームがここに動的に追加されます */}\n//             {/* ルーム情報はコンソールに表示されるため、ここでは表示しません */}\n\n//             {/* AIからの提案表示 */}\n//             {(aiSuggestions[0] || aiSuggestions[1]) && (\n//               <div className=\"ai-suggestions\">\n//                 {aiSuggestions[0] && (\n//                   <button\n//                     onClick={() => handleSend(aiSuggestions[0])}\n//                     className=\"ai-suggestion-btn\"\n//                     disabled={isMoveInProgress} // モーション中は無効化\n//                   >\n//                     {aiSuggestions[0].text}\n//                   </button>\n//                 )}\n//                 {aiSuggestions[1] && (\n//                   <button\n//                     onClick={() => handleSend(aiSuggestions[1])}\n//                     className=\"ai-suggestion-btn\"\n//                     disabled={isMoveInProgress} // モーション中は無効化\n//                   >\n//                     {aiSuggestions[1].text}\n//                   </button>\n//                 )}\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//         <div className=\"side-panel right\">\n//           <div className=\"side-panel-content\">\n//             {Object.keys(messages).slice(14).map(key => ( // 右側のボタン数を調整\n//               <button\n//                 key={key}\n//                 // 右側のボタンは \"template_voice_〇〇\" 形式で送信\n//                 onClick={() => handleSend(`template_voice_${messages[key].japanese}`)}\n//                 className=\"side-btn\"\n//                 disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\n//               >\n//                 {messages[key].japanese} {/* 常に日本語表示 */}\n//               </button>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//       <div className=\"bottom-controls\">\n//         <button\n//           className={`control-btn ai-btn`}\n//           onClick={() => handleAiModeToggle()}\n//           disabled={!me} // ルームに参加していない場合は無効\n//         >\n//           {isAiModeOn ? 'AIモードOFF' : 'AIモードON'}\n//         </button>\n//         {/* 🌟追加: 音声認識ボタン */}\n//         <button\n//           className={`control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`}\n//           onClick={handleToggleListening}\n//           disabled={!me || !localDataStreamRef.current || isAiModeOn} // ルーム未参加、データストリーム未準備、AIモード中は無効\n//         >\n//           {isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'}\n//         </button>\n//         <button\n//           className={`control-btn mic-btn ${isMuted ? 'muted' : ''}`} // ミュート状態に応じてクラスを追加\n//           onClick={handleMute}\n//           id=\"micBtn\"\n//           disabled={!me || !audioPublicationRef.current || isAiModeOn} // ルームに参加していない、またはオーディオが公開されていない、AIモード中は無効\n//         >\n//           {isMuted ? '🔇 マイクミュート' : '🎤 マイクON'} {/* ミュート状態に応じてアイコンとテキストを変更 */}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Home;\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport './style.css'; // style.cssを再度有効化\nimport { nowInSec, SkyWayAuthToken, SkyWayContext, SkyWayRoom, SkyWayStreamFactory, uuidV4, RemoteDataStream, RemoteVideoStream, RemoteAudioStream } from '@skyway-sdk/room';\n\n/**\r\n * ホーム画面コンポーネント\r\n * @param {object} props - プロパティ\r\n * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home({\n  setIsLoggedIn\n}) {\n  _s();\n  const [roomName, setRoomName] = useState(\"\");\n  const [me, setMe] = useState(null);\n  const [skywayContext, setSkywayContext] = useState(null);\n  const [skywayRoom, setSkywayRoom] = useState(null);\n  const remoteVideoElements = useRef(new Map());\n  const robotDisplayRef = useRef(null);\n  const localStreamRef = useRef(null);\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  const localDataStreamRef = useRef(null);\n  const [isMuted, setIsMuted] = useState(false);\n  const audioPublicationRef = useRef(null);\n  const [isAiModeOn, setIsAiModeOn] = useState(false);\n  const [aiSuggestions, setAiSuggestions] = useState([null, null]);\n  const [isMoveInProgress, setIsMoveInProgress] = useState(false);\n  const [translatedText, setTranslatedText] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const recognition = useRef(null);\n\n  // 翻訳結果を保持する状態を追加\n  const [translationResult, setTranslationResult] = useState(null);\n  // 翻訳API呼び出し中かどうかを管理する状態\n  const [isTranslating, setIsTranslating] = useState(false);\n\n  // メッセージとモーションの多言語マッピング\n  const messages = useMemo(() => ({\n    hello: {\n      japanese: 'リセット',\n      english: 'Hello'\n    },\n    goodbye: {\n      japanese: '決めポーズ',\n      english: 'Goodbye'\n    },\n    bow: {\n      japanese: 'バイバイ',\n      english: 'Bow'\n    },\n    flap: {\n      japanese: 'YES',\n      english: 'Flap'\n    },\n    lookUp: {\n      japanese: 'NO',\n      english: 'Look up'\n    },\n    lookDown: {\n      japanese: '右手を上げる',\n      english: 'Look down'\n    },\n    lookRight: {\n      japanese: '右手を下げる',\n      english: 'Look right'\n    },\n    lookLeft: {\n      japanese: '左手を上げる',\n      english: 'Left hand up'\n    },\n    nod: {\n      japanese: '左手を下げる',\n      english: 'Left hand down'\n    },\n    tiltHead: {\n      japanese: '上を向く',\n      english: 'Look up'\n    },\n    spin: {\n      japanese: '下を向く',\n      english: 'Look down'\n    },\n    jump: {\n      japanese: '右を向く',\n      english: 'Look right'\n    },\n    dance: {\n      japanese: '左を向く',\n      english: 'Look left'\n    },\n    bowDeep: {\n      japanese: 'パタパタ',\n      english: 'Flap arms'\n    },\n    doingSomething: {\n      japanese: 'こんにちは',\n      english: 'Hello'\n    },\n    thankYou: {\n      japanese: 'バイバイ',\n      english: 'Goodbye'\n    },\n    good: {\n      japanese: 'ようこそ',\n      english: 'Welcome'\n    },\n    ookini: {\n      japanese: 'ありがとう',\n      english: 'Thank you (Kansai dialect)'\n    },\n    amazing: {\n      japanese: '楽しんでね',\n      english: 'Enjoy'\n    }\n  }), []);\n\n  /**\r\n   * Google Translation APIを呼び出す関数\r\n   * @param {string} textToTranslate - 翻訳するテキスト\r\n   */\n  const translateText = async textToTranslate => {\n    // 翻訳API呼び出し中は二重に呼び出さない\n    if (isTranslating) return;\n    setIsTranslating(true);\n    setTranslationResult(null); // 以前の翻訳結果をクリア\n\n    console.log(`Sending text for translation: \"${textToTranslate}\"`);\n    try {\n      // サーバーサイドのエンドポイントを呼び出す\n      const response = await fetch('http://localhost:3001/translate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: textToTranslate\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Translation result:', data.translation);\n      setTranslationResult(data.translation);\n\n      // 翻訳結果をSkyWayのデータストリームで送信\n      if (localDataStreamRef.current && me) {\n        const translatedMessage = `translate_result:${data.translation}`;\n        localDataStreamRef.current.write(translatedMessage);\n        console.log(`Sent translated message via SkyWay: \"${translatedMessage}\"`);\n      }\n    } catch (error) {\n      console.error('Failed to translate text:', error);\n      // エラーメッセージをユーザーに表示するなどの処理\n      setTranslationResult('Translation failed.');\n    } finally {\n      setIsTranslating(false);\n    }\n  };\n\n  /**\r\n   * ログアウトボタンクリック時のハンドラ\r\n   */\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n  };\n\n  // SkyWay App ID と Secret Key\n  const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\n  const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\n  const token = useMemo(() => {\n    if (appId == null || secretKey == null) return undefined;\n    return new SkyWayAuthToken({\n      jti: uuidV4(),\n      iat: nowInSec(),\n      exp: nowInSec() + 60 * 60 * 24,\n      version: 3,\n      scope: {\n        appId: appId,\n        rooms: [{\n          name: \"*\",\n          methods: [\"create\", \"close\", \"updateMetadata\"],\n          member: {\n            name: \"*\",\n            methods: [\"publish\", \"subscribe\", \"updateMetadata\"]\n          }\n        }],\n        turn: {\n          enabled: true\n        }\n      }\n    }).encode(secretKey);\n  }, [appId, secretKey]);\n  useEffect(() => {\n    if (!token) return;\n    let currentContext;\n    const initContext = async () => {\n      try {\n        currentContext = await SkyWayContext.Create(token);\n        setSkywayContext(currentContext);\n        console.log(\"SkyWayContext created successfully.\");\n      } catch (error) {\n        console.error(\"Failed to create SkyWayContext:\", error);\n      }\n    };\n    initContext();\n    return () => {\n      if (currentContext) {\n        currentContext.dispose();\n        console.log(\"SkyWayContext disposed.\");\n      }\n    };\n  }, [token]);\n\n  // 🌟変更: SpeechRecognitionの結果をSkyway送信と翻訳に利用\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      console.error(\"SpeechRecognition API is not supported by this browser.\");\n      return;\n    }\n    recognition.current = new SpeechRecognition();\n    recognition.current.continuous = true;\n    recognition.current.interimResults = true;\n    recognition.current.lang = 'ja-JP';\n    recognition.current.onresult = event => {\n      let finalTranscript = '';\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\n        if (event.results[i].isFinal) {\n          finalTranscript = event.results[i][0].transcript;\n          break;\n        }\n      }\n      if (finalTranscript.trim() !== '') {\n        console.log(\"Transcription final result:\", finalTranscript);\n\n        // 翻訳処理を呼び出す\n        translateText(finalTranscript);\n\n        // 確定した結果をSkywayのデータストリームで送信\n        if (localDataStreamRef.current && me) {\n          localDataStreamRef.current.write(finalTranscript);\n          console.log(`Sent transcription: \"${finalTranscript}\"`);\n          setReceivedMessages(prevMessages => [...prevMessages, {\n            senderId: me.id,\n            message: finalTranscript,\n            isLocal: true\n          }]);\n        }\n      }\n    };\n    recognition.current.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n      setIsListening(false);\n    };\n    recognition.current.onend = () => {\n      console.log(\"Speech recognition ended.\");\n    };\n    return () => {\n      if (recognition.current) {\n        recognition.current.stop();\n      }\n    };\n  }, [me, localDataStreamRef]);\n\n  /**\r\n   * データストリームの受信を処理するヘルパー関数\r\n   * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\n  const handleDataStream = (stream, memberId) => {\n    if (stream instanceof RemoteDataStream) {\n      stream.onData.add(data => {\n        console.log(`Received data from ${memberId}:`, data);\n\n        // メッセージが翻訳結果かどうかをチェック\n        const translateResultRegex = /^translate_result:(.*)$/;\n        const translateMatch = String(data).match(translateResultRegex);\n        if (translateMatch) {\n          const translatedContent = translateMatch[1];\n          setTranslationResult(translatedContent); // 翻訳結果を状態に保存\n          console.log(`Received translated text: ${translatedContent}`);\n        } else {\n          // 通常のメッセージとして受信\n          setReceivedMessages(prevMessages => [...prevMessages, {\n            senderId: memberId,\n            message: data\n          }]);\n\n          // \"move_finish\" シグナルをチェック\n          if (data === \"move_finish\") {\n            console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\n            setIsMoveInProgress(false);\n          }\n\n          // AI提案のフォーマットをチェック\n          const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\n          const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\n          if (combinedMatch) {\n            const suggestion1Content = combinedMatch[1];\n            const suggestion2Content = combinedMatch[2];\n            setAiSuggestions([{\n              key: 'ai_assist_1',\n              text: suggestion1Content\n            }, {\n              key: 'ai_assist_2',\n              text: suggestion2Content\n            }]);\n            console.log(\"Received combined AI suggestions.\");\n          } else {\n            const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\n            const singleMatch = String(data).match(aiSingleSuggestionRegex);\n            if (singleMatch) {\n              const suggestionNumber = parseInt(singleMatch[1], 10);\n              const suggestionContent = singleMatch[2];\n              if (suggestionNumber === 1 || suggestionNumber === 2) {\n                setAiSuggestions(prevSuggestions => {\n                  const newSuggestions = [...prevSuggestions];\n                  newSuggestions[suggestionNumber - 1] = {\n                    key: `ai_assist_${suggestionNumber}`,\n                    text: suggestionContent\n                  };\n                  return newSuggestions;\n                });\n                console.log(`Received single AI suggestion ${suggestionNumber}.`);\n              }\n            }\n          }\n        }\n      });\n      console.log(`Listening for data from ${memberId}.`);\n    } else {\n      console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\n    }\n  };\n  const handleJoinRoom = async () => {\n    if (!skywayContext) {\n      console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\n      return;\n    }\n    if (!roomName) {\n      console.error(\"Room name is empty. Please enter a room name to join.\");\n      return;\n    }\n    if (skywayRoom && me) {\n      console.warn(\"Already in a room. Please leave the current room first.\");\n      return;\n    }\n    try {\n      const room = await SkyWayRoom.FindOrCreate(skywayContext, {\n        type: \"p2p\",\n        name: roomName\n      });\n      if (!room) {\n        console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\n        throw new Error(\"Failed to create or find SkyWayRoom.\");\n      }\n      setSkywayRoom(room);\n      console.log(`SkyWayRoom '${roomName}' found or created.`);\n      const localMember = await room.join();\n      if (!localMember) {\n        console.error(\"room.join() returned null or undefined localMember.\");\n        throw new Error(\"Failed to join the room.\");\n      }\n      setMe(localMember);\n      console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\n      console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\n      const {\n        audio,\n        video\n      } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\n      localStreamRef.current = video;\n      await localMember.publish(video);\n      const publication_audio = await localMember.publish(audio);\n      audioPublicationRef.current = publication_audio;\n      setIsMuted(false);\n      console.log(\"Published local camera and microphone stream.\");\n      const dataStream = await SkyWayStreamFactory.createDataStream();\n      localDataStreamRef.current = dataStream;\n      await localMember.publish(dataStream);\n      console.log(\"Published local data stream.\");\n      setIsMoveInProgress(false);\n      for (const publication of room.publications) {\n        if (localMember.id === publication.publisher.id) {\n          continue;\n        }\n        try {\n          const {\n            stream\n          } = await localMember.subscribe(publication.id);\n          console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\n          if (publication.contentType === 'video' || publication.contentType === 'audio') {\n            // ... (既存のビデオストリームの処理)\n          } else if (publication.contentType === 'data') {\n            handleDataStream(stream, publication.publisher.id);\n          } else {\n            console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\n          }\n        } catch (subscribeError) {\n          console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\n        }\n      }\n      room.onMemberJoined.add(e => {\n        console.log(`Member joined: ${e.member.id}`);\n      });\n      room.onMemberLeft.add(e => {\n        console.log(`Member left: ${e.member.id}`);\n      });\n      room.onStreamPublished.add(async e => {\n        console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\n        if (localMember.id !== e.publication.publisher.id) {\n          try {\n            const {\n              stream\n            } = await localMember.subscribe(e.publication.id);\n            if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\n              attachRemoteStream(stream, e.publication.publisher.id);\n            } else if (e.publication.contentType === 'data') {\n              handleDataStream(stream, e.publication.publisher.id);\n            }\n          } catch (subscribeError) {\n            console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\n          }\n        }\n      });\n      room.onStreamUnpublished.add(e => {\n        console.log(`Stream unpublished by ${e.publication.publisher.id}`);\n        const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\n        if (videoElement && robotDisplayRef.current) {\n          robotDisplayRef.current.removeChild(videoElement);\n          remoteVideoElements.current.delete(e.publication.publisher.id);\n          console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\n        }\n      });\n    } catch (error) {\n      console.error(\"Failed to join room:\", error);\n    }\n  };\n  const handleLeaveRoom = async () => {\n    if (skywayRoom && me) {\n      try {\n        if (localStreamRef.current) {\n          if (typeof localStreamRef.current.stop === 'function') {\n            localStreamRef.current.stop();\n            console.log(\"Stopped local media stream.\");\n          } else {\n            console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function.\");\n          }\n          localStreamRef.current = null;\n        }\n        if (skywayRoom) {\n          await skywayRoom.close();\n          console.log(`Left room '${skywayRoom.name}'.`);\n          setSkywayRoom(null);\n          setMe(null);\n          // 状態をリセット\n          setReceivedMessages([]);\n          localDataStreamRef.current = null;\n          setTranslatedText(\"\");\n          // DOMからリモートビデオ要素をすべて削除\n          if (robotDisplayRef.current) {\n            Array.from(robotDisplayRef.current.children).forEach(child => {\n              if (child.tagName === 'VIDEO') {\n                child.remove();\n              }\n            });\n          }\n          remoteVideoElements.current.clear();\n        }\n      } catch (error) {\n        console.error(\"Failed to leave room:\", error);\n      }\n    }\n  };\n\n  /**\r\n   * DataStreamでメッセージを送信するハンドラ\r\n   * @param {string} message - 送信するメッセージ\r\n   */\n  const handleSend = message => {\n    if (localDataStreamRef.current) {\n      localDataStreamRef.current.write(message);\n      console.log(`Sent message: \"${message}\"`);\n\n      // モーションが進行中であることを示す\n      if (message.startsWith('template_voice_')) {\n        setIsMoveInProgress(true);\n        console.log(\"Motion started. Disabling side panel buttons.\");\n      }\n\n      // 自分の画面にも表示\n      setReceivedMessages(prevMessages => [...prevMessages, {\n        senderId: me.id,\n        message: message,\n        isLocal: true\n      }]);\n\n      // AIモードをOFFにする\n      if (isAiModeOn) {\n        setIsAiModeOn(false);\n        setAiSuggestions([null, null]); // 提案をクリア\n      }\n    } else {\n      console.error(\"Data stream is not available.\");\n    }\n  };\n\n  // 🌟追加: AIモード切り替えハンドラ\n  const handleAiModeToggle = () => {\n    if (localDataStreamRef.current) {\n      const nextAiMode = !isAiModeOn;\n      setIsAiModeOn(nextAiMode);\n\n      // AIモード切り替えメッセージを送信\n      const aiModeMessage = nextAiMode ? \"ai_mode:on\" : \"ai_mode:off\";\n      localDataStreamRef.current.write(aiModeMessage);\n      console.log(`Sent AI mode toggle: \"${aiModeMessage}\"`);\n\n      // AIモードOFF時に提案をクリア\n      if (!nextAiMode) {\n        setAiSuggestions([null, null]);\n      }\n    }\n  };\n\n  // 🌟追加: 音声認識トグル\n  const handleToggleListening = () => {\n    if (!me) return;\n    if (isListening) {\n      recognition.current.stop();\n      console.log(\"Speech recognition stopped.\");\n      setIsListening(false);\n    } else {\n      recognition.current.start();\n      console.log(\"Speech recognition started.\");\n      setIsListening(true);\n    }\n  };\n\n  /**\r\n   * マイクのミュート/ミュート解除ハンドラ\r\n   */\n  const handleMute = async () => {\n    if (!audioPublicationRef.current) {\n      console.warn(\"Audio publication not found.\");\n      return;\n    }\n    const nextMuteState = !isMuted;\n    await audioPublicationRef.current.setEnabled(!nextMuteState);\n    setIsMuted(nextMuteState);\n    console.log(`Microphone is now ${nextMuteState ? 'muted' : 'unmuted'}.`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"home-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"P2P Room with SkyWay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1497,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          className: \"logout-btn\",\n          children: \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1498,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1496,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"translation-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"translation-label\",\n          children: \"Translated Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1503,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"translation-text\",\n          children: translationResult || '...translation will appear here...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1504,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1502,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: roomName,\n          onChange: e => setRoomName(e.target.value),\n          placeholder: \"\\u30EB\\u30FC\\u30E0\\u540D\\u3092\\u5165\\u529B\",\n          className: \"room-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1509,\n          columnNumber: 11\n        }, this), me ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"room-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u30EB\\u30FC\\u30E0\\u540D: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: skywayRoom === null || skywayRoom === void 0 ? void 0 : skywayRoom.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1518,\n              columnNumber: 24\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1518,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u3042\\u306A\\u305F\\u306EID: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: me.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1519,\n              columnNumber: 26\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1519,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLeaveRoom,\n            className: \"control-btn leave-btn\",\n            children: \"\\u30EB\\u30FC\\u30E0\\u304B\\u3089\\u9000\\u51FA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1520,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1517,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleJoinRoom,\n          className: \"control-btn join-btn\",\n          children: \"\\u30EB\\u30FC\\u30E0\\u306B\\u53C2\\u52A0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1523,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1508,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-and-chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          ref: robotDisplayRef,\n          id: \"robot-display-container\",\n          className: \"video-display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1528,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-area\",\n          children: receivedMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message-container ${msg.isLocal ? 'local-message' : 'remote-message'}`,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [msg.isLocal ? 'あなた' : `参加者 (${msg.senderId})`, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1535,\n                columnNumber: 19\n              }, this), \" \", msg.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1534,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1533,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1531,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1527,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-panel-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\u30E2\\u30FC\\u30B7\\u30E7\\u30F3\\u30EA\\u30B9\\u30C8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1543,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1542,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-panel-body\",\n          children: Object.keys(messages).map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSend(`template_voice_${messages[key].japanese}`),\n            className: \"side-btn\",\n            disabled: isAiModeOn || !me || isMoveInProgress,\n            children: messages[key].japanese\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1547,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1545,\n          columnNumber: 11\n        }, this), isAiModeOn && aiSuggestions[0] && aiSuggestions[1] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-suggestions-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSend(`ai_assist_1:${aiSuggestions[0].text}`),\n            className: \"ai-suggestion-btn\",\n            children: aiSuggestions[0].text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1560,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSend(`ai_assist_2:${aiSuggestions[1].text}`),\n            className: \"ai-suggestion-btn\",\n            children: aiSuggestions[1].text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1566,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1559,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1541,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1495,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn ai-btn ${isAiModeOn ? 'active' : ''}`,\n        onClick: () => handleAiModeToggle(),\n        disabled: !me,\n        children: isAiModeOn ? 'AIモードOFF' : 'AIモードON'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1577,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`,\n        onClick: handleToggleListening,\n        disabled: !me || !localDataStreamRef.current,\n        children: isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1584,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn mic-btn ${isMuted ? 'muted' : ''}`,\n        onClick: handleMute,\n        id: \"micBtn\",\n        disabled: !me || !audioPublicationRef.current,\n        children: isMuted ? 'マイクON' : 'マイクOFF'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1591,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1576,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1493,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"N0nS+8E2YDN7Yy4cVcGrx7Hk+N8=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","nowInSec","SkyWayAuthToken","SkyWayContext","SkyWayRoom","SkyWayStreamFactory","uuidV4","RemoteDataStream","RemoteVideoStream","RemoteAudioStream","jsxDEV","_jsxDEV","Home","setIsLoggedIn","_s","roomName","setRoomName","me","setMe","skywayContext","setSkywayContext","skywayRoom","setSkywayRoom","remoteVideoElements","Map","robotDisplayRef","localStreamRef","receivedMessages","setReceivedMessages","localDataStreamRef","isMuted","setIsMuted","audioPublicationRef","isAiModeOn","setIsAiModeOn","aiSuggestions","setAiSuggestions","isMoveInProgress","setIsMoveInProgress","translatedText","setTranslatedText","isListening","setIsListening","recognition","translationResult","setTranslationResult","isTranslating","setIsTranslating","messages","hello","japanese","english","goodbye","bow","flap","lookUp","lookDown","lookRight","lookLeft","nod","tiltHead","spin","jump","dance","bowDeep","doingSomething","thankYou","good","ookini","amazing","translateText","textToTranslate","console","log","response","fetch","method","headers","body","JSON","stringify","text","ok","Error","status","data","json","translation","current","translatedMessage","write","error","handleLogout","appId","secretKey","token","undefined","jti","iat","exp","version","scope","rooms","name","methods","member","turn","enabled","encode","currentContext","initContext","Create","dispose","SpeechRecognition","window","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","finalTranscript","i","resultIndex","results","length","isFinal","transcript","trim","prevMessages","senderId","id","message","isLocal","onerror","onend","stop","handleDataStream","stream","memberId","onData","add","translateResultRegex","translateMatch","String","match","translatedContent","aiCombinedSuggestionRegex","combinedMatch","suggestion1Content","suggestion2Content","key","aiSingleSuggestionRegex","singleMatch","suggestionNumber","parseInt","suggestionContent","prevSuggestions","newSuggestions","warn","handleJoinRoom","room","FindOrCreate","type","localMember","join","audio","video","createMicrophoneAudioAndCameraStream","publish","publication_audio","dataStream","createDataStream","publication","publications","publisher","subscribe","contentType","subscribeError","onMemberJoined","e","onMemberLeft","onStreamPublished","attachRemoteStream","onStreamUnpublished","videoElement","get","removeChild","delete","handleLeaveRoom","close","Array","from","children","forEach","child","tagName","remove","clear","handleSend","startsWith","handleAiModeToggle","nextAiMode","aiModeMessage","handleToggleListening","start","handleMute","nextMuteState","setEnabled","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","target","placeholder","ref","map","msg","index","Object","keys","disabled","_c","$RefreshReg$"],"sources":["C:/banpaku_2025/banpaku/src/home.js"],"sourcesContent":["\r\n// import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\n// import './style.css'; // style.cssを再度有効化\r\n// import {\r\n//   nowInSec,\r\n//   SkyWayAuthToken,\r\n//   SkyWayContext,\r\n//   SkyWayRoom,\r\n//   SkyWayStreamFactory,\r\n//   uuidV4,\r\n//   RemoteDataStream, // RemoteDataStreamをインポート\r\n//   RemoteVideoStream, // RemoteVideoStreamをインポート\r\n//   RemoteAudioStream, // RemoteAudioStreamをインポート\r\n// } from '@skyway-sdk/room';\r\n\r\n// /**\r\n//  * ホーム画面コンポーネント\r\n//  * @param {object} props - プロパティ\r\n//  * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n//  */\r\n// function Home({ setIsLoggedIn }) {\r\n//   // ルーム名\r\n//   const [roomName, setRoomName] = useState(\"\");\r\n//   // 自分の参加者情報 (ルームに参加すると設定されます)\r\n//   const [me, setMe] = useState(null);\r\n//   // SkyWayコンテキストのインスタンス\r\n//   const [skywayContext, setSkywayContext] = useState(null);\r\n//   // SkyWayルームのインスタンス\r\n//   const [skywayRoom, setSkywayRoom] = useState(null);\r\n//   // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\r\n//   const remoteVideoElements = useRef(new Map());\r\n//   // リモートビデオを表示するDOM要素への参照\r\n//   const robotDisplayRef = useRef(null);\r\n//   // ローカルストリームの参照を保持\r\n//   const localStreamRef = useRef(null);\r\n//   // 受信したメッセージを表示するための状態\r\n//   // src/home.js\r\n//   // eslint-disable-next-line no-unused-vars\r\n//   const [receivedMessages, setReceivedMessages] = useState([]);\r\n//   // 送信したデータストリームの参照を保持\r\n//   const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\r\n//   // マイクの状態を表示するための状態 (ミュート状態を管理)\r\n//   const [isMuted, setIsMuted] = useState(false);\r\n//   // オーディオストリームのPublicationを保持するための参照\r\n//   const audioPublicationRef = useRef(null);\r\n//   // AIモードがONかどうかを管理する状態\r\n//   const [isAiModeOn, setIsAiModeOn] = useState(false);\r\n//   // AIからの提案を保持する状態\r\n//   // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\r\n//   const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\r\n//   // モーションが進行中かどうかを管理する状態\r\n//   const [isMoveInProgress, setIsMoveInProgress] = useState(false);\r\n//   // 翻訳されたテキストを保持する状態を追加\r\n//   const [translatedText, setTranslatedText] = useState(\"\");\r\n//   // 🌟追加: 音声認識が実行中かどうかを管理する状態\r\n//   const [isListening, setIsListening] = useState(false);\r\n//   // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\r\n//   const recognition = useRef(null);\r\n\r\n\r\n//   // メッセージとモーションの多言語マッピング\r\n//   const messages = useMemo(() => ({\r\n//     hello: {\r\n//       japanese: 'リセット',\r\n//       english: 'Hello'\r\n//     },\r\n//     goodbye: {\r\n//       japanese: '決めポーズ',\r\n//       english: 'Goodbye'\r\n//     },\r\n//     bow: {\r\n//       japanese: 'バイバイ',\r\n//       english: 'Bow'\r\n//     },\r\n//     flap: {\r\n//       japanese: 'YES',\r\n//       english: 'Flap'\r\n//     },\r\n//     lookUp: {\r\n//       japanese: 'NO',\r\n//       english: 'Look up'\r\n//     },\r\n//     lookDown: {\r\n//       japanese: '右手を上げる',\r\n//       english: 'Look down'\r\n//     },\r\n//     lookRight: {\r\n//       japanese: '右手を下げる',\r\n//       english: 'Look right'\r\n//     },\r\n//     lookLeft: {\r\n//       japanese: '左手を上げる',\r\n//       english: 'Left hand up' // Changed from 'Look left' for clarity\r\n//     },\r\n//     nod: {\r\n//       japanese: '左手を下げる',\r\n//       english: 'Left hand down' // Changed from 'Nod' for clarity\r\n//     },\r\n//     tiltHead: {\r\n//       japanese: '上を向く',\r\n//       english: 'Look up' // Changed from 'Tilt head' for clarity\r\n//     },\r\n//     spin: {\r\n//       japanese: '下を向く',\r\n//       english: 'Look down' // Changed from 'Spin' for clarity\r\n//     },\r\n//     jump: {\r\n//       japanese: '右を向く',\r\n//       english: 'Look right' // Changed from 'Jump' for clarity\r\n//     },\r\n//     dance: {\r\n//       japanese: '左を向く',\r\n//       english: 'Look left' // Changed from 'Dance' for clarity\r\n//     },\r\n//     bowDeep: {\r\n//       japanese: 'パタパタ',\r\n//       english: 'Flap arms' // Changed from 'Deep bow' for clarity\r\n//     },\r\n//     doingSomething: {\r\n//       japanese: 'こんにちは',\r\n//       english: 'Hello'\r\n//     },\r\n//     thankYou: {\r\n//       japanese: 'バイバイ',\r\n//       english: 'Goodbye' // Changed from 'Thank you' for clarity\r\n//     },\r\n//     good: {\r\n//       japanese: 'ようこそ',\r\n//       english: 'Welcome' // Changed from 'Good' for clarity\r\n//     },\r\n//     ookini: {\r\n//       japanese: 'ありがとう',\r\n//       english: 'Thank you (Kansai dialect)'\r\n//     },\r\n//     amazing: {\r\n//       japanese: '楽しんでね',\r\n//       english: 'Enjoy' // Changed from 'Amazing' for clarity\r\n//     }\r\n//   }), []);\r\n\r\n\r\n//   /**\r\n//    * ログアウトボタンクリック時のハンドラ\r\n//    */\r\n//   const handleLogout = () => {\r\n//     setIsLoggedIn(false); // ログイン状態をfalseに設定\r\n//   };\r\n\r\n//   // SkyWay App ID と Secret Key\r\n//   // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\r\n//   // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\r\n//   const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\r\n//   const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\r\n\r\n//   // SkyWay認証トークンの生成\r\n//   const token = useMemo(() => {\r\n//     if (appId == null || secretKey == null) return undefined;\r\n\r\n//     return new SkyWayAuthToken({\r\n//       jti: uuidV4(), // JWT ID\r\n//       iat: nowInSec(), // 発行時刻\r\n//       exp: nowInSec() + 60 * 60 * 24, // 有効期限 (24時間)\r\n//       version: 3,\r\n//       scope: {\r\n//         appId: appId,\r\n//         rooms: [\r\n//           {\r\n//             name: \"*\", // すべてのルーム名に適用\r\n//             methods: [\"create\", \"close\", \"updateMetadata\"], // ルーム操作の権限\r\n//             member: {\r\n//               name: \"*\", // すべてのメンバーに適用\r\n//               methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\r\n//             }\r\n//           }],\r\n//         turn: {\r\n//           enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\r\n//         }\r\n//       }\r\n//     }).encode(secretKey);\r\n\r\n//   }, [appId, secretKey]);\r\n\r\n//   /**\r\n//    * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n//    * トークンが利用可能になったときに一度だけ実行されます。\r\n//    */\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n\r\n//     let currentContext;\r\n//     const initContext = async () => {\r\n//       try {\r\n//         currentContext = await SkyWayContext.Create(token);\r\n//         setSkywayContext(currentContext);\r\n//         console.log(\"SkyWayContext created successfully.\");\r\n//       } catch (error) {\r\n//         console.error(\"Failed to create SkyWayContext:\", error);\r\n//       }\r\n//     };\r\n\r\n//     initContext();\r\n\r\n//     // コンポーネントのアンマウント時にコンテキストを破棄\r\n//     return () => {\r\n//       if (currentContext) {\r\n//         currentContext.dispose();\r\n//         console.log(\"SkyWayContext disposed.\");\r\n//       }\r\n//     };\r\n//   }, [token]); // tokenが変更されたときにのみ実行\r\n\r\n//   // 🌟追加: SpeechRecognition APIの初期化\r\n//   useEffect(() => {\r\n//     // ブラウザがSpeechRecognitionに対応しているか確認\r\n//     const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n//     if (!SpeechRecognition) {\r\n//       console.error(\"SpeechRecognition API is not supported by this browser.\");\r\n//       return;\r\n//     }\r\n\r\n//     // SpeechRecognitionオブジェクトを初期化\r\n//     recognition.current = new SpeechRecognition();\r\n//     recognition.current.continuous = true; // 連続的な認識\r\n//     recognition.current.interimResults = true; // 中間結果を返す\r\n//     recognition.current.lang = 'ja-JP'; // 日本語を指定\r\n\r\n//     // 音声認識の結果を処理するハンドラ\r\n//     recognition.current.onresult = (event) => {\r\n//       let finalTranscript = '';\r\n//       for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n//         if (event.results[i].isFinal) {\r\n//           finalTranscript = event.results[i][0].transcript;\r\n//           break; // 最初の確定した結果のみを取得\r\n//         }\r\n//       }\r\n\r\n//       // 確定した結果が空でなければSkywayで送信\r\n//       if (finalTranscript.trim() !== '') {\r\n//         console.log(\"Transcription final result:\", finalTranscript);\r\n//         // Skywayのデータストリームで送信\r\n//         if (localDataStreamRef.current && me) {\r\n//           localDataStreamRef.current.write(finalTranscript);\r\n//           console.log(`Sent transcription: \"${finalTranscript}\"`);\r\n//           // 自分の画面にも表示\r\n//           setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: finalTranscript, isLocal: true }]);\r\n//         }\r\n//       }\r\n//     };\r\n\r\n//     // 認識エラー時のハンドラ\r\n//     recognition.current.onerror = (event) => {\r\n//       console.error(\"Speech recognition error:\", event.error);\r\n//       setIsListening(false); // エラー時はリスニング状態を停止\r\n//     };\r\n\r\n//     // 認識終了時のハンドラ\r\n//     recognition.current.onend = () => {\r\n//       console.log(\"Speech recognition ended.\");\r\n//       // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\r\n//       // if (isListening) {\r\n//       //   recognition.current.start();\r\n//       // }\r\n//     };\r\n\r\n//     // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\r\n//     return () => {\r\n//       if (recognition.current) {\r\n//         recognition.current.stop();\r\n//       }\r\n//     };\r\n//   }, [me, localDataStreamRef]);\r\n\r\n//   /**\r\n//    * リモートストリームをDOMに追加するヘルパー関数\r\n//    * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n//    * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n//    */\r\n//   const attachRemoteStream = (stream, memberId) => {\r\n//     if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\r\n//       // 既存のビデオ要素があれば削除\r\n//       const existingVideo = remoteVideoElements.current.get(memberId);\r\n//       if (existingVideo) {\r\n//         robotDisplayRef.current.removeChild(existingVideo);\r\n//         remoteVideoElements.current.delete(memberId);\r\n//       }\r\n\r\n//       const video = document.createElement(\"video\");\r\n//       video.autoplay = true; // 自動再生\r\n//       video.playsInline = true; // インライン再生 (iOSなどで必要)\r\n//       video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\r\n//       video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\r\n//       stream.attach(video); // ストリームをビデオ要素のソースに設定\r\n//       robotDisplayRef.current.appendChild(video);\r\n//       remoteVideoElements.current.set(memberId, video);\r\n//       console.log(`Attached stream from ${memberId} to DOM.`);\r\n//     } else {\r\n//       console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * データストリームの受信を処理するヘルパー関数\r\n//    * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n//    * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n//    */\r\n//   const handleDataStream = (stream, memberId) => {\r\n//     if (stream instanceof RemoteDataStream) {\r\n//       stream.onData.add((data) => {\r\n//         console.log(`Received data from ${memberId}:`, data);\r\n//         // 受信したメッセージを状態に追加\r\n//         setReceivedMessages(prevMessages => [...prevMessages, { senderId: memberId, message: data }]);\r\n\r\n//         // \"move_finish\" シグナルをチェック\r\n//         if (data === \"move_finish\") {\r\n//           console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\r\n//           setIsMoveInProgress(false); // モーション終了\r\n//         }\r\n\r\n//         // AI提案のフォーマットをチェック\r\n//         // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\r\n//         const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\r\n//         const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\r\n\r\n//         if (combinedMatch) {\r\n//           const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\r\n//           const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\r\n\r\n//           setAiSuggestions([\r\n//             { key: 'ai_assist_1', text: suggestion1Content }, // キーをai_assist_1に修正\r\n//             { key: 'ai_assist_2', text: suggestion2Content }  // キーをai_assist_2に修正\r\n//           ]);\r\n//           console.log(\"Received combined AI suggestions.\");\r\n//         } else {\r\n//           // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\r\n//           const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\r\n//           const singleMatch = String(data).match(aiSingleSuggestionRegex);\r\n\r\n//           if (singleMatch) {\r\n//             const suggestionNumber = parseInt(singleMatch[1], 10);\r\n//             const suggestionContent = singleMatch[2];\r\n\r\n//             if (suggestionNumber === 1 || suggestionNumber === 2) {\r\n//               setAiSuggestions(prevSuggestions => {\r\n//                 const newSuggestions = [...prevSuggestions];\r\n//                 newSuggestions[suggestionNumber - 1] = {\r\n//                   key: `ai_assist_${suggestionNumber}`, // キーをai_assist_Nに修正\r\n//                   text: suggestionContent\r\n//                 };\r\n//                 return newSuggestions;\r\n//               });\r\n//               console.log(`Received single AI suggestion ${suggestionNumber}.`);\r\n//             }\r\n//           }\r\n//         }\r\n\r\n//         // 新しい翻訳フォーマットをチェック\r\n//         const translateRegex = /^translate_request:(.*)$/;\r\n//         const translateMatch = String(data).match(translateRegex);\r\n\r\n//         if (translateMatch) {\r\n//           const translatedContent = translateMatch[1];\r\n//           setTranslatedText(translatedContent); // 状態を更新\r\n//           console.log(`Received translated text: ${translatedContent}`);\r\n//         } else {\r\n//           // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\r\n//           // setTranslatedText(\"\");\r\n//         }\r\n//       });\r\n//       console.log(`Listening for data from ${memberId}.`);\r\n//     } else {\r\n//       console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * ルームに参加するハンドラ\r\n//    * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n//    */\r\n//   const handleJoinRoom = async () => {\r\n//     if (!skywayContext) {\r\n//       console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\r\n//       return;\r\n//     }\r\n//     if (!roomName) {\r\n//       console.error(\"Room name is empty. Please enter a room name to join.\");\r\n//       return;\r\n//     }\r\n//     if (skywayRoom && me) {\r\n//       console.warn(\"Already in a room. Please leave the current room first.\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       // 指定されたルーム名でP2Pルームを作成または検索\r\n//       const room = await SkyWayRoom.FindOrCreate(skywayContext, {\r\n//         type: \"p2p\", // P2Pルームタイプ\r\n//         name: roomName,\r\n//       });\r\n\r\n//       // roomオブジェクトが有効であることを確認\r\n//       if (!room) {\r\n//         console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\r\n//         throw new Error(\"Failed to create or find SkyWayRoom.\");\r\n//       }\r\n\r\n//       setSkywayRoom(room);\r\n//       console.log(`SkyWayRoom '${roomName}' found or created.`);\r\n\r\n//       // ルームに参加し、自分のメンバー情報を取得\r\n//       const localMember = await room.join();\r\n//       // localMemberが有効であることを確認\r\n//       if (!localMember) {\r\n//         console.error(\"room.join() returned null or undefined localMember.\");\r\n//         throw new Error(\"Failed to join the room.\");\r\n//       }\r\n//       setMe(localMember);\r\n//       console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\r\n//       // ルームIDと自分のIDをコンソールに表示\r\n//       console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\r\n\r\n\r\n//       // 自分のカメラとマイクのストリームを作成し、公開\r\n//       const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\r\n//       localStreamRef.current = video; // ローカルビデオストリームを保存\r\n//       await localMember.publish(video);\r\n//       const publication_audio = await localMember.publish(audio);\r\n//       audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\r\n//       setIsMuted(false);\r\n//       console.log(\"Published local camera and microphone stream.\");\r\n\r\n//       // 自分のデータストリームを作成し、公開\r\n//       const dataStream = await SkyWayStreamFactory.createDataStream();\r\n//       localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\r\n//       await localMember.publish(dataStream);\r\n//       console.log(\"Published local data stream.\");\r\n\r\n//       // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\r\n//       setIsMoveInProgress(false);\r\n\r\n\r\n//       // --- 既存のストリームを購読するロジック ---\r\n//       // ルーム内の既存の公開ストリームをすべて購読する\r\n//       for (const publication of room.publications) {\r\n//         // 自分のストリームは購読しない\r\n//         if (localMember.id === publication.publisher.id) {\r\n//           continue;\r\n//         }\r\n//         try {\r\n//           const { stream } = await localMember.subscribe(publication.id);\r\n//           console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\r\n\r\n//           if (publication.contentType === 'video' || publication.contentType === 'audio') {\r\n//             attachRemoteStream(stream, publication.publisher.id);\r\n//           } else if (publication.contentType === 'data') {\r\n//             handleDataStream(stream, publication.publisher.id);\r\n//           } else {\r\n//             console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\r\n//           }\r\n//         } catch (subscribeError) {\r\n//           console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\r\n//         }\r\n//       }\r\n\r\n//       // --- ルームイベントリスナーの設定 ---\r\n\r\n//       // メンバーがルームに参加したときのイベント\r\n//       if (room.onMemberJoined) {\r\n//         room.onMemberJoined.add((e) => {\r\n//           console.log(`Member joined: ${e.member.id}`);\r\n//         });\r\n//       } else {\r\n//         console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\r\n//       }\r\n\r\n//       // メンバーがルームを離脱したときのイベント\r\n//       if (room.onMemberLeft) {\r\n//         room.onMemberLeft.add((e) => {\r\n//           console.log(`Member left: ${e.member.id}`);\r\n//           // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\r\n//           const videoElement = remoteVideoElements.current.get(e.member.id);\r\n//           if (videoElement && robotDisplayRef.current) {\r\n//             robotDisplayRef.current.removeChild(videoElement);\r\n//             remoteVideoElements.current.delete(e.member.id);\r\n//             console.log(`Removed video for member ${e.member.id}`);\r\n//           }\r\n//           // データストリーム関連のクリーンアップもここに追加可能ですが、\r\n//           // onDataリスナーはストリームが閉じられると自動的に停止します。\r\n//         });\r\n//       } else {\r\n//         console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\r\n//       }\r\n\r\n//       // ストリームが公開されたときのイベント\r\n//       if (room.onStreamPublished) {\r\n//         room.onStreamPublished.add(async (e) => {\r\n//           console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\r\n//           // 自分のストリームは購読しない\r\n//           if (localMember.id !== e.publication.publisher.id) {\r\n//             try {\r\n//               // リモートストリームを購読\r\n//               const { stream } = await localMember.subscribe(e.publication.id);\r\n//               console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\r\n\r\n//               if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\r\n//                 attachRemoteStream(stream, e.publication.publisher.id);\r\n//               } else if (e.publication.contentType === 'data') {\r\n//                 handleDataStream(stream, e.publication.publisher.id);\r\n//               } else {\r\n//                 console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\r\n//               }\r\n//             } catch (subscribeError) {\r\n//               console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\r\n//             }\r\n//           } else {\r\n//             console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\r\n//           }\r\n//         });\r\n//       } else {\r\n//         console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\r\n//       }\r\n\r\n//       // ストリームが非公開になったときのイベント\r\n//       if (room.onStreamUnpublished) {\r\n//         room.onStreamUnpublished.add((e) => {\r\n//           console.log(`Stream unpublished by ${e.publication.publisher.id}`);\r\n//           // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\r\n//           const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\r\n//           if (videoElement && robotDisplayRef.current) {\r\n//             robotDisplayRef.current.removeChild(videoElement);\r\n//             remoteVideoElements.current.delete(e.publication.publisher.id);\r\n//             console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\r\n//           }\r\n//         });\r\n//       } else {\r\n//         console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\r\n//       }\r\n\r\n//     } catch (error) {\r\n//       console.error(\"Failed to join room:\", error);\r\n//       // エラー発生時に状態をリセットして再試行可能にする\r\n//       setSkywayRoom(null);\r\n//       setMe(null);\r\n//       // エラー時に既存のビデオ要素をクリーンアップ\r\n//       if (robotDisplayRef.current) {\r\n//         Array.from(robotDisplayRef.current.children).forEach(child => {\r\n//           if (child.tagName === 'VIDEO') {\r\n//             // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n//             if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n//               child.srcObject.getTracks().forEach(track => track.stop());\r\n//               child.srcObject = null;\r\n//             }\r\n//             child.remove(); // DOMから要素を削除\r\n//           }\r\n//         });\r\n//       }\r\n//       remoteVideoElements.current.clear();\r\n//       if (localStreamRef.current) {\r\n//         // LocalVideoStreamのstop()メソッドを呼び出す\r\n//         if (typeof localStreamRef.current.stop === 'function') {\r\n//           localStreamRef.current.stop();\r\n//           console.log(\"Stopped local media stream during join error cleanup.\");\r\n//         } else {\r\n//           console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\r\n//         }\r\n//         localStreamRef.current = null;\r\n//       }\r\n//       // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n//       localDataStreamRef.current = null; // 参照をクリア\r\n//       console.log(\"Local data stream reference cleared during join error cleanup.\");\r\n\r\n//       // ミュート状態もリセット\r\n//       setIsMuted(false);\r\n//       audioPublicationRef.current = null;\r\n//       setIsMoveInProgress(false); // エラー時もモーション状態をリセット\r\n//       setTranslatedText(\"\"); // 翻訳テキストをクリア\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * ルームから退出するハンドラ\r\n//    */\r\n//   const handleLeaveRoom = async () => {\r\n//     if (skywayRoom && me) {\r\n//       try {\r\n//         // ローカルストリームを停止し、公開を解除\r\n//         if (localStreamRef.current) {\r\n//           // LocalVideoStreamのstop()メソッドを呼び出す\r\n//           if (typeof localStreamRef.current.stop === 'function') {\r\n//             localStreamRef.current.stop();\r\n//             console.log(\"Stopped local media stream.\");\r\n//           } else {\r\n//             console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during leave.\");\r\n//           }\r\n//           localStreamRef.current = null;\r\n//         }\r\n//         // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n//         localDataStreamRef.current = null; // 参照をクリア\r\n//         console.log(\"Local data stream reference cleared.\");\r\n\r\n//         // オーディオPublicationの参照をクリア\r\n//         audioPublicationRef.current = null;\r\n//         setIsMuted(false); // ミュート状態をリセット\r\n//         setTranslatedText(\"\"); // 翻訳テキストをクリア\r\n//         // �追加: ルーム退出時に音声認識を停止\r\n//         if (isListening) {\r\n//           recognition.current.stop();\r\n//           setIsListening(false);\r\n//         }\r\n\r\n//         await me.leave(); // ルームから退出\r\n//         console.log(`Left room '${roomName}'`);\r\n//         // ルーム退出をコンソールに表示\r\n//         console.log(`Left room: ${roomName}`);\r\n\r\n\r\n//         // room.dispose()を使用\r\n//         if (skywayRoom) {\r\n//           await skywayRoom.dispose(); // ルームを閉じる (これはルームの作成者のみが効果的です)\r\n//           console.log(\"SkyWay Room disposed.\");\r\n//         }\r\n//         // SkyWay SDKに関するすべての操作が不要になった場合にcontext.dispose()を呼び出す\r\n//         // このコンポーネントがアンマウントされる際にuseEffectのクリーンアップ関数で処理されるため、ここでは呼び出さない\r\n\r\n//       } catch (error) {\r\n//       } finally {\r\n//         // 状態をリセット\r\n//         setMe(null);\r\n//         setSkywayRoom(null);\r\n//         setReceivedMessages([]); // 受信メッセージもクリア\r\n//         // すべてのリモートビデオ要素をDOMから削除\r\n//         if (robotDisplayRef.current) {\r\n//           Array.from(robotDisplayRef.current.children).forEach(child => {\r\n//             if (child.tagName === 'VIDEO') {\r\n//               // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n//               if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n//                 child.srcObject.getTracks().forEach(track => track.stop());\r\n//                 child.srcObject = null;\r\n//               }\r\n//               child.remove(); // DOMから要素を削除\r\n//             }\r\n//           });\r\n//         }\r\n//         remoteVideoElements.current.clear();\r\n//         // AIモードもオフにする\r\n//         setIsAiModeOn(false);\r\n//         setAiSuggestions([null, null]); // 提案もクリア\r\n//         setIsMoveInProgress(false); // ルーム退出時もモーション状態をリセット\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * モーションを操作するボタンを押した時の処理\r\n//    * @param {string | object} messageOrKey - 送信するメッセージのキー (messagesオブジェクトのキー) またはAI提案オブジェクト\r\n//    */\r\n//   const handleSend = async (messageOrKey) => {\r\n//     if (me && skywayRoom && localDataStreamRef.current) {\r\n//       try {\r\n//         let messageToSend;\r\n//         let shouldSetMoveInProgress = false; // モーション進行中フラグを制御するための新しい変数\r\n\r\n//         if (typeof messageOrKey === 'string') {\r\n//           // サイドボタンからの送信の場合、直接メッセージ文字列を使用\r\n//           if (messageOrKey.startsWith(\"template_motion_\")) {\r\n//             messageToSend = messageOrKey;\r\n//             shouldSetMoveInProgress = true; // モーションコマンドの場合のみフラグを立てる\r\n//           } else if (messageOrKey.startsWith(\"template_voice_\")) {\r\n//             messageToSend = messageOrKey;\r\n//             // ボイスコマンドの場合はshouldSetMoveInProgressをtrueにしない\r\n//           } else if (messageOrKey.startsWith(\"robot_reset\")){\r\n//             messageToSend = messageOrKey;\r\n//           } else {\r\n//             // 既存のmessagesオブジェクトからのルックアップ (AI提案以外でキーが渡された場合など)\r\n//             messageToSend = messages[messageOrKey];\r\n//           }\r\n//         } else if (typeof messageOrKey === 'object' && messageOrKey.key) { // messageOrKey.text から messageOrKey.key に変更\r\n//           // AI提案ボタンからの送信\r\n//           messageToSend = messageOrKey.key; // 提案のキー（ai_assist_1など）を送信\r\n//           // AI提案の場合はshouldSetMoveInProgressをtrueにしない\r\n//         }\r\n\r\n//         if (!messageToSend) {\r\n//           console.warn(`Message to send is empty or not found.`);\r\n//           return;\r\n//         }\r\n\r\n//         localDataStreamRef.current.write(messageToSend);\r\n//         console.log(`Sent message: \"${messageToSend}\"`);\r\n//         // 送信したメッセージも自身の画面に表示\r\n//         setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: messageToSend, isLocal: true }]);\r\n//         setAiSuggestions([null, null]); // 送信したら提案をクリア\r\n\r\n//         // shouldSetMoveInProgressがtrueの場合のみモーション進行中状態にする\r\n//         if (shouldSetMoveInProgress) {\r\n//           setIsMoveInProgress(true);\r\n//         }\r\n//         // AI提案やボイスコマンドの場合は、isMoveInProgressは変更しない\r\n//         // (以前のモーションが進行中であればそのまま、そうでなければfalseのまま)\r\n\r\n//       } catch (error) {\r\n//         console.error(\"Failed to send data:\", error);\r\n//       }\r\n//     } else {\r\n//       console.warn(\"Cannot send message: Not in a room, 'me' object is not available, or data stream is not ready.\");\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * マイクのミュート/ミュート解除を切り替えるハンドラ\r\n//    */\r\n//   const handleMute = async () => {\r\n//     console.log(\"start\");\r\n//     if (!audioPublicationRef.current) {\r\n//       console.warn(\"Audio publication not available. Cannot toggle mute.\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       if (isMuted) {\r\n//         // 現在ミュート状態なら、ミュートを解除\r\n//         await audioPublicationRef.current.enable();\r\n//         console.log(\"Microphone unmuted.\");\r\n//       } else {\r\n//         // 現在ミュート状態でないなら、ミュート\r\n//         await audioPublicationRef.current.disable();\r\n//         console.log(\"Microphone muted.\");\r\n//       }\r\n//       setIsMuted(!isMuted); // ミュート状態をトグル\r\n//     } catch (error) {\r\n//       console.error(\"Failed to toggle microphone mute state:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // AIモードが変更されたときにシグナルを送信するためのフラグ\r\n//   const isInitialAiModeRender = useRef(true);\r\n\r\n//   /**\r\n//    * AIモードの状態変更を監視し、シグナルを送信するuseEffect\r\n//    */\r\n//   useEffect(() => {\r\n//     // 初回レンダリング時はシグナルを送信しない\r\n//     if (isInitialAiModeRender.current) {\r\n//       isInitialAiModeRender.current = false;\r\n//       return;\r\n//     }\r\n\r\n//     // me オブジェクトとデータストリームが利用可能であることを確認\r\n//     if (!me || !localDataStreamRef.current) {\r\n//       return;\r\n//     }\r\n\r\n//     if (isAiModeOn) {\r\n//       // AIモードがONになったら、AIに提案を要求するメッセージを送信\r\n//       localDataStreamRef.current.write(\"ai_assist_on\");\r\n//       console.log(\"Sent AI_MODE_REQUEST_SUGGESTIONS signal.\");\r\n//       setAiSuggestions([null, null]); // 新しいセッションのために提案をクリア\r\n//     } else {\r\n//       // AIモードがOFFになったら提案をクリアし、AIモード終了のシグナルを送信\r\n//       localDataStreamRef.current.write(\"ai_assist_off\");\r\n//       console.log(\"Sent AI_MODE_OFF_SIGNAL.\");\r\n//       setAiSuggestions([null, null]); // 提案をクリア\r\n//     }\r\n//   }, [isAiModeOn, me, localDataStreamRef]); // isAiModeOn, me, localDataStreamRef の変更に反応\r\n\r\n//   /**\r\n//    * AIモードを切り替えるハンドラ\r\n//    * この関数はAIモードの状態をトグルするのみで、シグナル送信はuseEffectに任せる\r\n//    */\r\n//   /* eslint-disable */\r\n//   const handleAiModeToggle = () => {\r\n//     setIsAiModeOn(prev => !prev);\r\n//   };\r\n//   /* eslint-enable */\r\n\r\n//   // 🌟追加: 音声認識の開始・停止を切り替えるハンドラ\r\n//   const handleToggleListening = () => {\r\n//     if (!recognition.current) {\r\n//       console.error(\"SpeechRecognition API is not initialized.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (isListening) {\r\n//       // 認識を停止\r\n//       recognition.current.stop();\r\n//       console.log(\"Stopped speech recognition.\");\r\n//     } else {\r\n//       // 認識を開始\r\n//       recognition.current.start();\r\n//       console.log(\"Started speech recognition.\");\r\n//     }\r\n//     setIsListening(!isListening);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app-container\">\r\n//       <div className=\"header\">\r\n//         <div className=\"header-left\">\r\n//           <button className=\"motion-btn\" disabled={isAiModeOn || isMoveInProgress}>モーション</button>\r\n//           {/* 翻訳されたテキストを表示する要素を追加 */}\r\n//           {translatedText && (\r\n//             <div className=\"translated-text\">\r\n//               <span className=\"translated-text-label\">翻訳: </span>\r\n//               <span className=\"translated-text-content\">{translatedText}</span>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <div className=\"header-right\">\r\n//           <button onClick={handleLogout} className=\"logout-btn\">ログアウト</button>\r\n//           <button className=\"voice-btn\" disabled={isAiModeOn || isMoveInProgress}>ボイス</button>\r\n//         </div>\r\n//       </div>\r\n//       <div className=\"main-container\">\r\n//         <div className=\"side-panel\">\r\n//           <div className=\"side-panel-content\">\r\n//             {Object.keys(messages).slice(0, 14).map(key => ( // 左側のボタン数を調整\r\n//               <button\r\n//                 key={key}\r\n//                 // 左側のボタンは \"template_motion_〇〇\" 形式で送信\r\n//                 onClick={() => handleSend(`template_motion_${messages[key].japanese}`)}\r\n//                 className=\"side-btn\"\r\n//                 disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\r\n//               >\r\n//                 {messages[key].japanese} {/* 常に日本語表示 */}\r\n//               </button>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"main-area\">\r\n//           <div className=\"room-controls\">\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"ルーム名を入力\"\r\n//               value={roomName}\r\n//               onChange={(e) => setRoomName(e.target.value)}\r\n//               className=\"room-input\"\r\n//               disabled={!!me} // ルーム参加中は入力不可にする\r\n//             />\r\n//             {!me ? ( // ルームに参加していない場合\r\n//               <button onClick={handleJoinRoom} className=\"join-room-btn\" disabled={!skywayContext || !roomName}>\r\n//                 ルームに参加\r\n//               </button>\r\n//             ) : ( // ルームに参加している場合\r\n//               <button onClick={handleLeaveRoom} className=\"leave-room-btn\">\r\n//                 ルームを退出\r\n//               </button>\r\n//             )}\r\n//           </div>\r\n//           <div className=\"robot-display\" ref={robotDisplayRef}>\r\n//             {/* リモートのビデオストリームがここに動的に追加されます */}\r\n//             {/* ルーム情報はコンソールに表示されるため、ここでは表示しません */}\r\n\r\n//             {/* AIからの提案表示 */}\r\n//             {(aiSuggestions[0] || aiSuggestions[1]) && (\r\n//               <div className=\"ai-suggestions\">\r\n//                 {aiSuggestions[0] && (\r\n//                   <button\r\n//                     onClick={() => handleSend(aiSuggestions[0])}\r\n//                     className=\"ai-suggestion-btn\"\r\n//                     disabled={isMoveInProgress} // モーション中は無効化\r\n//                   >\r\n//                     {aiSuggestions[0].text}\r\n//                   </button>\r\n//                 )}\r\n//                 {aiSuggestions[1] && (\r\n//                   <button\r\n//                     onClick={() => handleSend(aiSuggestions[1])}\r\n//                     className=\"ai-suggestion-btn\"\r\n//                     disabled={isMoveInProgress} // モーション中は無効化\r\n//                   >\r\n//                     {aiSuggestions[1].text}\r\n//                   </button>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"side-panel right\">\r\n//           <div className=\"side-panel-content\">\r\n//             {Object.keys(messages).slice(14).map(key => ( // 右側のボタン数を調整\r\n//               <button\r\n//                 key={key}\r\n//                 // 右側のボタンは \"template_voice_〇〇\" 形式で送信\r\n//                 onClick={() => handleSend(`template_voice_${messages[key].japanese}`)}\r\n//                 className=\"side-btn\"\r\n//                 disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\r\n//               >\r\n//                 {messages[key].japanese} {/* 常に日本語表示 */}\r\n//               </button>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       <div className=\"bottom-controls\">\r\n//         <button\r\n//           className={`control-btn ai-btn`}\r\n//           onClick={() => handleAiModeToggle()}\r\n//           disabled={!me} // ルームに参加していない場合は無効\r\n//         >\r\n//           {isAiModeOn ? 'AIモードOFF' : 'AIモードON'}\r\n//         </button>\r\n//         {/* 🌟追加: 音声認識ボタン */}\r\n//         <button\r\n//           className={`control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`}\r\n//           onClick={handleToggleListening}\r\n//           disabled={!me || !localDataStreamRef.current || isAiModeOn} // ルーム未参加、データストリーム未準備、AIモード中は無効\r\n//         >\r\n//           {isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'}\r\n//         </button>\r\n//         <button\r\n//           className={`control-btn mic-btn ${isMuted ? 'muted' : ''}`} // ミュート状態に応じてクラスを追加\r\n//           onClick={handleMute}\r\n//           id=\"micBtn\"\r\n//           disabled={!me || !audioPublicationRef.current || isAiModeOn} // ルームに参加していない、またはオーディオが公開されていない、AIモード中は無効\r\n//         >\r\n//           {isMuted ? '🔇 マイクミュート' : '🎤 マイクON'} {/* ミュート状態に応じてアイコンとテキストを変更 */}\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Home;\r\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport './style.css'; // style.cssを再度有効化\r\nimport {\r\n  nowInSec,\r\n  SkyWayAuthToken,\r\n  SkyWayContext,\r\n  SkyWayRoom,\r\n  SkyWayStreamFactory,\r\n  uuidV4,\r\n  RemoteDataStream,\r\n  RemoteVideoStream,\r\n  RemoteAudioStream,\r\n} from '@skyway-sdk/room';\r\n\r\n/**\r\n * ホーム画面コンポーネント\r\n * @param {object} props - プロパティ\r\n * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n */\r\nfunction Home({ setIsLoggedIn }) {\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [me, setMe] = useState(null);\r\n  const [skywayContext, setSkywayContext] = useState(null);\r\n  const [skywayRoom, setSkywayRoom] = useState(null);\r\n  const remoteVideoElements = useRef(new Map());\r\n  const robotDisplayRef = useRef(null);\r\n  const localStreamRef = useRef(null);\r\n  const [receivedMessages, setReceivedMessages] = useState([]);\r\n  const localDataStreamRef = useRef(null);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const audioPublicationRef = useRef(null);\r\n  const [isAiModeOn, setIsAiModeOn] = useState(false);\r\n  const [aiSuggestions, setAiSuggestions] = useState([null, null]);\r\n  const [isMoveInProgress, setIsMoveInProgress] = useState(false);\r\n  const [translatedText, setTranslatedText] = useState(\"\");\r\n  const [isListening, setIsListening] = useState(false);\r\n  const recognition = useRef(null);\r\n\r\n  // 翻訳結果を保持する状態を追加\r\n  const [translationResult, setTranslationResult] = useState(null);\r\n  // 翻訳API呼び出し中かどうかを管理する状態\r\n  const [isTranslating, setIsTranslating] = useState(false);\r\n  \r\n  // メッセージとモーションの多言語マッピング\r\n  const messages = useMemo(() => ({\r\n    hello: {\r\n      japanese: 'リセット',\r\n      english: 'Hello'\r\n    },\r\n    goodbye: {\r\n      japanese: '決めポーズ',\r\n      english: 'Goodbye'\r\n    },\r\n    bow: {\r\n      japanese: 'バイバイ',\r\n      english: 'Bow'\r\n    },\r\n    flap: {\r\n      japanese: 'YES',\r\n      english: 'Flap'\r\n    },\r\n    lookUp: {\r\n      japanese: 'NO',\r\n      english: 'Look up'\r\n    },\r\n    lookDown: {\r\n      japanese: '右手を上げる',\r\n      english: 'Look down'\r\n    },\r\n    lookRight: {\r\n      japanese: '右手を下げる',\r\n      english: 'Look right'\r\n    },\r\n    lookLeft: {\r\n      japanese: '左手を上げる',\r\n      english: 'Left hand up'\r\n    },\r\n    nod: {\r\n      japanese: '左手を下げる',\r\n      english: 'Left hand down'\r\n    },\r\n    tiltHead: {\r\n      japanese: '上を向く',\r\n      english: 'Look up'\r\n    },\r\n    spin: {\r\n      japanese: '下を向く',\r\n      english: 'Look down'\r\n    },\r\n    jump: {\r\n      japanese: '右を向く',\r\n      english: 'Look right'\r\n    },\r\n    dance: {\r\n      japanese: '左を向く',\r\n      english: 'Look left'\r\n    },\r\n    bowDeep: {\r\n      japanese: 'パタパタ',\r\n      english: 'Flap arms'\r\n    },\r\n    doingSomething: {\r\n      japanese: 'こんにちは',\r\n      english: 'Hello'\r\n    },\r\n    thankYou: {\r\n      japanese: 'バイバイ',\r\n      english: 'Goodbye'\r\n    },\r\n    good: {\r\n      japanese: 'ようこそ',\r\n      english: 'Welcome'\r\n    },\r\n    ookini: {\r\n      japanese: 'ありがとう',\r\n      english: 'Thank you (Kansai dialect)'\r\n    },\r\n    amazing: {\r\n      japanese: '楽しんでね',\r\n      english: 'Enjoy'\r\n    }\r\n  }), []);\r\n\r\n  /**\r\n   * Google Translation APIを呼び出す関数\r\n   * @param {string} textToTranslate - 翻訳するテキスト\r\n   */\r\n  const translateText = async (textToTranslate) => {\r\n    // 翻訳API呼び出し中は二重に呼び出さない\r\n    if (isTranslating) return;\r\n\r\n    setIsTranslating(true);\r\n    setTranslationResult(null); // 以前の翻訳結果をクリア\r\n\r\n    console.log(`Sending text for translation: \"${textToTranslate}\"`);\r\n\r\n    try {\r\n      // サーバーサイドのエンドポイントを呼び出す\r\n      const response = await fetch('http://localhost:3001/translate', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text: textToTranslate }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Translation result:', data.translation);\r\n      setTranslationResult(data.translation);\r\n      \r\n      // 翻訳結果をSkyWayのデータストリームで送信\r\n      if (localDataStreamRef.current && me) {\r\n        const translatedMessage = `translate_result:${data.translation}`;\r\n        localDataStreamRef.current.write(translatedMessage);\r\n        console.log(`Sent translated message via SkyWay: \"${translatedMessage}\"`);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Failed to translate text:', error);\r\n      // エラーメッセージをユーザーに表示するなどの処理\r\n      setTranslationResult('Translation failed.');\r\n    } finally {\r\n      setIsTranslating(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ログアウトボタンクリック時のハンドラ\r\n   */\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  // SkyWay App ID と Secret Key\r\n  const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\r\n  const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\r\n\r\n  const token = useMemo(() => {\r\n    if (appId == null || secretKey == null) return undefined;\r\n    return new SkyWayAuthToken({\r\n      jti: uuidV4(),\r\n      iat: nowInSec(),\r\n      exp: nowInSec() + 60 * 60 * 24,\r\n      version: 3,\r\n      scope: {\r\n        appId: appId,\r\n        rooms: [\r\n          {\r\n            name: \"*\",\r\n            methods: [\"create\", \"close\", \"updateMetadata\"],\r\n            member: {\r\n              name: \"*\",\r\n              methods: [\"publish\", \"subscribe\", \"updateMetadata\"]\r\n            }\r\n          }],\r\n        turn: {\r\n          enabled: true\r\n        }\r\n      }\r\n    }).encode(secretKey);\r\n  }, [appId, secretKey]);\r\n\r\n  useEffect(() => {\r\n    if (!token) return;\r\n    let currentContext;\r\n    const initContext = async () => {\r\n      try {\r\n        currentContext = await SkyWayContext.Create(token);\r\n        setSkywayContext(currentContext);\r\n        console.log(\"SkyWayContext created successfully.\");\r\n      } catch (error) {\r\n        console.error(\"Failed to create SkyWayContext:\", error);\r\n      }\r\n    };\r\n    initContext();\r\n    return () => {\r\n      if (currentContext) {\r\n        currentContext.dispose();\r\n        console.log(\"SkyWayContext disposed.\");\r\n      }\r\n    };\r\n  }, [token]);\r\n\r\n  // 🌟変更: SpeechRecognitionの結果をSkyway送信と翻訳に利用\r\n  useEffect(() => {\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    if (!SpeechRecognition) {\r\n      console.error(\"SpeechRecognition API is not supported by this browser.\");\r\n      return;\r\n    }\r\n\r\n    recognition.current = new SpeechRecognition();\r\n    recognition.current.continuous = true;\r\n    recognition.current.interimResults = true;\r\n    recognition.current.lang = 'ja-JP';\r\n\r\n    recognition.current.onresult = (event) => {\r\n      let finalTranscript = '';\r\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n        if (event.results[i].isFinal) {\r\n          finalTranscript = event.results[i][0].transcript;\r\n          break;\r\n        }\r\n      }\r\n      if (finalTranscript.trim() !== '') {\r\n        console.log(\"Transcription final result:\", finalTranscript);\r\n        \r\n        // 翻訳処理を呼び出す\r\n        translateText(finalTranscript);\r\n\r\n        // 確定した結果をSkywayのデータストリームで送信\r\n        if (localDataStreamRef.current && me) {\r\n          localDataStreamRef.current.write(finalTranscript);\r\n          console.log(`Sent transcription: \"${finalTranscript}\"`);\r\n          setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: finalTranscript, isLocal: true }]);\r\n        }\r\n      }\r\n    };\r\n\r\n    recognition.current.onerror = (event) => {\r\n      console.error(\"Speech recognition error:\", event.error);\r\n      setIsListening(false);\r\n    };\r\n\r\n    recognition.current.onend = () => {\r\n      console.log(\"Speech recognition ended.\");\r\n    };\r\n\r\n    return () => {\r\n      if (recognition.current) {\r\n        recognition.current.stop();\r\n      }\r\n    };\r\n  }, [me, localDataStreamRef]);\r\n\r\n  /**\r\n   * データストリームの受信を処理するヘルパー関数\r\n   * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\r\n  const handleDataStream = (stream, memberId) => {\r\n    if (stream instanceof RemoteDataStream) {\r\n      stream.onData.add((data) => {\r\n        console.log(`Received data from ${memberId}:`, data);\r\n        \r\n        // メッセージが翻訳結果かどうかをチェック\r\n        const translateResultRegex = /^translate_result:(.*)$/;\r\n        const translateMatch = String(data).match(translateResultRegex);\r\n\r\n        if (translateMatch) {\r\n          const translatedContent = translateMatch[1];\r\n          setTranslationResult(translatedContent); // 翻訳結果を状態に保存\r\n          console.log(`Received translated text: ${translatedContent}`);\r\n        } else {\r\n          // 通常のメッセージとして受信\r\n          setReceivedMessages(prevMessages => [...prevMessages, { senderId: memberId, message: data }]);\r\n          \r\n          // \"move_finish\" シグナルをチェック\r\n          if (data === \"move_finish\") {\r\n            console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\r\n            setIsMoveInProgress(false);\r\n          }\r\n\r\n          // AI提案のフォーマットをチェック\r\n          const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\r\n          const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\r\n\r\n          if (combinedMatch) {\r\n            const suggestion1Content = combinedMatch[1];\r\n            const suggestion2Content = combinedMatch[2];\r\n\r\n            setAiSuggestions([\r\n              { key: 'ai_assist_1', text: suggestion1Content },\r\n              { key: 'ai_assist_2', text: suggestion2Content }\r\n            ]);\r\n            console.log(\"Received combined AI suggestions.\");\r\n          } else {\r\n            const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\r\n            const singleMatch = String(data).match(aiSingleSuggestionRegex);\r\n\r\n            if (singleMatch) {\r\n              const suggestionNumber = parseInt(singleMatch[1], 10);\r\n              const suggestionContent = singleMatch[2];\r\n\r\n              if (suggestionNumber === 1 || suggestionNumber === 2) {\r\n                setAiSuggestions(prevSuggestions => {\r\n                  const newSuggestions = [...prevSuggestions];\r\n                  newSuggestions[suggestionNumber - 1] = {\r\n                    key: `ai_assist_${suggestionNumber}`,\r\n                    text: suggestionContent\r\n                  };\r\n                  return newSuggestions;\r\n                });\r\n                console.log(`Received single AI suggestion ${suggestionNumber}.`);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n      console.log(`Listening for data from ${memberId}.`);\r\n    } else {\r\n      console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\r\n    }\r\n  };\r\n\r\n\r\n  const handleJoinRoom = async () => {\r\n    if (!skywayContext) {\r\n      console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\r\n      return;\r\n    }\r\n    if (!roomName) {\r\n      console.error(\"Room name is empty. Please enter a room name to join.\");\r\n      return;\r\n    }\r\n    if (skywayRoom && me) {\r\n      console.warn(\"Already in a room. Please leave the current room first.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const room = await SkyWayRoom.FindOrCreate(skywayContext, {\r\n        type: \"p2p\",\r\n        name: roomName,\r\n      });\r\n\r\n      if (!room) {\r\n        console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\r\n        throw new Error(\"Failed to create or find SkyWayRoom.\");\r\n      }\r\n\r\n      setSkywayRoom(room);\r\n      console.log(`SkyWayRoom '${roomName}' found or created.`);\r\n\r\n      const localMember = await room.join();\r\n      if (!localMember) {\r\n        console.error(\"room.join() returned null or undefined localMember.\");\r\n        throw new Error(\"Failed to join the room.\");\r\n      }\r\n      setMe(localMember);\r\n      console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\r\n      console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\r\n\r\n      const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\r\n      localStreamRef.current = video;\r\n      await localMember.publish(video);\r\n      const publication_audio = await localMember.publish(audio);\r\n      audioPublicationRef.current = publication_audio;\r\n      setIsMuted(false);\r\n      console.log(\"Published local camera and microphone stream.\");\r\n\r\n      const dataStream = await SkyWayStreamFactory.createDataStream();\r\n      localDataStreamRef.current = dataStream;\r\n      await localMember.publish(dataStream);\r\n      console.log(\"Published local data stream.\");\r\n\r\n      setIsMoveInProgress(false);\r\n\r\n      for (const publication of room.publications) {\r\n        if (localMember.id === publication.publisher.id) {\r\n          continue;\r\n        }\r\n        try {\r\n          const { stream } = await localMember.subscribe(publication.id);\r\n          console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\r\n          if (publication.contentType === 'video' || publication.contentType === 'audio') {\r\n            // ... (既存のビデオストリームの処理)\r\n          } else if (publication.contentType === 'data') {\r\n            handleDataStream(stream, publication.publisher.id);\r\n          } else {\r\n            console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\r\n          }\r\n        } catch (subscribeError) {\r\n          console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\r\n        }\r\n      }\r\n\r\n      room.onMemberJoined.add((e) => {\r\n        console.log(`Member joined: ${e.member.id}`);\r\n      });\r\n      room.onMemberLeft.add((e) => {\r\n        console.log(`Member left: ${e.member.id}`);\r\n      });\r\n      room.onStreamPublished.add(async (e) => {\r\n        console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\r\n        if (localMember.id !== e.publication.publisher.id) {\r\n          try {\r\n            const { stream } = await localMember.subscribe(e.publication.id);\r\n            if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\r\n              attachRemoteStream(stream, e.publication.publisher.id);\r\n            } else if (e.publication.contentType === 'data') {\r\n              handleDataStream(stream, e.publication.publisher.id);\r\n            }\r\n          } catch (subscribeError) {\r\n            console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\r\n          }\r\n        }\r\n      });\r\n      room.onStreamUnpublished.add((e) => {\r\n        console.log(`Stream unpublished by ${e.publication.publisher.id}`);\r\n        const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\r\n        if (videoElement && robotDisplayRef.current) {\r\n          robotDisplayRef.current.removeChild(videoElement);\r\n          remoteVideoElements.current.delete(e.publication.publisher.id);\r\n          console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error(\"Failed to join room:\", error);\r\n    }\r\n  };\r\n\r\n  const handleLeaveRoom = async () => {\r\n    if (skywayRoom && me) {\r\n      try {\r\n        if (localStreamRef.current) {\r\n          if (typeof localStreamRef.current.stop === 'function') {\r\n            localStreamRef.current.stop();\r\n            console.log(\"Stopped local media stream.\");\r\n          } else {\r\n            console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function.\");\r\n          }\r\n          localStreamRef.current = null;\r\n        }\r\n\r\n        if (skywayRoom) {\r\n          await skywayRoom.close();\r\n          console.log(`Left room '${skywayRoom.name}'.`);\r\n          setSkywayRoom(null);\r\n          setMe(null);\r\n          // 状態をリセット\r\n          setReceivedMessages([]);\r\n          localDataStreamRef.current = null;\r\n          setTranslatedText(\"\");\r\n          // DOMからリモートビデオ要素をすべて削除\r\n          if (robotDisplayRef.current) {\r\n            Array.from(robotDisplayRef.current.children).forEach(child => {\r\n              if (child.tagName === 'VIDEO') {\r\n                child.remove();\r\n              }\r\n            });\r\n          }\r\n          remoteVideoElements.current.clear();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to leave room:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * DataStreamでメッセージを送信するハンドラ\r\n   * @param {string} message - 送信するメッセージ\r\n   */\r\n  const handleSend = (message) => {\r\n    if (localDataStreamRef.current) {\r\n      localDataStreamRef.current.write(message);\r\n      console.log(`Sent message: \"${message}\"`);\r\n\r\n      // モーションが進行中であることを示す\r\n      if (message.startsWith('template_voice_')) {\r\n        setIsMoveInProgress(true);\r\n        console.log(\"Motion started. Disabling side panel buttons.\");\r\n      }\r\n\r\n      // 自分の画面にも表示\r\n      setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: message, isLocal: true }]);\r\n\r\n      // AIモードをOFFにする\r\n      if (isAiModeOn) {\r\n        setIsAiModeOn(false);\r\n        setAiSuggestions([null, null]); // 提案をクリア\r\n      }\r\n    } else {\r\n      console.error(\"Data stream is not available.\");\r\n    }\r\n  };\r\n\r\n  // 🌟追加: AIモード切り替えハンドラ\r\n  const handleAiModeToggle = () => {\r\n    if (localDataStreamRef.current) {\r\n      const nextAiMode = !isAiModeOn;\r\n      setIsAiModeOn(nextAiMode);\r\n\r\n      // AIモード切り替えメッセージを送信\r\n      const aiModeMessage = nextAiMode ? \"ai_mode:on\" : \"ai_mode:off\";\r\n      localDataStreamRef.current.write(aiModeMessage);\r\n      console.log(`Sent AI mode toggle: \"${aiModeMessage}\"`);\r\n\r\n      // AIモードOFF時に提案をクリア\r\n      if (!nextAiMode) {\r\n        setAiSuggestions([null, null]);\r\n      }\r\n    }\r\n  };\r\n\r\n  // 🌟追加: 音声認識トグル\r\n  const handleToggleListening = () => {\r\n    if (!me) return;\r\n    if (isListening) {\r\n      recognition.current.stop();\r\n      console.log(\"Speech recognition stopped.\");\r\n      setIsListening(false);\r\n    } else {\r\n      recognition.current.start();\r\n      console.log(\"Speech recognition started.\");\r\n      setIsListening(true);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * マイクのミュート/ミュート解除ハンドラ\r\n   */\r\n  const handleMute = async () => {\r\n    if (!audioPublicationRef.current) {\r\n      console.warn(\"Audio publication not found.\");\r\n      return;\r\n    }\r\n    const nextMuteState = !isMuted;\r\n    await audioPublicationRef.current.setEnabled(!nextMuteState);\r\n    setIsMuted(nextMuteState);\r\n    console.log(`Microphone is now ${nextMuteState ? 'muted' : 'unmuted'}.`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      {/*... UIコンポーネント ...*/}\r\n      <div className=\"main-content\">\r\n        <header className=\"home-header\">\r\n          <h1>P2P Room with SkyWay</h1>\r\n          <button onClick={handleLogout} className=\"logout-btn\">ログアウト</button>\r\n        </header>\r\n\r\n        {/* 翻訳結果表示エリア */}\r\n        <div className=\"translation-area\">\r\n          <p className=\"translation-label\">Translated Text:</p>\r\n          <p className=\"translation-text\">{translationResult || '...translation will appear here...'}</p>\r\n        </div>\r\n\r\n        {/* ルームコントロールと情報表示 */}\r\n        <div className=\"room-controls\">\r\n          <input\r\n            type=\"text\"\r\n            value={roomName}\r\n            onChange={(e) => setRoomName(e.target.value)}\r\n            placeholder=\"ルーム名を入力\"\r\n            className=\"room-input\"\r\n          />\r\n          {me ? (\r\n            <div className=\"room-info\">\r\n              <p>ルーム名: <strong>{skywayRoom?.name}</strong></p>\r\n              <p>あなたのID: <strong>{me.id}</strong></p>\r\n              <button onClick={handleLeaveRoom} className=\"control-btn leave-btn\">ルームから退出</button>\r\n            </div>\r\n          ) : (\r\n            <button onClick={handleJoinRoom} className=\"control-btn join-btn\">ルームに参加</button>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"video-and-chat-container\">\r\n          <div ref={robotDisplayRef} id=\"robot-display-container\" className=\"video-display\">\r\n            {/* リモートビデオがここに動的に追加されます */}\r\n          </div>\r\n          <div className=\"chat-area\">\r\n            {receivedMessages.map((msg, index) => (\r\n              <div key={index} className={`message-container ${msg.isLocal ? 'local-message' : 'remote-message'}`}>\r\n                <p>\r\n                  <strong>{msg.isLocal ? 'あなた' : `参加者 (${msg.senderId})`}:</strong> {msg.message}\r\n                </p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"side-panel\">\r\n          <div className=\"side-panel-header\">\r\n            <h3>モーションリスト</h3>\r\n          </div>\r\n          <div className=\"side-panel-body\">\r\n            {Object.keys(messages).map(key => (\r\n              <button\r\n                key={key}\r\n                onClick={() => handleSend(`template_voice_${messages[key].japanese}`)}\r\n                className=\"side-btn\"\r\n                disabled={isAiModeOn || !me || isMoveInProgress}\r\n              >\r\n                {messages[key].japanese}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          {/* AI提案ボタン */}\r\n          {isAiModeOn && aiSuggestions[0] && aiSuggestions[1] && (\r\n            <div className=\"ai-suggestions-container\">\r\n              <button\r\n                onClick={() => handleSend(`ai_assist_1:${aiSuggestions[0].text}`)}\r\n                className=\"ai-suggestion-btn\"\r\n              >\r\n                {aiSuggestions[0].text}\r\n              </button>\r\n              <button\r\n                onClick={() => handleSend(`ai_assist_2:${aiSuggestions[1].text}`)}\r\n                className=\"ai-suggestion-btn\"\r\n              >\r\n                {aiSuggestions[1].text}\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-controls\">\r\n        <button\r\n          className={`control-btn ai-btn ${isAiModeOn ? 'active' : ''}`}\r\n          onClick={() => handleAiModeToggle()}\r\n          disabled={!me}\r\n        >\r\n          {isAiModeOn ? 'AIモードOFF' : 'AIモードON'}\r\n        </button>\r\n        <button\r\n          className={`control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`}\r\n          onClick={handleToggleListening}\r\n          disabled={!me || !localDataStreamRef.current}\r\n        >\r\n          {isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'}\r\n        </button>\r\n        <button\r\n          className={`control-btn mic-btn ${isMuted ? 'muted' : ''}`}\r\n          onClick={handleMute}\r\n          id=\"micBtn\"\r\n          disabled={!me || !audioPublicationRef.current}\r\n        >\r\n          {isMuted ? 'マイクON' : 'マイクOFF'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}