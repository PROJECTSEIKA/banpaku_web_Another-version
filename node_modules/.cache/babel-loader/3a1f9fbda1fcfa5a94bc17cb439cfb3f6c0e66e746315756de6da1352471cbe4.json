{"ast":null,"code":"var _jsxFileName = \"C:\\\\banpaku_2025\\\\banpaku\\\\src\\\\home.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useMemo, useRef, useState } from \"react\";\n// import './style.css'; // style.cssを再度有効化\n// import {\n//   nowInSec,\n//   SkyWayAuthToken,\n//   SkyWayContext,\n//   SkyWayRoom,\n//   SkyWayStreamFactory,\n//   uuidV4,\n//   RemoteDataStream, // RemoteDataStreamをインポート\n//   RemoteVideoStream, // RemoteVideoStreamをインポート\n//   RemoteAudioStream, // RemoteAudioStreamをインポート\n// } from '@skyway-sdk/room';\n\n// /**\n//  * ホーム画面コンポーネント\n//  * @param {object} props - プロパティ\n//  * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\n//  */\n// function Home({ setIsLoggedIn }) {\n//   // ルーム名\n//   const [roomName, setRoomName] = useState(\"\");\n//   // 自分の参加者情報 (ルームに参加すると設定されます)\n//   const [me, setMe] = useState(null);\n//   // SkyWayコンテキストのインスタンス\n//   const [skywayContext, setSkywayContext] = useState(null);\n//   // SkyWayルームのインスタンス\n//   const [skywayRoom, setSkywayRoom] = useState(null);\n//   // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\n//   const remoteVideoElements = useRef(new Map());\n//   // リモートビデオを表示するDOM要素への参照\n//   const robotDisplayRef = useRef(null);\n//   // ローカルストリームの参照を保持\n//   const localStreamRef = useRef(null);\n//   // 受信したメッセージを表示するための状態\n//   // src/home.js\n//   // eslint-disable-next-line no-unused-vars\n//   const [receivedMessages, setReceivedMessages] = useState([]);\n//   // 送信したデータストリームの参照を保持\n//   const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\n//   // マイクの状態を表示するための状態 (ミュート状態を管理)\n//   const [isMuted, setIsMuted] = useState(false);\n//   // オーディオストリームのPublicationを保持するための参照\n//   const audioPublicationRef = useRef(null);\n//   // AIモードがONかどうかを管理する状態\n//   const [isAiModeOn, setIsAiModeOn] = useState(false);\n//   // AIからの提案を保持する状態\n//   // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\n//   const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\n//   // モーションが進行中かどうかを管理する状態\n//   const [isMoveInProgress, setIsMoveInProgress] = useState(false);\n//   // 翻訳されたテキストを保持する状態を追加\n//   const [translatedText, setTranslatedText] = useState(\"\");\n//   // 🌟追加: 音声認識が実行中かどうかを管理する状態\n//   const [isListening, setIsListening] = useState(false);\n//   // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\n//   const recognition = useRef(null);\n\n//   // メッセージとモーションの多言語マッピング\n//   const messages = useMemo(() => ({\n//     hello: {\n//       japanese: 'リセット',\n//       english: 'Hello'\n//     },\n//     goodbye: {\n//       japanese: '決めポーズ',\n//       english: 'Goodbye'\n//     },\n//     bow: {\n//       japanese: 'バイバイ',\n//       english: 'Bow'\n//     },\n//     flap: {\n//       japanese: 'YES',\n//       english: 'Flap'\n//     },\n//     lookUp: {\n//       japanese: 'NO',\n//       english: 'Look up'\n//     },\n//     lookDown: {\n//       japanese: '右手を上げる',\n//       english: 'Look down'\n//     },\n//     lookRight: {\n//       japanese: '右手を下げる',\n//       english: 'Look right'\n//     },\n//     lookLeft: {\n//       japanese: '左手を上げる',\n//       english: 'Left hand up' // Changed from 'Look left' for clarity\n//     },\n//     nod: {\n//       japanese: '左手を下げる',\n//       english: 'Left hand down' // Changed from 'Nod' for clarity\n//     },\n//     tiltHead: {\n//       japanese: '上を向く',\n//       english: 'Look up' // Changed from 'Tilt head' for clarity\n//     },\n//     spin: {\n//       japanese: '下を向く',\n//       english: 'Look down' // Changed from 'Spin' for clarity\n//     },\n//     jump: {\n//       japanese: '右を向く',\n//       english: 'Look right' // Changed from 'Jump' for clarity\n//     },\n//     dance: {\n//       japanese: '左を向く',\n//       english: 'Look left' // Changed from 'Dance' for clarity\n//     },\n//     bowDeep: {\n//       japanese: 'パタパタ',\n//       english: 'Flap arms' // Changed from 'Deep bow' for clarity\n//     },\n//     doingSomething: {\n//       japanese: 'こんにちは',\n//       english: 'Hello'\n//     },\n//     thankYou: {\n//       japanese: 'バイバイ',\n//       english: 'Goodbye' // Changed from 'Thank you' for clarity\n//     },\n//     good: {\n//       japanese: 'ようこそ',\n//       english: 'Welcome' // Changed from 'Good' for clarity\n//     },\n//     ookini: {\n//       japanese: 'ありがとう',\n//       english: 'Thank you (Kansai dialect)'\n//     },\n//     amazing: {\n//       japanese: '楽しんでね',\n//       english: 'Enjoy' // Changed from 'Amazing' for clarity\n//     }\n//   }), []);\n\n//   /**\n//    * ログアウトボタンクリック時のハンドラ\n//    */\n//   const handleLogout = () => {\n//     setIsLoggedIn(false); // ログイン状態をfalseに設定\n//   };\n\n//   // SkyWay App ID と Secret Key\n//   // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\n//   // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\n//   const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\n//   const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\n\n//   // SkyWay認証トークンの生成\n//   const token = useMemo(() => {\n//     if (appId == null || secretKey == null) return undefined;\n\n//     return new SkyWayAuthToken({\n//       jti: uuidV4(), // JWT ID\n//       iat: nowInSec(), // 発行時刻\n//       exp: nowInSec() + 60 * 60 * 24, // 有効期限 (24時間)\n//       version: 3,\n//       scope: {\n//         appId: appId,\n//         rooms: [\n//           {\n//             name: \"*\", // すべてのルーム名に適用\n//             methods: [\"create\", \"close\", \"updateMetadata\"], // ルーム操作の権限\n//             member: {\n//               name: \"*\", // すべてのメンバーに適用\n//               methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\n//             }\n//           }],\n//         turn: {\n//           enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\n//         }\n//       }\n//     }).encode(secretKey);\n\n//   }, [appId, secretKey]);\n\n//   /**\n//    * SkyWayContextの初期化とクリーンアップを行うuseEffect\n//    * トークンが利用可能になったときに一度だけ実行されます。\n//    */\n//   useEffect(() => {\n//     if (!token) return;\n\n//     let currentContext;\n//     const initContext = async () => {\n//       try {\n//         currentContext = await SkyWayContext.Create(token);\n//         setSkywayContext(currentContext);\n//         console.log(\"SkyWayContext created successfully.\");\n//       } catch (error) {\n//         console.error(\"Failed to create SkyWayContext:\", error);\n//       }\n//     };\n\n//     initContext();\n\n//     // コンポーネントのアンマウント時にコンテキストを破棄\n//     return () => {\n//       if (currentContext) {\n//         currentContext.dispose();\n//         console.log(\"SkyWayContext disposed.\");\n//       }\n//     };\n//   }, [token]); // tokenが変更されたときにのみ実行\n\n//   // 🌟追加: SpeechRecognition APIの初期化\n//   useEffect(() => {\n//     // ブラウザがSpeechRecognitionに対応しているか確認\n//     const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n//     if (!SpeechRecognition) {\n//       console.error(\"SpeechRecognition API is not supported by this browser.\");\n//       return;\n//     }\n\n//     // SpeechRecognitionオブジェクトを初期化\n//     recognition.current = new SpeechRecognition();\n//     recognition.current.continuous = true; // 連続的な認識\n//     recognition.current.interimResults = true; // 中間結果を返す\n//     recognition.current.lang = 'ja-JP'; // 日本語を指定\n\n//     // 音声認識の結果を処理するハンドラ\n//     recognition.current.onresult = (event) => {\n//       let finalTranscript = '';\n//       for (let i = event.resultIndex; i < event.results.length; ++i) {\n//         if (event.results[i].isFinal) {\n//           finalTranscript = event.results[i][0].transcript;\n//           break; // 最初の確定した結果のみを取得\n//         }\n//       }\n\n//       // 確定した結果が空でなければSkywayで送信\n//       if (finalTranscript.trim() !== '') {\n//         console.log(\"Transcription final result:\", finalTranscript);\n//         // Skywayのデータストリームで送信\n//         if (localDataStreamRef.current && me) {\n//           localDataStreamRef.current.write(finalTranscript);\n//           console.log(`Sent transcription: \"${finalTranscript}\"`);\n//           // 自分の画面にも表示\n//           setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: finalTranscript, isLocal: true }]);\n//         }\n//       }\n//     };\n\n//     // 認識エラー時のハンドラ\n//     recognition.current.onerror = (event) => {\n//       console.error(\"Speech recognition error:\", event.error);\n//       setIsListening(false); // エラー時はリスニング状態を停止\n//     };\n\n//     // 認識終了時のハンドラ\n//     recognition.current.onend = () => {\n//       console.log(\"Speech recognition ended.\");\n//       // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\n//       // if (isListening) {\n//       //   recognition.current.start();\n//       // }\n//     };\n\n//     // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\n//     return () => {\n//       if (recognition.current) {\n//         recognition.current.stop();\n//       }\n//     };\n//   }, [me, localDataStreamRef]);\n\n//   /**\n//    * リモートストリームをDOMに追加するヘルパー関数\n//    * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\n//    * @param {string} memberId - ストリームのパブリッシャーのメンバーID\n//    */\n//   const attachRemoteStream = (stream, memberId) => {\n//     if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\n//       // 既存のビデオ要素があれば削除\n//       const existingVideo = remoteVideoElements.current.get(memberId);\n//       if (existingVideo) {\n//         robotDisplayRef.current.removeChild(existingVideo);\n//         remoteVideoElements.current.delete(memberId);\n//       }\n\n//       const video = document.createElement(\"video\");\n//       video.autoplay = true; // 自動再生\n//       video.playsInline = true; // インライン再生 (iOSなどで必要)\n//       video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\n//       video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\n//       stream.attach(video); // ストリームをビデオ要素のソースに設定\n//       robotDisplayRef.current.appendChild(video);\n//       remoteVideoElements.current.set(memberId, video);\n//       console.log(`Attached stream from ${memberId} to DOM.`);\n//     } else {\n//       console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\n//     }\n//   };\n\n//   /**\n//    * データストリームの受信を処理するヘルパー関数\n//    * @param {RemoteDataStream} stream - 受信するデータストリーム\n//    * @param {string} memberId - ストリームのパブリッシャーのメンバーID\n//    */\n//   const handleDataStream = (stream, memberId) => {\n//     if (stream instanceof RemoteDataStream) {\n//       stream.onData.add((data) => {\n//         console.log(`Received data from ${memberId}:`, data);\n//         // 受信したメッセージを状態に追加\n//         setReceivedMessages(prevMessages => [...prevMessages, { senderId: memberId, message: data }]);\n\n//         // \"move_finish\" シグナルをチェック\n//         if (data === \"move_finish\") {\n//           console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\n//           setIsMoveInProgress(false); // モーション終了\n//         }\n\n//         // AI提案のフォーマットをチェック\n//         // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\n//         const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\n//         const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\n\n//         if (combinedMatch) {\n//           const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\n//           const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\n\n//           setAiSuggestions([\n//             { key: 'ai_assist_1', text: suggestion1Content }, // キーをai_assist_1に修正\n//             { key: 'ai_assist_2', text: suggestion2Content }  // キーをai_assist_2に修正\n//           ]);\n//           console.log(\"Received combined AI suggestions.\");\n//         } else {\n//           // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\n//           const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\n//           const singleMatch = String(data).match(aiSingleSuggestionRegex);\n\n//           if (singleMatch) {\n//             const suggestionNumber = parseInt(singleMatch[1], 10);\n//             const suggestionContent = singleMatch[2];\n\n//             if (suggestionNumber === 1 || suggestionNumber === 2) {\n//               setAiSuggestions(prevSuggestions => {\n//                 const newSuggestions = [...prevSuggestions];\n//                 newSuggestions[suggestionNumber - 1] = {\n//                   key: `ai_assist_${suggestionNumber}`, // キーをai_assist_Nに修正\n//                   text: suggestionContent\n//                 };\n//                 return newSuggestions;\n//               });\n//               console.log(`Received single AI suggestion ${suggestionNumber}.`);\n//             }\n//           }\n//         }\n\n//         // 新しい翻訳フォーマットをチェック\n//         const translateRegex = /^translate_request:(.*)$/;\n//         const translateMatch = String(data).match(translateRegex);\n\n//         if (translateMatch) {\n//           const translatedContent = translateMatch[1];\n//           setTranslatedText(translatedContent); // 状態を更新\n//           console.log(`Received translated text: ${translatedContent}`);\n//         } else {\n//           // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\n//           // setTranslatedText(\"\");\n//         }\n//       });\n//       console.log(`Listening for data from ${memberId}.`);\n//     } else {\n//       console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\n//     }\n//   };\n\n//   /**\n//    * ルームに参加するハンドラ\n//    * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\n//    */\n//   const handleJoinRoom = async () => {\n//     if (!skywayContext) {\n//       console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\n//       return;\n//     }\n//     if (!roomName) {\n//       console.error(\"Room name is empty. Please enter a room name to join.\");\n//       return;\n//     }\n//     if (skywayRoom && me) {\n//       console.warn(\"Already in a room. Please leave the current room first.\");\n//       return;\n//     }\n\n//     try {\n//       // 指定されたルーム名でP2Pルームを作成または検索\n//       const room = await SkyWayRoom.FindOrCreate(skywayContext, {\n//         type: \"p2p\", // P2Pルームタイプ\n//         name: roomName,\n//       });\n\n//       // roomオブジェクトが有効であることを確認\n//       if (!room) {\n//         console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\n//         throw new Error(\"Failed to create or find SkyWayRoom.\");\n//       }\n\n//       setSkywayRoom(room);\n//       console.log(`SkyWayRoom '${roomName}' found or created.`);\n\n//       // ルームに参加し、自分のメンバー情報を取得\n//       const localMember = await room.join();\n//       // localMemberが有効であることを確認\n//       if (!localMember) {\n//         console.error(\"room.join() returned null or undefined localMember.\");\n//         throw new Error(\"Failed to join the room.\");\n//       }\n//       setMe(localMember);\n//       console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\n//       // ルームIDと自分のIDをコンソールに表示\n//       console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\n\n//       // 自分のカメラとマイクのストリームを作成し、公開\n//       const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\n//       localStreamRef.current = video; // ローカルビデオストリームを保存\n//       await localMember.publish(video);\n//       const publication_audio = await localMember.publish(audio);\n//       audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\n//       setIsMuted(false);\n//       console.log(\"Published local camera and microphone stream.\");\n\n//       // 自分のデータストリームを作成し、公開\n//       const dataStream = await SkyWayStreamFactory.createDataStream();\n//       localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\n//       await localMember.publish(dataStream);\n//       console.log(\"Published local data stream.\");\n\n//       // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\n//       setIsMoveInProgress(false);\n\n//       // --- 既存のストリームを購読するロジック ---\n//       // ルーム内の既存の公開ストリームをすべて購読する\n//       for (const publication of room.publications) {\n//         // 自分のストリームは購読しない\n//         if (localMember.id === publication.publisher.id) {\n//           continue;\n//         }\n//         try {\n//           const { stream } = await localMember.subscribe(publication.id);\n//           console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\n\n//           if (publication.contentType === 'video' || publication.contentType === 'audio') {\n//             attachRemoteStream(stream, publication.publisher.id);\n//           } else if (publication.contentType === 'data') {\n//             handleDataStream(stream, publication.publisher.id);\n//           } else {\n//             console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\n//           }\n//         } catch (subscribeError) {\n//           console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\n//         }\n//       }\n\n//       // --- ルームイベントリスナーの設定 ---\n\n//       // メンバーがルームに参加したときのイベント\n//       if (room.onMemberJoined) {\n//         room.onMemberJoined.add((e) => {\n//           console.log(`Member joined: ${e.member.id}`);\n//         });\n//       } else {\n//         console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\n//       }\n\n//       // メンバーがルームを離脱したときのイベント\n//       if (room.onMemberLeft) {\n//         room.onMemberLeft.add((e) => {\n//           console.log(`Member left: ${e.member.id}`);\n//           // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\n//           const videoElement = remoteVideoElements.current.get(e.member.id);\n//           if (videoElement && robotDisplayRef.current) {\n//             robotDisplayRef.current.removeChild(videoElement);\n//             remoteVideoElements.current.delete(e.member.id);\n//             console.log(`Removed video for member ${e.member.id}`);\n//           }\n//           // データストリーム関連のクリーンアップもここに追加可能ですが、\n//           // onDataリスナーはストリームが閉じられると自動的に停止します。\n//         });\n//       } else {\n//         console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\n//       }\n\n//       // ストリームが公開されたときのイベント\n//       if (room.onStreamPublished) {\n//         room.onStreamPublished.add(async (e) => {\n//           console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\n//           // 自分のストリームは購読しない\n//           if (localMember.id !== e.publication.publisher.id) {\n//             try {\n//               // リモートストリームを購読\n//               const { stream } = await localMember.subscribe(e.publication.id);\n//               console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\n\n//               if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\n//                 attachRemoteStream(stream, e.publication.publisher.id);\n//               } else if (e.publication.contentType === 'data') {\n//                 handleDataStream(stream, e.publication.publisher.id);\n//               } else {\n//                 console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\n//               }\n//             } catch (subscribeError) {\n//               console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\n//             }\n//           } else {\n//             console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\n//           }\n//         });\n//       } else {\n//         console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\n//       }\n\n//       // ストリームが非公開になったときのイベント\n//       if (room.onStreamUnpublished) {\n//         room.onStreamUnpublished.add((e) => {\n//           console.log(`Stream unpublished by ${e.publication.publisher.id}`);\n//           // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\n//           const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\n//           if (videoElement && robotDisplayRef.current) {\n//             robotDisplayRef.current.removeChild(videoElement);\n//             remoteVideoElements.current.delete(e.publication.publisher.id);\n//             console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\n//           }\n//         });\n//       } else {\n//         console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\n//       }\n\n//     } catch (error) {\n//       console.error(\"Failed to join room:\", error);\n//       // エラー発生時に状態をリセットして再試行可能にする\n//       setSkywayRoom(null);\n//       setMe(null);\n//       // エラー時に既存のビデオ要素をクリーンアップ\n//       if (robotDisplayRef.current) {\n//         Array.from(robotDisplayRef.current.children).forEach(child => {\n//           if (child.tagName === 'VIDEO') {\n//             // ビデオ要素のsrcObjectをクリアし、トラックを停止\n//             if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\n//               child.srcObject.getTracks().forEach(track => track.stop());\n//               child.srcObject = null;\n//             }\n//             child.remove(); // DOMから要素を削除\n//           }\n//         });\n//       }\n//       remoteVideoElements.current.clear();\n//       if (localStreamRef.current) {\n//         // LocalVideoStreamのstop()メソッドを呼び出す\n//         if (typeof localStreamRef.current.stop === 'function') {\n//           localStreamRef.current.stop();\n//           console.log(\"Stopped local media stream during join error cleanup.\");\n//         } else {\n//           console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\n//         }\n//         localStreamRef.current = null;\n//       }\n//       // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\n//       localDataStreamRef.current = null; // 参照をクリア\n//       console.log(\"Local data stream reference cleared during join error cleanup.\");\n\n//       // ミュート状態もリセット\n//       setIsMuted(false);\n//       audioPublicationRef.current = null;\n//       setIsMoveInProgress(false); // エラー時もモーション状態をリセット\n//       setTranslatedText(\"\"); // 翻訳テキストをクリア\n//     }\n//   };\n\n//   /**\n//    * ルームから退出するハンドラ\n//    */\n//   const handleLeaveRoom = async () => {\n//     if (skywayRoom && me) {\n//       try {\n//         // ローカルストリームを停止し、公開を解除\n//         if (localStreamRef.current) {\n//           // LocalVideoStreamのstop()メソッドを呼び出す\n//           if (typeof localStreamRef.current.stop === 'function') {\n//             localStreamRef.current.stop();\n//             console.log(\"Stopped local media stream.\");\n//           } else {\n//             console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during leave.\");\n//           }\n//           localStreamRef.current = null;\n//         }\n//         // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\n//         localDataStreamRef.current = null; // 参照をクリア\n//         console.log(\"Local data stream reference cleared.\");\n\n//         // オーディオPublicationの参照をクリア\n//         audioPublicationRef.current = null;\n//         setIsMuted(false); // ミュート状態をリセット\n//         setTranslatedText(\"\"); // 翻訳テキストをクリア\n//         // �追加: ルーム退出時に音声認識を停止\n//         if (isListening) {\n//           recognition.current.stop();\n//           setIsListening(false);\n//         }\n\n//         await me.leave(); // ルームから退出\n//         console.log(`Left room '${roomName}'`);\n//         // ルーム退出をコンソールに表示\n//         console.log(`Left room: ${roomName}`);\n\n//         // room.dispose()を使用\n//         if (skywayRoom) {\n//           await skywayRoom.dispose(); // ルームを閉じる (これはルームの作成者のみが効果的です)\n//           console.log(\"SkyWay Room disposed.\");\n//         }\n//         // SkyWay SDKに関するすべての操作が不要になった場合にcontext.dispose()を呼び出す\n//         // このコンポーネントがアンマウントされる際にuseEffectのクリーンアップ関数で処理されるため、ここでは呼び出さない\n\n//       } catch (error) {\n//       } finally {\n//         // 状態をリセット\n//         setMe(null);\n//         setSkywayRoom(null);\n//         setReceivedMessages([]); // 受信メッセージもクリア\n//         // すべてのリモートビデオ要素をDOMから削除\n//         if (robotDisplayRef.current) {\n//           Array.from(robotDisplayRef.current.children).forEach(child => {\n//             if (child.tagName === 'VIDEO') {\n//               // ビデオ要素のsrcObjectをクリアし、トラックを停止\n//               if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\n//                 child.srcObject.getTracks().forEach(track => track.stop());\n//                 child.srcObject = null;\n//               }\n//               child.remove(); // DOMから要素を削除\n//             }\n//           });\n//         }\n//         remoteVideoElements.current.clear();\n//         // AIモードもオフにする\n//         setIsAiModeOn(false);\n//         setAiSuggestions([null, null]); // 提案もクリア\n//         setIsMoveInProgress(false); // ルーム退出時もモーション状態をリセット\n//       }\n//     }\n//   };\n\n//   /**\n//    * モーションを操作するボタンを押した時の処理\n//    * @param {string | object} messageOrKey - 送信するメッセージのキー (messagesオブジェクトのキー) またはAI提案オブジェクト\n//    */\n//   const handleSend = async (messageOrKey) => {\n//     if (me && skywayRoom && localDataStreamRef.current) {\n//       try {\n//         let messageToSend;\n//         let shouldSetMoveInProgress = false; // モーション進行中フラグを制御するための新しい変数\n\n//         if (typeof messageOrKey === 'string') {\n//           // サイドボタンからの送信の場合、直接メッセージ文字列を使用\n//           if (messageOrKey.startsWith(\"template_motion_\")) {\n//             messageToSend = messageOrKey;\n//             shouldSetMoveInProgress = true; // モーションコマンドの場合のみフラグを立てる\n//           } else if (messageOrKey.startsWith(\"template_voice_\")) {\n//             messageToSend = messageOrKey;\n//             // ボイスコマンドの場合はshouldSetMoveInProgressをtrueにしない\n//           } else if (messageOrKey.startsWith(\"robot_reset\")){\n//             messageToSend = messageOrKey;\n//           } else {\n//             // 既存のmessagesオブジェクトからのルックアップ (AI提案以外でキーが渡された場合など)\n//             messageToSend = messages[messageOrKey];\n//           }\n//         } else if (typeof messageOrKey === 'object' && messageOrKey.key) { // messageOrKey.text から messageOrKey.key に変更\n//           // AI提案ボタンからの送信\n//           messageToSend = messageOrKey.key; // 提案のキー（ai_assist_1など）を送信\n//           // AI提案の場合はshouldSetMoveInProgressをtrueにしない\n//         }\n\n//         if (!messageToSend) {\n//           console.warn(`Message to send is empty or not found.`);\n//           return;\n//         }\n\n//         localDataStreamRef.current.write(messageToSend);\n//         console.log(`Sent message: \"${messageToSend}\"`);\n//         // 送信したメッセージも自身の画面に表示\n//         setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: messageToSend, isLocal: true }]);\n//         setAiSuggestions([null, null]); // 送信したら提案をクリア\n\n//         // shouldSetMoveInProgressがtrueの場合のみモーション進行中状態にする\n//         if (shouldSetMoveInProgress) {\n//           setIsMoveInProgress(true);\n//         }\n//         // AI提案やボイスコマンドの場合は、isMoveInProgressは変更しない\n//         // (以前のモーションが進行中であればそのまま、そうでなければfalseのまま)\n\n//       } catch (error) {\n//         console.error(\"Failed to send data:\", error);\n//       }\n//     } else {\n//       console.warn(\"Cannot send message: Not in a room, 'me' object is not available, or data stream is not ready.\");\n//     }\n//   };\n\n//   /**\n//    * マイクのミュート/ミュート解除を切り替えるハンドラ\n//    */\n//   const handleMute = async () => {\n//     console.log(\"start\");\n//     if (!audioPublicationRef.current) {\n//       console.warn(\"Audio publication not available. Cannot toggle mute.\");\n//       return;\n//     }\n\n//     try {\n//       if (isMuted) {\n//         // 現在ミュート状態なら、ミュートを解除\n//         await audioPublicationRef.current.enable();\n//         console.log(\"Microphone unmuted.\");\n//       } else {\n//         // 現在ミュート状態でないなら、ミュート\n//         await audioPublicationRef.current.disable();\n//         console.log(\"Microphone muted.\");\n//       }\n//       setIsMuted(!isMuted); // ミュート状態をトグル\n//     } catch (error) {\n//       console.error(\"Failed to toggle microphone mute state:\", error);\n//     }\n//   };\n\n//   // AIモードが変更されたときにシグナルを送信するためのフラグ\n//   const isInitialAiModeRender = useRef(true);\n\n//   /**\n//    * AIモードの状態変更を監視し、シグナルを送信するuseEffect\n//    */\n//   useEffect(() => {\n//     // 初回レンダリング時はシグナルを送信しない\n//     if (isInitialAiModeRender.current) {\n//       isInitialAiModeRender.current = false;\n//       return;\n//     }\n\n//     // me オブジェクトとデータストリームが利用可能であることを確認\n//     if (!me || !localDataStreamRef.current) {\n//       return;\n//     }\n\n//     if (isAiModeOn) {\n//       // AIモードがONになったら、AIに提案を要求するメッセージを送信\n//       localDataStreamRef.current.write(\"ai_assist_on\");\n//       console.log(\"Sent AI_MODE_REQUEST_SUGGESTIONS signal.\");\n//       setAiSuggestions([null, null]); // 新しいセッションのために提案をクリア\n//     } else {\n//       // AIモードがOFFになったら提案をクリアし、AIモード終了のシグナルを送信\n//       localDataStreamRef.current.write(\"ai_assist_off\");\n//       console.log(\"Sent AI_MODE_OFF_SIGNAL.\");\n//       setAiSuggestions([null, null]); // 提案をクリア\n//     }\n//   }, [isAiModeOn, me, localDataStreamRef]); // isAiModeOn, me, localDataStreamRef の変更に反応\n\n//   /**\n//    * AIモードを切り替えるハンドラ\n//    * この関数はAIモードの状態をトグルするのみで、シグナル送信はuseEffectに任せる\n//    */\n//   /* eslint-disable */\n//   const handleAiModeToggle = () => {\n//     setIsAiModeOn(prev => !prev);\n//   };\n//   /* eslint-enable */\n\n//   // 🌟追加: 音声認識の開始・停止を切り替えるハンドラ\n//   const handleToggleListening = () => {\n//     if (!recognition.current) {\n//       console.error(\"SpeechRecognition API is not initialized.\");\n//       return;\n//     }\n\n//     if (isListening) {\n//       // 認識を停止\n//       recognition.current.stop();\n//       console.log(\"Stopped speech recognition.\");\n//     } else {\n//       // 認識を開始\n//       recognition.current.start();\n//       console.log(\"Started speech recognition.\");\n//     }\n//     setIsListening(!isListening);\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"header\">\n//         <div className=\"header-left\">\n//           <button className=\"motion-btn\" disabled={isAiModeOn || isMoveInProgress}>モーション</button>\n//           {/* 翻訳されたテキストを表示する要素を追加 */}\n//           {translatedText && (\n//             <div className=\"translated-text\">\n//               <span className=\"translated-text-label\">翻訳: </span>\n//               <span className=\"translated-text-content\">{translatedText}</span>\n//             </div>\n//           )}\n//         </div>\n//         <div className=\"header-right\">\n//           <button onClick={handleLogout} className=\"logout-btn\">ログアウト</button>\n//           <button className=\"voice-btn\" disabled={isAiModeOn || isMoveInProgress}>ボイス</button>\n//         </div>\n//       </div>\n//       <div className=\"main-container\">\n//         <div className=\"side-panel\">\n//           <div className=\"side-panel-content\">\n//             {Object.keys(messages).slice(0, 14).map(key => ( // 左側のボタン数を調整\n//               <button\n//                 key={key}\n//                 // 左側のボタンは \"template_motion_〇〇\" 形式で送信\n//                 onClick={() => handleSend(`template_motion_${messages[key].japanese}`)}\n//                 className=\"side-btn\"\n//                 disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\n//               >\n//                 {messages[key].japanese} {/* 常に日本語表示 */}\n//               </button>\n//             ))}\n//           </div>\n//         </div>\n//         <div className=\"main-area\">\n//           <div className=\"room-controls\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"ルーム名を入力\"\n//               value={roomName}\n//               onChange={(e) => setRoomName(e.target.value)}\n//               className=\"room-input\"\n//               disabled={!!me} // ルーム参加中は入力不可にする\n//             />\n//             {!me ? ( // ルームに参加していない場合\n//               <button onClick={handleJoinRoom} className=\"join-room-btn\" disabled={!skywayContext || !roomName}>\n//                 ルームに参加\n//               </button>\n//             ) : ( // ルームに参加している場合\n//               <button onClick={handleLeaveRoom} className=\"leave-room-btn\">\n//                 ルームを退出\n//               </button>\n//             )}\n//           </div>\n//           <div className=\"robot-display\" ref={robotDisplayRef}>\n//             {/* リモートのビデオストリームがここに動的に追加されます */}\n//             {/* ルーム情報はコンソールに表示されるため、ここでは表示しません */}\n\n//             {/* AIからの提案表示 */}\n//             {(aiSuggestions[0] || aiSuggestions[1]) && (\n//               <div className=\"ai-suggestions\">\n//                 {aiSuggestions[0] && (\n//                   <button\n//                     onClick={() => handleSend(aiSuggestions[0])}\n//                     className=\"ai-suggestion-btn\"\n//                     disabled={isMoveInProgress} // モーション中は無効化\n//                   >\n//                     {aiSuggestions[0].text}\n//                   </button>\n//                 )}\n//                 {aiSuggestions[1] && (\n//                   <button\n//                     onClick={() => handleSend(aiSuggestions[1])}\n//                     className=\"ai-suggestion-btn\"\n//                     disabled={isMoveInProgress} // モーション中は無効化\n//                   >\n//                     {aiSuggestions[1].text}\n//                   </button>\n//                 )}\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//         <div className=\"side-panel right\">\n//           <div className=\"side-panel-content\">\n//             {Object.keys(messages).slice(14).map(key => ( // 右側のボタン数を調整\n//               <button\n//                 key={key}\n//                 // 右側のボタンは \"template_voice_〇〇\" 形式で送信\n//                 onClick={() => handleSend(`template_voice_${messages[key].japanese}`)}\n//                 className=\"side-btn\"\n//                 disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\n//               >\n//                 {messages[key].japanese} {/* 常に日本語表示 */}\n//               </button>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//       <div className=\"bottom-controls\">\n//         <button\n//           className={`control-btn ai-btn`}\n//           onClick={() => handleAiModeToggle()}\n//           disabled={!me} // ルームに参加していない場合は無効\n//         >\n//           {isAiModeOn ? 'AIモードOFF' : 'AIモードON'}\n//         </button>\n//         {/* 🌟追加: 音声認識ボタン */}\n//         <button\n//           className={`control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`}\n//           onClick={handleToggleListening}\n//           disabled={!me || !localDataStreamRef.current || isAiModeOn} // ルーム未参加、データストリーム未準備、AIモード中は無効\n//         >\n//           {isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'}\n//         </button>\n//         <button\n//           className={`control-btn mic-btn ${isMuted ? 'muted' : ''}`} // ミュート状態に応じてクラスを追加\n//           onClick={handleMute}\n//           id=\"micBtn\"\n//           disabled={!me || !audioPublicationRef.current || isAiModeOn} // ルームに参加していない、またはオーディオが公開されていない、AIモード中は無効\n//         >\n//           {isMuted ? '🔇 マイクミュート' : '🎤 マイクON'} {/* ミュート状態に応じてアイコンとテキストを変更 */}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Home;\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\n// import './style.css'; // style.cssを再度有効化\nimport { nowInSec, SkyWayAuthToken, SkyWayContext, SkyWayRoom, SkyWayStreamFactory, uuidV4, RemoteDataStream,\n// RemoteDataStreamをインポート\nRemoteVideoStream,\n// RemoteVideoStreamをインポート\nRemoteAudioStream // RemoteAudioStreamをインポート\n} from '@skyway-sdk/room';\n\n/**\r\n * ホーム画面コンポーネント\r\n * @param {object} props - プロパティ\r\n * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home({\n  setIsLoggedIn\n}) {\n  _s();\n  // ルーム名\n  const [roomName, setRoomName] = useState(\"\");\n  // 自分の参加者情報 (ルームに参加すると設定されます)\n  const [me, setMe] = useState(null);\n  // SkyWayコンテキストのインスタンス\n  const [skywayContext, setSkywayContext] = useState(null);\n  // SkyWayルームのインスタンス\n  const [skywayRoom, setSkywayRoom] = useState(null);\n  // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\n  const remoteVideoElements = useRef(new Map());\n  // リモートビデオを表示するDOM要素への参照\n  const robotDisplayRef = useRef(null);\n  // ローカルストリームの参照を保持\n  const localStreamRef = useRef(null);\n  // 受信したメッセージを表示するための状態\n  // src/home.js\n  // eslint-disable-next-line no-unused-vars\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  // 送信したデータストリームの参照を保持\n  const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\n  // マイクの状態を表示するための状態 (ミュート状態を管理)\n  const [isMuted, setIsMuted] = useState(false);\n  // オーディオストリームのPublicationを保持するための参照\n  const audioPublicationRef = useRef(null);\n  // AIモードがONかどうかを管理する状態\n  const [isAiModeOn, setIsAiModeOn] = useState(false);\n  // AIからの提案を保持する状態\n  // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\n  const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\n  // モーションが進行中かどうかを管理する状態\n  const [isMoveInProgress, setIsMoveInProgress] = useState(false);\n  // 翻訳されたテキストを保持する状態を追加\n  const [translatedText, setTranslatedText] = useState(\"\");\n  // 🌟追加: 音声認識が実行中かどうかを管理する状態\n  const [isListening, setIsListening] = useState(false);\n  // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\n  const recognition = useRef(null);\n\n  // --- 新規追加: Google Translation APIを呼び出す関数 ---\n  /**\r\n   * テキストを翻訳する関数\r\n   * @param {string} textToTranslate - 翻訳するテキスト\r\n   * @returns {Promise<string>} - 翻訳されたテキスト\r\n   */\n  const translateText = async textToTranslate => {\n    try {\n      // ローカルのバックエンドサーバーを呼び出す\n      const response = await fetch('http://localhost:3001/translate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: textToTranslate\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        return data.translatedText;\n      } else {\n        console.error('Translation API error:', data.error);\n        return null;\n      }\n    } catch (error) {\n      console.error('Failed to call translation API:', error);\n      return null;\n    }\n  };\n\n  // メッセージとモーションの多言語マッピング\n  const messages = useMemo(() => ({\n    hello: {\n      japanese: 'リセット',\n      english: 'Hello'\n    },\n    goodbye: {\n      japanese: '決めポーズ',\n      english: 'Goodbye'\n    },\n    bow: {\n      japanese: 'バイバイ',\n      english: 'Bow'\n    },\n    flap: {\n      japanese: 'YES',\n      english: 'Flap'\n    },\n    lookUp: {\n      japanese: 'NO',\n      english: 'Look up'\n    },\n    lookDown: {\n      japanese: '右手を上げる',\n      english: 'Look down'\n    },\n    lookRight: {\n      japanese: '右手を下げる',\n      english: 'Look right'\n    },\n    lookLeft: {\n      japanese: '左手を上げる',\n      english: 'Left hand up' // Changed from 'Look left' for clarity\n    },\n    nod: {\n      japanese: '左手を下げる',\n      english: 'Left hand down' // Changed from 'Nod' for clarity\n    },\n    tiltHead: {\n      japanese: '上を向く',\n      english: 'Look up' // Changed from 'Tilt head' for clarity\n    },\n    spin: {\n      japanese: '下を向く',\n      english: 'Look down' // Changed from 'Spin' for clarity\n    },\n    jump: {\n      japanese: '右を向く',\n      english: 'Look right' // Changed from 'Jump' for clarity\n    },\n    dance: {\n      japanese: '左を向く',\n      english: 'Look left' // Changed from 'Dance' for clarity\n    },\n    bowDeep: {\n      japanese: 'パタパタ',\n      english: 'Flap arms' // Changed from 'Deep bow' for clarity\n    },\n    doingSomething: {\n      japanese: 'こんにちは',\n      english: 'Hello'\n    },\n    thankYou: {\n      japanese: 'バイバイ',\n      english: 'Goodbye' // Changed from 'Thank you' for clarity\n    },\n    good: {\n      japanese: 'ようこそ',\n      english: 'Welcome' // Changed from 'Good' for clarity\n    },\n    ookini: {\n      japanese: 'ありがとう',\n      english: 'Thank you (Kansai dialect)'\n    },\n    amazing: {\n      japanese: '楽しんでね',\n      english: 'Enjoy' // Changed from 'Amazing' for clarity\n    }\n  }), []);\n\n  /**\r\n   * ログアウトボタンクリック時のハンドラ\r\n   */\n  const handleLogout = () => {\n    setIsLoggedIn(false); // ログイン状態をfalseに設定\n  };\n\n  // SkyWay App ID と Secret Key\n  // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\n  // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\n  const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\n  const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\n\n  // SkyWay認証トークンの生成\n  const token = useMemo(() => {\n    if (appId == null || secretKey == null) return undefined;\n    return new SkyWayAuthToken({\n      jti: uuidV4(),\n      // JWT ID\n      iat: nowInSec(),\n      // 発行時刻\n      exp: nowInSec() + 60 * 60 * 24,\n      // 有効期限 (24時間)\n      version: 3,\n      scope: {\n        appId: appId,\n        rooms: [{\n          name: \"*\",\n          // すべてのルーム名に適用\n          methods: [\"create\", \"close\", \"updateMetadata\"],\n          // ルーム操作の権限\n          member: {\n            name: \"*\",\n            // すべてのメンバーに適用\n            methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\n          }\n        }],\n        turn: {\n          enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\n        }\n      }\n    }).encode(secretKey);\n  }, [appId, secretKey]);\n\n  /**\r\n   * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n   * トークンが利用可能になったときに一度だけ実行されます。\r\n   */\n  useEffect(() => {\n    if (!token) return;\n    let currentContext;\n    const initContext = async () => {\n      try {\n        currentContext = await SkyWayContext.Create(token);\n        setSkywayContext(currentContext);\n        console.log(\"SkyWayContext created successfully.\");\n      } catch (error) {\n        console.error(\"Failed to create SkyWayContext:\", error);\n      }\n    };\n    initContext();\n\n    // コンポーネントのアンマウント時にコンテキストを破棄\n    return () => {\n      if (currentContext) {\n        currentContext.dispose();\n        console.log(\"SkyWayContext disposed.\");\n      }\n    };\n  }, [token]); // tokenが変更されたときにのみ実行\n\n  // 🌟追加: SpeechRecognition APIの初期化\n  useEffect(() => {\n    // ブラウザがSpeechRecognitionに対応しているか確認\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      console.error(\"SpeechRecognition API is not supported by this browser.\");\n      return;\n    }\n\n    // SpeechRecognitionオブジェクトを初期化\n    recognition.current = new SpeechRecognition();\n    recognition.current.continuous = true; // 連続的な認識\n    recognition.current.interimResults = true; // 中間結果を返す\n    recognition.current.lang = 'ja-JP'; // 日本語を指定\n\n    // 音声認識の結果を処理するハンドラ\n    recognition.current.onresult = async event => {\n      // asyncを追加\n      let finalTranscript = '';\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\n        if (event.results[i].isFinal) {\n          finalTranscript = event.results[i][0].transcript;\n          break; // 最初の確定した結果のみを取得\n        }\n      }\n\n      // 確定した結果が空でなければSkywayで送信\n      if (finalTranscript.trim() !== '') {\n        console.log(\"Transcription final result:\", finalTranscript);\n        // Skywayのデータストリームで送信\n        if (localDataStreamRef.current && me) {\n          localDataStreamRef.current.write(finalTranscript);\n          console.log(`Sent transcription: \"${finalTranscript}\"`);\n          // 自分の画面にも表示\n          setReceivedMessages(prevMessages => [...prevMessages, {\n            senderId: me.id,\n            message: finalTranscript,\n            isLocal: true\n          }]);\n\n          // 🌟翻訳処理を追加\n          const translated = await translateText(finalTranscript);\n          if (translated) {\n            console.log(\"Translated text:\", translated);\n            // 翻訳結果をSkywayで送信\n            localDataStreamRef.current.write(`translate_request:${translated}`);\n          }\n        }\n      }\n    };\n\n    // 認識エラー時のハンドラ\n    recognition.current.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n      setIsListening(false); // エラー時はリスニング状態を停止\n    };\n\n    // 認識終了時のハンドラ\n    recognition.current.onend = () => {\n      console.log(\"Speech recognition ended.\");\n      // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\n      // if (isListening) {\n      //   recognition.current.start();\n      // }\n    };\n\n    // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\n    return () => {\n      if (recognition.current) {\n        recognition.current.stop();\n      }\n    };\n  }, [me, localDataStreamRef]);\n\n  /**\r\n   * リモートストリームをDOMに追加するヘルパー関数\r\n   * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\n  const attachRemoteStream = (stream, memberId) => {\n    if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\n      // 既存のビデオ要素があれば削除\n      const existingVideo = remoteVideoElements.current.get(memberId);\n      if (existingVideo) {\n        robotDisplayRef.current.removeChild(existingVideo);\n        remoteVideoElements.current.delete(memberId);\n      }\n      const video = document.createElement(\"video\");\n      video.autoplay = true; // 自動再生\n      video.playsInline = true; // インライン再生 (iOSなどで必要)\n      video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\n      video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\n      stream.attach(video); // ストリームをビデオ要素のソースに設定\n      robotDisplayRef.current.appendChild(video);\n      remoteVideoElements.current.set(memberId, video);\n      console.log(`Attached stream from ${memberId} to DOM.`);\n    } else {\n      console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\n    }\n  };\n\n  /**\r\n   * データストリームの受信を処理するヘルパー関数\r\n   * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\n  const handleDataStream = (stream, memberId) => {\n    if (stream instanceof RemoteDataStream) {\n      stream.onData.add(data => {\n        console.log(`Received data from ${memberId}:`, data);\n        // 受信したメッセージを状態に追加\n        setReceivedMessages(prevMessages => [...prevMessages, {\n          senderId: memberId,\n          message: data\n        }]);\n\n        // \"move_finish\" シグナルをチェック\n        if (data === \"move_finish\") {\n          console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\n          setIsMoveInProgress(false); // モーション終了\n        }\n\n        // AI提案のフォーマットをチェック\n        // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\n        const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\n        const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\n        if (combinedMatch) {\n          const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\n          const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\n\n          setAiSuggestions([{\n            key: 'ai_assist_1',\n            text: suggestion1Content\n          },\n          // キーをai_assist_1に修正\n          {\n            key: 'ai_assist_2',\n            text: suggestion2Content\n          } // キーをai_assist_2に修正\n          ]);\n          console.log(\"Received combined AI suggestions.\");\n        } else {\n          // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\n          const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\n          const singleMatch = String(data).match(aiSingleSuggestionRegex);\n          if (singleMatch) {\n            const suggestionNumber = parseInt(singleMatch[1], 10);\n            const suggestionContent = singleMatch[2];\n            if (suggestionNumber === 1 || suggestionNumber === 2) {\n              setAiSuggestions(prevSuggestions => {\n                const newSuggestions = [...prevSuggestions];\n                newSuggestions[suggestionNumber - 1] = {\n                  key: `ai_assist_${suggestionNumber}`,\n                  // キーをai_assist_Nに修正\n                  text: suggestionContent\n                };\n                return newSuggestions;\n              });\n              console.log(`Received single AI suggestion ${suggestionNumber}.`);\n            }\n          }\n        }\n\n        // 新しい翻訳フォーマットをチェック\n        const translateRegex = /^translate_request:(.*)$/;\n        const translateMatch = String(data).match(translateRegex);\n        if (translateMatch) {\n          const translatedContent = translateMatch[1];\n          setTranslatedText(translatedContent); // 状態を更新\n          console.log(`Received translated text: ${translatedContent}`);\n        } else {\n          // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\n          // setTranslatedText(\"\");\n        }\n      });\n      console.log(`Listening for data from ${memberId}.`);\n    } else {\n      console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\n    }\n  };\n\n  /**\r\n   * ルームに参加するハンドラ\r\n   * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n   */\n  const handleJoinRoom = async () => {\n    if (!skywayContext) {\n      console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\n      return;\n    }\n    if (!roomName) {\n      console.error(\"Room name is empty. Please enter a room name to join.\");\n      return;\n    }\n    if (skywayRoom && me) {\n      console.warn(\"Already in a room. Please leave the current room first.\");\n      return;\n    }\n    try {\n      // 指定されたルーム名でP2Pルームを作成または検索\n      const room = await SkyWayRoom.FindOrCreate(skywayContext, {\n        type: \"p2p\",\n        // P2Pルームタイプ\n        name: roomName\n      });\n\n      // roomオブジェクトが有効であることを確認\n      if (!room) {\n        console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\n        throw new Error(\"Failed to create or find SkyWayRoom.\");\n      }\n      setSkywayRoom(room);\n      console.log(`SkyWayRoom '${roomName}' found or created.`);\n\n      // ルームに参加し、自分のメンバー情報を取得\n      const localMember = await room.join();\n      // localMemberが有効であることを確認\n      if (!localMember) {\n        console.error(\"room.join() returned null or undefined localMember.\");\n        throw new Error(\"Failed to join the room.\");\n      }\n      setMe(localMember);\n      console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\n      // ルームIDと自分のIDをコンソールに表示\n      console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\n\n      // 自分のカメラとマイクのストリームを作成し、公開\n      const {\n        audio,\n        video\n      } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\n      localStreamRef.current = video; // ローカルビデオストリームを保存\n      await localMember.publish(video);\n      const publication_audio = await localMember.publish(audio);\n      audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\n      setIsMuted(false);\n      console.log(\"Published local camera and microphone stream.\");\n\n      // 自分のデータストリームを作成し、公開\n      const dataStream = await SkyWayStreamFactory.createDataStream();\n      localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\n      await localMember.publish(dataStream);\n      console.log(\"Published local data stream.\");\n\n      // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\n      setIsMoveInProgress(false);\n\n      // --- 既存のストリームを購読するロジック ---\n      // ルーム内の既存の公開ストリームをすべて購読する\n      for (const publication of room.publications) {\n        // 自分のストリームは購読しない\n        if (localMember.id === publication.publisher.id) {\n          continue;\n        }\n        try {\n          const {\n            stream\n          } = await localMember.subscribe(publication.id);\n          console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\n          if (publication.contentType === 'video' || publication.contentType === 'audio') {\n            attachRemoteStream(stream, publication.publisher.id);\n          } else if (publication.contentType === 'data') {\n            handleDataStream(stream, publication.publisher.id);\n          } else {\n            console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\n          }\n        } catch (subscribeError) {\n          console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\n        }\n      }\n\n      // --- ルームイベントリスナーの設定 ---\n\n      // メンバーがルームに参加したときのイベント\n      if (room.onMemberJoined) {\n        room.onMemberJoined.add(e => {\n          console.log(`Member joined: ${e.member.id}`);\n        });\n      } else {\n        console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\n      }\n\n      // メンバーがルームを離脱したときのイベント\n      if (room.onMemberLeft) {\n        room.onMemberLeft.add(e => {\n          console.log(`Member left: ${e.member.id}`);\n          // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\n          const videoElement = remoteVideoElements.current.get(e.member.id);\n          if (videoElement && robotDisplayRef.current) {\n            robotDisplayRef.current.removeChild(videoElement);\n            remoteVideoElements.current.delete(e.member.id);\n            console.log(`Removed video for member ${e.member.id}`);\n          }\n          // データストリーム関連のクリーンアップもここに追加可能ですが、\n          // onDataリスナーはストリームが閉じられると自動的に停止します。\n        });\n      } else {\n        console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\n      }\n\n      // ストリームが公開されたときのイベント\n      if (room.onStreamPublished) {\n        room.onStreamPublished.add(async e => {\n          console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\n          // 自分のストリームは購読しない\n          if (localMember.id !== e.publication.publisher.id) {\n            try {\n              // リモートストリームを購読\n              const {\n                stream\n              } = await localMember.subscribe(e.publication.id);\n              console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\n              if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\n                attachRemoteStream(stream, e.publication.publisher.id);\n              } else if (e.publication.contentType === 'data') {\n                handleDataStream(stream, e.publication.publisher.id);\n              } else {\n                console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\n              }\n            } catch (subscribeError) {\n              console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\n            }\n          } else {\n            console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\n          }\n        });\n      } else {\n        console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\n      }\n\n      // ストリームが非公開になったときのイベント\n      if (room.onStreamUnpublished) {\n        room.onStreamUnpublished.add(e => {\n          console.log(`Stream unpublished by ${e.publication.publisher.id}`);\n          // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\n          const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\n          if (videoElement && robotDisplayRef.current) {\n            robotDisplayRef.current.removeChild(videoElement);\n            remoteVideoElements.current.delete(e.publication.publisher.id);\n            console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\n          }\n        });\n      } else {\n        console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\n      }\n    } catch (error) {\n      console.error(\"Failed to join room:\", error);\n      // エラー発生時に状態をリセットして再試行可能にする\n      setSkywayRoom(null);\n      setMe(null);\n      // エラー時に既存のビデオ要素をクリーンアップ\n      if (robotDisplayRef.current) {\n        Array.from(robotDisplayRef.current.children).forEach(child => {\n          if (child.tagName === 'VIDEO') {\n            // ビデオ要素のsrcObjectをクリアし、トラックを停止\n            if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\n              child.srcObject.getTracks().forEach(track => track.stop());\n              child.srcObject = null;\n            }\n            child.remove(); // DOMから要素を削除\n          }\n        });\n      }\n      remoteVideoElements.current.clear();\n      if (localStreamRef.current) {\n        // LocalVideoStreamのstop()メソッドを呼び出す\n        if (typeof localStreamRef.current.stop === 'function') {\n          localStreamRef.current.stop();\n          console.log(\"Stopped local media stream during join error cleanup.\");\n        } else {\n          console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\n        }\n        localStreamRef.current = null;\n      }\n      // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\n      localDataStreamRef.current = null; // 参照をクリア\n      console.log(\"Local data stream reference cleared during join error cleanup.\");\n      // ミュート状態もリセット\n      setIsMuted(false);\n      audioPublicationRef.current = null;\n      setIsMoveInProgress(false); // エラー時もモーション状態をリセット\n      setTranslatedText(\"\"); // 翻訳テキストをクリア\n    }\n  };\n  /**\r\n   * ルームから退出するハンドラ\r\n   */\n  const handleLeaveRoom = async () => {\n    if (skywayRoom && me) {\n      try {\n        // ローカルストリームを停止し、公開を解除\n        if (localStreamRef.current) {\n          // LocalVideoStreamのstop()メソッドを呼び出す\n          if (typeof localStreamRef.current.stop === 'function') {\n            localStreamRef.current.stop();\n            console.log(\"Stopped local media stream.\");\n          } else {\n            console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during leave.\");\n          }\n          localStreamRef.current = null;\n        }\n        // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\n        localDataStreamRef.current = null; // 参照をクリア\n        console.log(\"Local data stream reference cleared.\");\n\n        // --- 修正箇所: `skywayRoom.close()`の前にルームの破棄処理を追加 ---\n        // メンバーがルームを離脱\n        await skywayRoom.leave();\n        console.log(`Left room '${roomName}'.`);\n\n        // SkywayRoomインスタンスを破棄\n        await skywayRoom.close();\n        console.log(`Closed SkyWayRoom '${roomName}'.`);\n\n        // 状態をリセット\n        setSkywayRoom(null);\n        setMe(null);\n        setReceivedMessages([]);\n        setAiSuggestions([null, null]);\n        setIsMoveInProgress(false);\n        setTranslatedText(\"\");\n\n        // リモートビデオ要素を全て削除\n        if (robotDisplayRef.current) {\n          Array.from(robotDisplayRef.current.children).forEach(child => {\n            if (child.tagName === 'VIDEO') {\n              // ビデオ要素のsrcObjectをクリアし、トラックを停止\n              if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\n                child.srcObject.getTracks().forEach(track => track.stop());\n                child.srcObject = null;\n              }\n              child.remove(); // DOMから要素を削除\n            }\n          });\n        }\n        remoteVideoElements.current.clear();\n      } catch (error) {\n        console.error(\"Failed to leave room:\", error);\n      }\n    } else {\n      console.warn(\"Not in a room. Cannot leave.\");\n    }\n  };\n\n  /**\r\n   * ミュート/アンミュートを切り替えるハンドラ\r\n   */\n  const handleMute = async () => {\n    if (audioPublicationRef.current) {\n      if (isMuted) {\n        // アンミュート\n        await audioPublicationRef.current.unpublish();\n        console.log(\"Unmuted microphone.\");\n      } else {\n        // ミュート\n        await audioPublicationRef.current.unpublish();\n        console.log(\"Muted microphone.\");\n      }\n      setIsMuted(!isMuted); // 状態を更新\n    }\n  };\n\n  /**\r\n   * AIモードを切り替えるハンドラ\r\n   */\n  const handleAiModeToggle = () => {\n    setIsAiModeOn(!isAiModeOn);\n    console.log(`AI mode is now ${!isAiModeOn ? 'ON' : 'OFF'}`);\n  };\n\n  /**\r\n   * サイドパネルのボタンをクリックしたときのハンドラ\r\n   * @param {string} dataToSend - 送信する文字列（モーションコマンドなど）\r\n   */\n  const handleSend = dataToSend => {\n    if (localDataStreamRef.current && me) {\n      if (isMoveInProgress) {\n        console.log(\"Motion is already in progress. Please wait.\");\n        return; // モーション中は送信を許可しない\n      }\n\n      // データストリームで送信\n      localDataStreamRef.current.write(dataToSend);\n      console.log(`Sent data: \"${dataToSend}\"`);\n\n      // 自分の画面にも表示\n      setReceivedMessages(prevMessages => [...prevMessages, {\n        senderId: me.id,\n        message: dataToSend,\n        isLocal: true\n      }]);\n\n      // モーションコマンドの場合、進行中フラグを立てる\n      // ai_assist:はモーションではないので、isMoveInProgressはtrueにしない\n      if (!dataToSend.startsWith(\"ai_assist_\")) {\n        setIsMoveInProgress(true);\n      } else {\n        // AI提案の送信後はAI提案をクリア\n        setAiSuggestions([null, null]);\n      }\n    } else {\n      console.error(\"Data stream is not available or not joined a room.\");\n    }\n  };\n\n  // 🌟追加: 音声認識の開始/停止を切り替えるハンドラ\n  const handleToggleListening = () => {\n    if (isListening) {\n      recognition.current.stop();\n      setIsListening(false);\n      console.log(\"Speech recognition stopped.\");\n    } else {\n      recognition.current.start();\n      setIsListening(true);\n      console.log(\"Speech recognition started.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container p-6 flex flex-col h-screen bg-gray-100 font-inter\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"flex justify-between items-center mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold text-gray-800\",\n        children: \"SkyWay WebRTC App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1667,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        className: \"bg-red-500 text-white py-2 px-4 rounded-md shadow-md hover:bg-red-600 transition-colors\",\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1668,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1666,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex flex-1 overflow-hidden space-x-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-none w-1/4 bg-white rounded-lg shadow-lg p-6 flex flex-col\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4 text-gray-700\",\n          children: \"Room Controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1680,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: roomName,\n            onChange: e => setRoomName(e.target.value),\n            placeholder: \"Enter room name\",\n            className: \"w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\",\n            disabled: !!me\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1682,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1681,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex space-x-2 mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleJoinRoom,\n            className: \"flex-1 bg-green-500 text-white py-2 rounded-md shadow-md hover:bg-green-600 transition-colors disabled:opacity-50\",\n            disabled: !skywayContext || !!me,\n            children: \"Join Room\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1692,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLeaveRoom,\n            className: \"flex-1 bg-yellow-500 text-white py-2 rounded-md shadow-md hover:bg-yellow-600 transition-colors disabled:opacity-50\",\n            disabled: !me,\n            children: \"Leave Room\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1699,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1691,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"my-4 border-gray-200\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1707,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4 text-gray-700\",\n          children: \"Actions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1708,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-2 gap-4\",\n          children: Object.entries(messages).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSend(key),\n            className: \"bg-blue-500 text-white py-2 px-4 rounded-md shadow-md hover:bg-blue-600 transition-colors disabled:opacity-50\",\n            disabled: !me || isMoveInProgress,\n            children: value.japanese\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1711,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1709,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1679,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 flex flex-col space-y-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          ref: robotDisplayRef,\n          className: \"flex-1 bg-gray-900 rounded-lg shadow-lg overflow-hidden relative\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute top-4 left-4 z-10 text-white p-2 rounded-md bg-black bg-opacity-50\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm\",\n              children: [\"Room ID: \", roomName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1727,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm\",\n              children: [\"My ID: \", me === null || me === void 0 ? void 0 : me.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1728,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1726,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1725,\n          columnNumber: 11\n        }, this), translatedText && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-4 rounded-lg shadow-lg flex-none mt-2\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-700 font-semibold\",\n            children: [\"Translated: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-normal\",\n              children: translatedText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1736,\n              columnNumber: 70\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1736,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1735,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-none bg-white rounded-lg shadow-lg p-4 h-48 overflow-y-auto\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-semibold mb-2 text-gray-700\",\n            children: \"Messages\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1741,\n            columnNumber: 13\n          }, this), receivedMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `mb-2 p-2 rounded-md ${msg.isLocal ? 'bg-blue-100 self-end' : 'bg-gray-100 self-start'}`,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-800\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-bold\",\n                children: [msg.senderId, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1745,\n                columnNumber: 19\n              }, this), \" \", msg.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1744,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1743,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1740,\n          columnNumber: 11\n        }, this), isAiModeOn && aiSuggestions[0] && aiSuggestions[1] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-suggestions-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSend(`ai_assist_1:${aiSuggestions[0].text}`),\n            className: \"ai-suggestion-btn\",\n            children: aiSuggestions[0].text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1754,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSend(`ai_assist_2:${aiSuggestions[1].text}`),\n            className: \"ai-suggestion-btn\",\n            children: aiSuggestions[1].text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1760,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1753,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1724,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1677,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn ai-btn ${isAiModeOn ? 'active' : ''}`,\n        onClick: () => handleAiModeToggle(),\n        disabled: !me,\n        children: isAiModeOn ? 'AIモードOFF' : 'AIモードON'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1771,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`,\n        onClick: handleToggleListening,\n        disabled: !me || !localDataStreamRef.current,\n        children: isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1778,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn mic-btn ${isMuted ? 'muted' : ''}`,\n        onClick: handleMute,\n        id: \"micBtn\",\n        disabled: !me || !audioPublicationRef.current,\n        children: isMuted ? 'マイク ON' : 'マイク OFF'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1785,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1770,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1665,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"NWNpkQGfcah/H07YYObfVlDojho=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","nowInSec","SkyWayAuthToken","SkyWayContext","SkyWayRoom","SkyWayStreamFactory","uuidV4","RemoteDataStream","RemoteVideoStream","RemoteAudioStream","jsxDEV","_jsxDEV","Home","setIsLoggedIn","_s","roomName","setRoomName","me","setMe","skywayContext","setSkywayContext","skywayRoom","setSkywayRoom","remoteVideoElements","Map","robotDisplayRef","localStreamRef","receivedMessages","setReceivedMessages","localDataStreamRef","isMuted","setIsMuted","audioPublicationRef","isAiModeOn","setIsAiModeOn","aiSuggestions","setAiSuggestions","isMoveInProgress","setIsMoveInProgress","translatedText","setTranslatedText","isListening","setIsListening","recognition","translateText","textToTranslate","response","fetch","method","headers","body","JSON","stringify","text","data","json","ok","console","error","messages","hello","japanese","english","goodbye","bow","flap","lookUp","lookDown","lookRight","lookLeft","nod","tiltHead","spin","jump","dance","bowDeep","doingSomething","thankYou","good","ookini","amazing","handleLogout","appId","secretKey","token","undefined","jti","iat","exp","version","scope","rooms","name","methods","member","turn","enabled","encode","currentContext","initContext","Create","log","dispose","SpeechRecognition","window","webkitSpeechRecognition","current","continuous","interimResults","lang","onresult","event","finalTranscript","i","resultIndex","results","length","isFinal","transcript","trim","write","prevMessages","senderId","id","message","isLocal","translated","onerror","onend","stop","attachRemoteStream","stream","memberId","existingVideo","get","removeChild","delete","video","document","createElement","autoplay","playsInline","className","dataset","attach","appendChild","set","warn","handleDataStream","onData","add","aiCombinedSuggestionRegex","combinedMatch","String","match","suggestion1Content","suggestion2Content","key","aiSingleSuggestionRegex","singleMatch","suggestionNumber","parseInt","suggestionContent","prevSuggestions","newSuggestions","translateRegex","translateMatch","translatedContent","handleJoinRoom","room","FindOrCreate","type","Error","localMember","join","audio","createMicrophoneAudioAndCameraStream","publish","publication_audio","dataStream","createDataStream","publication","publications","publisher","subscribe","contentType","subscribeError","onMemberJoined","e","onMemberLeft","videoElement","onStreamPublished","onStreamUnpublished","Array","from","children","forEach","child","tagName","srcObject","getTracks","track","remove","clear","handleLeaveRoom","leave","close","handleMute","unpublish","handleAiModeToggle","handleSend","dataToSend","startsWith","handleToggleListening","start","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","target","placeholder","disabled","Object","entries","map","ref","msg","index","_c","$RefreshReg$"],"sources":["C:/banpaku_2025/banpaku/src/home.js"],"sourcesContent":["\r\n// import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\n// import './style.css'; // style.cssを再度有効化\r\n// import {\r\n//   nowInSec,\r\n//   SkyWayAuthToken,\r\n//   SkyWayContext,\r\n//   SkyWayRoom,\r\n//   SkyWayStreamFactory,\r\n//   uuidV4,\r\n//   RemoteDataStream, // RemoteDataStreamをインポート\r\n//   RemoteVideoStream, // RemoteVideoStreamをインポート\r\n//   RemoteAudioStream, // RemoteAudioStreamをインポート\r\n// } from '@skyway-sdk/room';\r\n\r\n// /**\r\n//  * ホーム画面コンポーネント\r\n//  * @param {object} props - プロパティ\r\n//  * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n//  */\r\n// function Home({ setIsLoggedIn }) {\r\n//   // ルーム名\r\n//   const [roomName, setRoomName] = useState(\"\");\r\n//   // 自分の参加者情報 (ルームに参加すると設定されます)\r\n//   const [me, setMe] = useState(null);\r\n//   // SkyWayコンテキストのインスタンス\r\n//   const [skywayContext, setSkywayContext] = useState(null);\r\n//   // SkyWayルームのインスタンス\r\n//   const [skywayRoom, setSkywayRoom] = useState(null);\r\n//   // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\r\n//   const remoteVideoElements = useRef(new Map());\r\n//   // リモートビデオを表示するDOM要素への参照\r\n//   const robotDisplayRef = useRef(null);\r\n//   // ローカルストリームの参照を保持\r\n//   const localStreamRef = useRef(null);\r\n//   // 受信したメッセージを表示するための状態\r\n//   // src/home.js\r\n//   // eslint-disable-next-line no-unused-vars\r\n//   const [receivedMessages, setReceivedMessages] = useState([]);\r\n//   // 送信したデータストリームの参照を保持\r\n//   const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\r\n//   // マイクの状態を表示するための状態 (ミュート状態を管理)\r\n//   const [isMuted, setIsMuted] = useState(false);\r\n//   // オーディオストリームのPublicationを保持するための参照\r\n//   const audioPublicationRef = useRef(null);\r\n//   // AIモードがONかどうかを管理する状態\r\n//   const [isAiModeOn, setIsAiModeOn] = useState(false);\r\n//   // AIからの提案を保持する状態\r\n//   // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\r\n//   const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\r\n//   // モーションが進行中かどうかを管理する状態\r\n//   const [isMoveInProgress, setIsMoveInProgress] = useState(false);\r\n//   // 翻訳されたテキストを保持する状態を追加\r\n//   const [translatedText, setTranslatedText] = useState(\"\");\r\n//   // 🌟追加: 音声認識が実行中かどうかを管理する状態\r\n//   const [isListening, setIsListening] = useState(false);\r\n//   // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\r\n//   const recognition = useRef(null);\r\n\r\n\r\n//   // メッセージとモーションの多言語マッピング\r\n//   const messages = useMemo(() => ({\r\n//     hello: {\r\n//       japanese: 'リセット',\r\n//       english: 'Hello'\r\n//     },\r\n//     goodbye: {\r\n//       japanese: '決めポーズ',\r\n//       english: 'Goodbye'\r\n//     },\r\n//     bow: {\r\n//       japanese: 'バイバイ',\r\n//       english: 'Bow'\r\n//     },\r\n//     flap: {\r\n//       japanese: 'YES',\r\n//       english: 'Flap'\r\n//     },\r\n//     lookUp: {\r\n//       japanese: 'NO',\r\n//       english: 'Look up'\r\n//     },\r\n//     lookDown: {\r\n//       japanese: '右手を上げる',\r\n//       english: 'Look down'\r\n//     },\r\n//     lookRight: {\r\n//       japanese: '右手を下げる',\r\n//       english: 'Look right'\r\n//     },\r\n//     lookLeft: {\r\n//       japanese: '左手を上げる',\r\n//       english: 'Left hand up' // Changed from 'Look left' for clarity\r\n//     },\r\n//     nod: {\r\n//       japanese: '左手を下げる',\r\n//       english: 'Left hand down' // Changed from 'Nod' for clarity\r\n//     },\r\n//     tiltHead: {\r\n//       japanese: '上を向く',\r\n//       english: 'Look up' // Changed from 'Tilt head' for clarity\r\n//     },\r\n//     spin: {\r\n//       japanese: '下を向く',\r\n//       english: 'Look down' // Changed from 'Spin' for clarity\r\n//     },\r\n//     jump: {\r\n//       japanese: '右を向く',\r\n//       english: 'Look right' // Changed from 'Jump' for clarity\r\n//     },\r\n//     dance: {\r\n//       japanese: '左を向く',\r\n//       english: 'Look left' // Changed from 'Dance' for clarity\r\n//     },\r\n//     bowDeep: {\r\n//       japanese: 'パタパタ',\r\n//       english: 'Flap arms' // Changed from 'Deep bow' for clarity\r\n//     },\r\n//     doingSomething: {\r\n//       japanese: 'こんにちは',\r\n//       english: 'Hello'\r\n//     },\r\n//     thankYou: {\r\n//       japanese: 'バイバイ',\r\n//       english: 'Goodbye' // Changed from 'Thank you' for clarity\r\n//     },\r\n//     good: {\r\n//       japanese: 'ようこそ',\r\n//       english: 'Welcome' // Changed from 'Good' for clarity\r\n//     },\r\n//     ookini: {\r\n//       japanese: 'ありがとう',\r\n//       english: 'Thank you (Kansai dialect)'\r\n//     },\r\n//     amazing: {\r\n//       japanese: '楽しんでね',\r\n//       english: 'Enjoy' // Changed from 'Amazing' for clarity\r\n//     }\r\n//   }), []);\r\n\r\n\r\n//   /**\r\n//    * ログアウトボタンクリック時のハンドラ\r\n//    */\r\n//   const handleLogout = () => {\r\n//     setIsLoggedIn(false); // ログイン状態をfalseに設定\r\n//   };\r\n\r\n//   // SkyWay App ID と Secret Key\r\n//   // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\r\n//   // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\r\n//   const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\r\n//   const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\r\n\r\n//   // SkyWay認証トークンの生成\r\n//   const token = useMemo(() => {\r\n//     if (appId == null || secretKey == null) return undefined;\r\n\r\n//     return new SkyWayAuthToken({\r\n//       jti: uuidV4(), // JWT ID\r\n//       iat: nowInSec(), // 発行時刻\r\n//       exp: nowInSec() + 60 * 60 * 24, // 有効期限 (24時間)\r\n//       version: 3,\r\n//       scope: {\r\n//         appId: appId,\r\n//         rooms: [\r\n//           {\r\n//             name: \"*\", // すべてのルーム名に適用\r\n//             methods: [\"create\", \"close\", \"updateMetadata\"], // ルーム操作の権限\r\n//             member: {\r\n//               name: \"*\", // すべてのメンバーに適用\r\n//               methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\r\n//             }\r\n//           }],\r\n//         turn: {\r\n//           enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\r\n//         }\r\n//       }\r\n//     }).encode(secretKey);\r\n\r\n//   }, [appId, secretKey]);\r\n\r\n//   /**\r\n//    * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n//    * トークンが利用可能になったときに一度だけ実行されます。\r\n//    */\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n\r\n//     let currentContext;\r\n//     const initContext = async () => {\r\n//       try {\r\n//         currentContext = await SkyWayContext.Create(token);\r\n//         setSkywayContext(currentContext);\r\n//         console.log(\"SkyWayContext created successfully.\");\r\n//       } catch (error) {\r\n//         console.error(\"Failed to create SkyWayContext:\", error);\r\n//       }\r\n//     };\r\n\r\n//     initContext();\r\n\r\n//     // コンポーネントのアンマウント時にコンテキストを破棄\r\n//     return () => {\r\n//       if (currentContext) {\r\n//         currentContext.dispose();\r\n//         console.log(\"SkyWayContext disposed.\");\r\n//       }\r\n//     };\r\n//   }, [token]); // tokenが変更されたときにのみ実行\r\n\r\n//   // 🌟追加: SpeechRecognition APIの初期化\r\n//   useEffect(() => {\r\n//     // ブラウザがSpeechRecognitionに対応しているか確認\r\n//     const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n//     if (!SpeechRecognition) {\r\n//       console.error(\"SpeechRecognition API is not supported by this browser.\");\r\n//       return;\r\n//     }\r\n\r\n//     // SpeechRecognitionオブジェクトを初期化\r\n//     recognition.current = new SpeechRecognition();\r\n//     recognition.current.continuous = true; // 連続的な認識\r\n//     recognition.current.interimResults = true; // 中間結果を返す\r\n//     recognition.current.lang = 'ja-JP'; // 日本語を指定\r\n\r\n//     // 音声認識の結果を処理するハンドラ\r\n//     recognition.current.onresult = (event) => {\r\n//       let finalTranscript = '';\r\n//       for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n//         if (event.results[i].isFinal) {\r\n//           finalTranscript = event.results[i][0].transcript;\r\n//           break; // 最初の確定した結果のみを取得\r\n//         }\r\n//       }\r\n\r\n//       // 確定した結果が空でなければSkywayで送信\r\n//       if (finalTranscript.trim() !== '') {\r\n//         console.log(\"Transcription final result:\", finalTranscript);\r\n//         // Skywayのデータストリームで送信\r\n//         if (localDataStreamRef.current && me) {\r\n//           localDataStreamRef.current.write(finalTranscript);\r\n//           console.log(`Sent transcription: \"${finalTranscript}\"`);\r\n//           // 自分の画面にも表示\r\n//           setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: finalTranscript, isLocal: true }]);\r\n//         }\r\n//       }\r\n//     };\r\n\r\n//     // 認識エラー時のハンドラ\r\n//     recognition.current.onerror = (event) => {\r\n//       console.error(\"Speech recognition error:\", event.error);\r\n//       setIsListening(false); // エラー時はリスニング状態を停止\r\n//     };\r\n\r\n//     // 認識終了時のハンドラ\r\n//     recognition.current.onend = () => {\r\n//       console.log(\"Speech recognition ended.\");\r\n//       // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\r\n//       // if (isListening) {\r\n//       //   recognition.current.start();\r\n//       // }\r\n//     };\r\n\r\n//     // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\r\n//     return () => {\r\n//       if (recognition.current) {\r\n//         recognition.current.stop();\r\n//       }\r\n//     };\r\n//   }, [me, localDataStreamRef]);\r\n\r\n//   /**\r\n//    * リモートストリームをDOMに追加するヘルパー関数\r\n//    * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n//    * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n//    */\r\n//   const attachRemoteStream = (stream, memberId) => {\r\n//     if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\r\n//       // 既存のビデオ要素があれば削除\r\n//       const existingVideo = remoteVideoElements.current.get(memberId);\r\n//       if (existingVideo) {\r\n//         robotDisplayRef.current.removeChild(existingVideo);\r\n//         remoteVideoElements.current.delete(memberId);\r\n//       }\r\n\r\n//       const video = document.createElement(\"video\");\r\n//       video.autoplay = true; // 自動再生\r\n//       video.playsInline = true; // インライン再生 (iOSなどで必要)\r\n//       video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\r\n//       video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\r\n//       stream.attach(video); // ストリームをビデオ要素のソースに設定\r\n//       robotDisplayRef.current.appendChild(video);\r\n//       remoteVideoElements.current.set(memberId, video);\r\n//       console.log(`Attached stream from ${memberId} to DOM.`);\r\n//     } else {\r\n//       console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * データストリームの受信を処理するヘルパー関数\r\n//    * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n//    * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n//    */\r\n//   const handleDataStream = (stream, memberId) => {\r\n//     if (stream instanceof RemoteDataStream) {\r\n//       stream.onData.add((data) => {\r\n//         console.log(`Received data from ${memberId}:`, data);\r\n//         // 受信したメッセージを状態に追加\r\n//         setReceivedMessages(prevMessages => [...prevMessages, { senderId: memberId, message: data }]);\r\n\r\n//         // \"move_finish\" シグナルをチェック\r\n//         if (data === \"move_finish\") {\r\n//           console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\r\n//           setIsMoveInProgress(false); // モーション終了\r\n//         }\r\n\r\n//         // AI提案のフォーマットをチェック\r\n//         // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\r\n//         const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\r\n//         const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\r\n\r\n//         if (combinedMatch) {\r\n//           const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\r\n//           const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\r\n\r\n//           setAiSuggestions([\r\n//             { key: 'ai_assist_1', text: suggestion1Content }, // キーをai_assist_1に修正\r\n//             { key: 'ai_assist_2', text: suggestion2Content }  // キーをai_assist_2に修正\r\n//           ]);\r\n//           console.log(\"Received combined AI suggestions.\");\r\n//         } else {\r\n//           // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\r\n//           const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\r\n//           const singleMatch = String(data).match(aiSingleSuggestionRegex);\r\n\r\n//           if (singleMatch) {\r\n//             const suggestionNumber = parseInt(singleMatch[1], 10);\r\n//             const suggestionContent = singleMatch[2];\r\n\r\n//             if (suggestionNumber === 1 || suggestionNumber === 2) {\r\n//               setAiSuggestions(prevSuggestions => {\r\n//                 const newSuggestions = [...prevSuggestions];\r\n//                 newSuggestions[suggestionNumber - 1] = {\r\n//                   key: `ai_assist_${suggestionNumber}`, // キーをai_assist_Nに修正\r\n//                   text: suggestionContent\r\n//                 };\r\n//                 return newSuggestions;\r\n//               });\r\n//               console.log(`Received single AI suggestion ${suggestionNumber}.`);\r\n//             }\r\n//           }\r\n//         }\r\n\r\n//         // 新しい翻訳フォーマットをチェック\r\n//         const translateRegex = /^translate_request:(.*)$/;\r\n//         const translateMatch = String(data).match(translateRegex);\r\n\r\n//         if (translateMatch) {\r\n//           const translatedContent = translateMatch[1];\r\n//           setTranslatedText(translatedContent); // 状態を更新\r\n//           console.log(`Received translated text: ${translatedContent}`);\r\n//         } else {\r\n//           // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\r\n//           // setTranslatedText(\"\");\r\n//         }\r\n//       });\r\n//       console.log(`Listening for data from ${memberId}.`);\r\n//     } else {\r\n//       console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * ルームに参加するハンドラ\r\n//    * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n//    */\r\n//   const handleJoinRoom = async () => {\r\n//     if (!skywayContext) {\r\n//       console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\r\n//       return;\r\n//     }\r\n//     if (!roomName) {\r\n//       console.error(\"Room name is empty. Please enter a room name to join.\");\r\n//       return;\r\n//     }\r\n//     if (skywayRoom && me) {\r\n//       console.warn(\"Already in a room. Please leave the current room first.\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       // 指定されたルーム名でP2Pルームを作成または検索\r\n//       const room = await SkyWayRoom.FindOrCreate(skywayContext, {\r\n//         type: \"p2p\", // P2Pルームタイプ\r\n//         name: roomName,\r\n//       });\r\n\r\n//       // roomオブジェクトが有効であることを確認\r\n//       if (!room) {\r\n//         console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\r\n//         throw new Error(\"Failed to create or find SkyWayRoom.\");\r\n//       }\r\n\r\n//       setSkywayRoom(room);\r\n//       console.log(`SkyWayRoom '${roomName}' found or created.`);\r\n\r\n//       // ルームに参加し、自分のメンバー情報を取得\r\n//       const localMember = await room.join();\r\n//       // localMemberが有効であることを確認\r\n//       if (!localMember) {\r\n//         console.error(\"room.join() returned null or undefined localMember.\");\r\n//         throw new Error(\"Failed to join the room.\");\r\n//       }\r\n//       setMe(localMember);\r\n//       console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\r\n//       // ルームIDと自分のIDをコンソールに表示\r\n//       console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\r\n\r\n\r\n//       // 自分のカメラとマイクのストリームを作成し、公開\r\n//       const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\r\n//       localStreamRef.current = video; // ローカルビデオストリームを保存\r\n//       await localMember.publish(video);\r\n//       const publication_audio = await localMember.publish(audio);\r\n//       audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\r\n//       setIsMuted(false);\r\n//       console.log(\"Published local camera and microphone stream.\");\r\n\r\n//       // 自分のデータストリームを作成し、公開\r\n//       const dataStream = await SkyWayStreamFactory.createDataStream();\r\n//       localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\r\n//       await localMember.publish(dataStream);\r\n//       console.log(\"Published local data stream.\");\r\n\r\n//       // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\r\n//       setIsMoveInProgress(false);\r\n\r\n\r\n//       // --- 既存のストリームを購読するロジック ---\r\n//       // ルーム内の既存の公開ストリームをすべて購読する\r\n//       for (const publication of room.publications) {\r\n//         // 自分のストリームは購読しない\r\n//         if (localMember.id === publication.publisher.id) {\r\n//           continue;\r\n//         }\r\n//         try {\r\n//           const { stream } = await localMember.subscribe(publication.id);\r\n//           console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\r\n\r\n//           if (publication.contentType === 'video' || publication.contentType === 'audio') {\r\n//             attachRemoteStream(stream, publication.publisher.id);\r\n//           } else if (publication.contentType === 'data') {\r\n//             handleDataStream(stream, publication.publisher.id);\r\n//           } else {\r\n//             console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\r\n//           }\r\n//         } catch (subscribeError) {\r\n//           console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\r\n//         }\r\n//       }\r\n\r\n//       // --- ルームイベントリスナーの設定 ---\r\n\r\n//       // メンバーがルームに参加したときのイベント\r\n//       if (room.onMemberJoined) {\r\n//         room.onMemberJoined.add((e) => {\r\n//           console.log(`Member joined: ${e.member.id}`);\r\n//         });\r\n//       } else {\r\n//         console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\r\n//       }\r\n\r\n//       // メンバーがルームを離脱したときのイベント\r\n//       if (room.onMemberLeft) {\r\n//         room.onMemberLeft.add((e) => {\r\n//           console.log(`Member left: ${e.member.id}`);\r\n//           // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\r\n//           const videoElement = remoteVideoElements.current.get(e.member.id);\r\n//           if (videoElement && robotDisplayRef.current) {\r\n//             robotDisplayRef.current.removeChild(videoElement);\r\n//             remoteVideoElements.current.delete(e.member.id);\r\n//             console.log(`Removed video for member ${e.member.id}`);\r\n//           }\r\n//           // データストリーム関連のクリーンアップもここに追加可能ですが、\r\n//           // onDataリスナーはストリームが閉じられると自動的に停止します。\r\n//         });\r\n//       } else {\r\n//         console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\r\n//       }\r\n\r\n//       // ストリームが公開されたときのイベント\r\n//       if (room.onStreamPublished) {\r\n//         room.onStreamPublished.add(async (e) => {\r\n//           console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\r\n//           // 自分のストリームは購読しない\r\n//           if (localMember.id !== e.publication.publisher.id) {\r\n//             try {\r\n//               // リモートストリームを購読\r\n//               const { stream } = await localMember.subscribe(e.publication.id);\r\n//               console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\r\n\r\n//               if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\r\n//                 attachRemoteStream(stream, e.publication.publisher.id);\r\n//               } else if (e.publication.contentType === 'data') {\r\n//                 handleDataStream(stream, e.publication.publisher.id);\r\n//               } else {\r\n//                 console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\r\n//               }\r\n//             } catch (subscribeError) {\r\n//               console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\r\n//             }\r\n//           } else {\r\n//             console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\r\n//           }\r\n//         });\r\n//       } else {\r\n//         console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\r\n//       }\r\n\r\n//       // ストリームが非公開になったときのイベント\r\n//       if (room.onStreamUnpublished) {\r\n//         room.onStreamUnpublished.add((e) => {\r\n//           console.log(`Stream unpublished by ${e.publication.publisher.id}`);\r\n//           // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\r\n//           const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\r\n//           if (videoElement && robotDisplayRef.current) {\r\n//             robotDisplayRef.current.removeChild(videoElement);\r\n//             remoteVideoElements.current.delete(e.publication.publisher.id);\r\n//             console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\r\n//           }\r\n//         });\r\n//       } else {\r\n//         console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\r\n//       }\r\n\r\n//     } catch (error) {\r\n//       console.error(\"Failed to join room:\", error);\r\n//       // エラー発生時に状態をリセットして再試行可能にする\r\n//       setSkywayRoom(null);\r\n//       setMe(null);\r\n//       // エラー時に既存のビデオ要素をクリーンアップ\r\n//       if (robotDisplayRef.current) {\r\n//         Array.from(robotDisplayRef.current.children).forEach(child => {\r\n//           if (child.tagName === 'VIDEO') {\r\n//             // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n//             if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n//               child.srcObject.getTracks().forEach(track => track.stop());\r\n//               child.srcObject = null;\r\n//             }\r\n//             child.remove(); // DOMから要素を削除\r\n//           }\r\n//         });\r\n//       }\r\n//       remoteVideoElements.current.clear();\r\n//       if (localStreamRef.current) {\r\n//         // LocalVideoStreamのstop()メソッドを呼び出す\r\n//         if (typeof localStreamRef.current.stop === 'function') {\r\n//           localStreamRef.current.stop();\r\n//           console.log(\"Stopped local media stream during join error cleanup.\");\r\n//         } else {\r\n//           console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\r\n//         }\r\n//         localStreamRef.current = null;\r\n//       }\r\n//       // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n//       localDataStreamRef.current = null; // 参照をクリア\r\n//       console.log(\"Local data stream reference cleared during join error cleanup.\");\r\n\r\n//       // ミュート状態もリセット\r\n//       setIsMuted(false);\r\n//       audioPublicationRef.current = null;\r\n//       setIsMoveInProgress(false); // エラー時もモーション状態をリセット\r\n//       setTranslatedText(\"\"); // 翻訳テキストをクリア\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * ルームから退出するハンドラ\r\n//    */\r\n//   const handleLeaveRoom = async () => {\r\n//     if (skywayRoom && me) {\r\n//       try {\r\n//         // ローカルストリームを停止し、公開を解除\r\n//         if (localStreamRef.current) {\r\n//           // LocalVideoStreamのstop()メソッドを呼び出す\r\n//           if (typeof localStreamRef.current.stop === 'function') {\r\n//             localStreamRef.current.stop();\r\n//             console.log(\"Stopped local media stream.\");\r\n//           } else {\r\n//             console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during leave.\");\r\n//           }\r\n//           localStreamRef.current = null;\r\n//         }\r\n//         // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n//         localDataStreamRef.current = null; // 参照をクリア\r\n//         console.log(\"Local data stream reference cleared.\");\r\n\r\n//         // オーディオPublicationの参照をクリア\r\n//         audioPublicationRef.current = null;\r\n//         setIsMuted(false); // ミュート状態をリセット\r\n//         setTranslatedText(\"\"); // 翻訳テキストをクリア\r\n//         // �追加: ルーム退出時に音声認識を停止\r\n//         if (isListening) {\r\n//           recognition.current.stop();\r\n//           setIsListening(false);\r\n//         }\r\n\r\n//         await me.leave(); // ルームから退出\r\n//         console.log(`Left room '${roomName}'`);\r\n//         // ルーム退出をコンソールに表示\r\n//         console.log(`Left room: ${roomName}`);\r\n\r\n\r\n//         // room.dispose()を使用\r\n//         if (skywayRoom) {\r\n//           await skywayRoom.dispose(); // ルームを閉じる (これはルームの作成者のみが効果的です)\r\n//           console.log(\"SkyWay Room disposed.\");\r\n//         }\r\n//         // SkyWay SDKに関するすべての操作が不要になった場合にcontext.dispose()を呼び出す\r\n//         // このコンポーネントがアンマウントされる際にuseEffectのクリーンアップ関数で処理されるため、ここでは呼び出さない\r\n\r\n//       } catch (error) {\r\n//       } finally {\r\n//         // 状態をリセット\r\n//         setMe(null);\r\n//         setSkywayRoom(null);\r\n//         setReceivedMessages([]); // 受信メッセージもクリア\r\n//         // すべてのリモートビデオ要素をDOMから削除\r\n//         if (robotDisplayRef.current) {\r\n//           Array.from(robotDisplayRef.current.children).forEach(child => {\r\n//             if (child.tagName === 'VIDEO') {\r\n//               // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n//               if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n//                 child.srcObject.getTracks().forEach(track => track.stop());\r\n//                 child.srcObject = null;\r\n//               }\r\n//               child.remove(); // DOMから要素を削除\r\n//             }\r\n//           });\r\n//         }\r\n//         remoteVideoElements.current.clear();\r\n//         // AIモードもオフにする\r\n//         setIsAiModeOn(false);\r\n//         setAiSuggestions([null, null]); // 提案もクリア\r\n//         setIsMoveInProgress(false); // ルーム退出時もモーション状態をリセット\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * モーションを操作するボタンを押した時の処理\r\n//    * @param {string | object} messageOrKey - 送信するメッセージのキー (messagesオブジェクトのキー) またはAI提案オブジェクト\r\n//    */\r\n//   const handleSend = async (messageOrKey) => {\r\n//     if (me && skywayRoom && localDataStreamRef.current) {\r\n//       try {\r\n//         let messageToSend;\r\n//         let shouldSetMoveInProgress = false; // モーション進行中フラグを制御するための新しい変数\r\n\r\n//         if (typeof messageOrKey === 'string') {\r\n//           // サイドボタンからの送信の場合、直接メッセージ文字列を使用\r\n//           if (messageOrKey.startsWith(\"template_motion_\")) {\r\n//             messageToSend = messageOrKey;\r\n//             shouldSetMoveInProgress = true; // モーションコマンドの場合のみフラグを立てる\r\n//           } else if (messageOrKey.startsWith(\"template_voice_\")) {\r\n//             messageToSend = messageOrKey;\r\n//             // ボイスコマンドの場合はshouldSetMoveInProgressをtrueにしない\r\n//           } else if (messageOrKey.startsWith(\"robot_reset\")){\r\n//             messageToSend = messageOrKey;\r\n//           } else {\r\n//             // 既存のmessagesオブジェクトからのルックアップ (AI提案以外でキーが渡された場合など)\r\n//             messageToSend = messages[messageOrKey];\r\n//           }\r\n//         } else if (typeof messageOrKey === 'object' && messageOrKey.key) { // messageOrKey.text から messageOrKey.key に変更\r\n//           // AI提案ボタンからの送信\r\n//           messageToSend = messageOrKey.key; // 提案のキー（ai_assist_1など）を送信\r\n//           // AI提案の場合はshouldSetMoveInProgressをtrueにしない\r\n//         }\r\n\r\n//         if (!messageToSend) {\r\n//           console.warn(`Message to send is empty or not found.`);\r\n//           return;\r\n//         }\r\n\r\n//         localDataStreamRef.current.write(messageToSend);\r\n//         console.log(`Sent message: \"${messageToSend}\"`);\r\n//         // 送信したメッセージも自身の画面に表示\r\n//         setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: messageToSend, isLocal: true }]);\r\n//         setAiSuggestions([null, null]); // 送信したら提案をクリア\r\n\r\n//         // shouldSetMoveInProgressがtrueの場合のみモーション進行中状態にする\r\n//         if (shouldSetMoveInProgress) {\r\n//           setIsMoveInProgress(true);\r\n//         }\r\n//         // AI提案やボイスコマンドの場合は、isMoveInProgressは変更しない\r\n//         // (以前のモーションが進行中であればそのまま、そうでなければfalseのまま)\r\n\r\n//       } catch (error) {\r\n//         console.error(\"Failed to send data:\", error);\r\n//       }\r\n//     } else {\r\n//       console.warn(\"Cannot send message: Not in a room, 'me' object is not available, or data stream is not ready.\");\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * マイクのミュート/ミュート解除を切り替えるハンドラ\r\n//    */\r\n//   const handleMute = async () => {\r\n//     console.log(\"start\");\r\n//     if (!audioPublicationRef.current) {\r\n//       console.warn(\"Audio publication not available. Cannot toggle mute.\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       if (isMuted) {\r\n//         // 現在ミュート状態なら、ミュートを解除\r\n//         await audioPublicationRef.current.enable();\r\n//         console.log(\"Microphone unmuted.\");\r\n//       } else {\r\n//         // 現在ミュート状態でないなら、ミュート\r\n//         await audioPublicationRef.current.disable();\r\n//         console.log(\"Microphone muted.\");\r\n//       }\r\n//       setIsMuted(!isMuted); // ミュート状態をトグル\r\n//     } catch (error) {\r\n//       console.error(\"Failed to toggle microphone mute state:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // AIモードが変更されたときにシグナルを送信するためのフラグ\r\n//   const isInitialAiModeRender = useRef(true);\r\n\r\n//   /**\r\n//    * AIモードの状態変更を監視し、シグナルを送信するuseEffect\r\n//    */\r\n//   useEffect(() => {\r\n//     // 初回レンダリング時はシグナルを送信しない\r\n//     if (isInitialAiModeRender.current) {\r\n//       isInitialAiModeRender.current = false;\r\n//       return;\r\n//     }\r\n\r\n//     // me オブジェクトとデータストリームが利用可能であることを確認\r\n//     if (!me || !localDataStreamRef.current) {\r\n//       return;\r\n//     }\r\n\r\n//     if (isAiModeOn) {\r\n//       // AIモードがONになったら、AIに提案を要求するメッセージを送信\r\n//       localDataStreamRef.current.write(\"ai_assist_on\");\r\n//       console.log(\"Sent AI_MODE_REQUEST_SUGGESTIONS signal.\");\r\n//       setAiSuggestions([null, null]); // 新しいセッションのために提案をクリア\r\n//     } else {\r\n//       // AIモードがOFFになったら提案をクリアし、AIモード終了のシグナルを送信\r\n//       localDataStreamRef.current.write(\"ai_assist_off\");\r\n//       console.log(\"Sent AI_MODE_OFF_SIGNAL.\");\r\n//       setAiSuggestions([null, null]); // 提案をクリア\r\n//     }\r\n//   }, [isAiModeOn, me, localDataStreamRef]); // isAiModeOn, me, localDataStreamRef の変更に反応\r\n\r\n//   /**\r\n//    * AIモードを切り替えるハンドラ\r\n//    * この関数はAIモードの状態をトグルするのみで、シグナル送信はuseEffectに任せる\r\n//    */\r\n//   /* eslint-disable */\r\n//   const handleAiModeToggle = () => {\r\n//     setIsAiModeOn(prev => !prev);\r\n//   };\r\n//   /* eslint-enable */\r\n\r\n//   // 🌟追加: 音声認識の開始・停止を切り替えるハンドラ\r\n//   const handleToggleListening = () => {\r\n//     if (!recognition.current) {\r\n//       console.error(\"SpeechRecognition API is not initialized.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (isListening) {\r\n//       // 認識を停止\r\n//       recognition.current.stop();\r\n//       console.log(\"Stopped speech recognition.\");\r\n//     } else {\r\n//       // 認識を開始\r\n//       recognition.current.start();\r\n//       console.log(\"Started speech recognition.\");\r\n//     }\r\n//     setIsListening(!isListening);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app-container\">\r\n//       <div className=\"header\">\r\n//         <div className=\"header-left\">\r\n//           <button className=\"motion-btn\" disabled={isAiModeOn || isMoveInProgress}>モーション</button>\r\n//           {/* 翻訳されたテキストを表示する要素を追加 */}\r\n//           {translatedText && (\r\n//             <div className=\"translated-text\">\r\n//               <span className=\"translated-text-label\">翻訳: </span>\r\n//               <span className=\"translated-text-content\">{translatedText}</span>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <div className=\"header-right\">\r\n//           <button onClick={handleLogout} className=\"logout-btn\">ログアウト</button>\r\n//           <button className=\"voice-btn\" disabled={isAiModeOn || isMoveInProgress}>ボイス</button>\r\n//         </div>\r\n//       </div>\r\n//       <div className=\"main-container\">\r\n//         <div className=\"side-panel\">\r\n//           <div className=\"side-panel-content\">\r\n//             {Object.keys(messages).slice(0, 14).map(key => ( // 左側のボタン数を調整\r\n//               <button\r\n//                 key={key}\r\n//                 // 左側のボタンは \"template_motion_〇〇\" 形式で送信\r\n//                 onClick={() => handleSend(`template_motion_${messages[key].japanese}`)}\r\n//                 className=\"side-btn\"\r\n//                 disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\r\n//               >\r\n//                 {messages[key].japanese} {/* 常に日本語表示 */}\r\n//               </button>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"main-area\">\r\n//           <div className=\"room-controls\">\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"ルーム名を入力\"\r\n//               value={roomName}\r\n//               onChange={(e) => setRoomName(e.target.value)}\r\n//               className=\"room-input\"\r\n//               disabled={!!me} // ルーム参加中は入力不可にする\r\n//             />\r\n//             {!me ? ( // ルームに参加していない場合\r\n//               <button onClick={handleJoinRoom} className=\"join-room-btn\" disabled={!skywayContext || !roomName}>\r\n//                 ルームに参加\r\n//               </button>\r\n//             ) : ( // ルームに参加している場合\r\n//               <button onClick={handleLeaveRoom} className=\"leave-room-btn\">\r\n//                 ルームを退出\r\n//               </button>\r\n//             )}\r\n//           </div>\r\n//           <div className=\"robot-display\" ref={robotDisplayRef}>\r\n//             {/* リモートのビデオストリームがここに動的に追加されます */}\r\n//             {/* ルーム情報はコンソールに表示されるため、ここでは表示しません */}\r\n\r\n//             {/* AIからの提案表示 */}\r\n//             {(aiSuggestions[0] || aiSuggestions[1]) && (\r\n//               <div className=\"ai-suggestions\">\r\n//                 {aiSuggestions[0] && (\r\n//                   <button\r\n//                     onClick={() => handleSend(aiSuggestions[0])}\r\n//                     className=\"ai-suggestion-btn\"\r\n//                     disabled={isMoveInProgress} // モーション中は無効化\r\n//                   >\r\n//                     {aiSuggestions[0].text}\r\n//                   </button>\r\n//                 )}\r\n//                 {aiSuggestions[1] && (\r\n//                   <button\r\n//                     onClick={() => handleSend(aiSuggestions[1])}\r\n//                     className=\"ai-suggestion-btn\"\r\n//                     disabled={isMoveInProgress} // モーション中は無効化\r\n//                   >\r\n//                     {aiSuggestions[1].text}\r\n//                   </button>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"side-panel right\">\r\n//           <div className=\"side-panel-content\">\r\n//             {Object.keys(messages).slice(14).map(key => ( // 右側のボタン数を調整\r\n//               <button\r\n//                 key={key}\r\n//                 // 右側のボタンは \"template_voice_〇〇\" 形式で送信\r\n//                 onClick={() => handleSend(`template_voice_${messages[key].japanese}`)}\r\n//                 className=\"side-btn\"\r\n//                 disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\r\n//               >\r\n//                 {messages[key].japanese} {/* 常に日本語表示 */}\r\n//               </button>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       <div className=\"bottom-controls\">\r\n//         <button\r\n//           className={`control-btn ai-btn`}\r\n//           onClick={() => handleAiModeToggle()}\r\n//           disabled={!me} // ルームに参加していない場合は無効\r\n//         >\r\n//           {isAiModeOn ? 'AIモードOFF' : 'AIモードON'}\r\n//         </button>\r\n//         {/* 🌟追加: 音声認識ボタン */}\r\n//         <button\r\n//           className={`control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`}\r\n//           onClick={handleToggleListening}\r\n//           disabled={!me || !localDataStreamRef.current || isAiModeOn} // ルーム未参加、データストリーム未準備、AIモード中は無効\r\n//         >\r\n//           {isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'}\r\n//         </button>\r\n//         <button\r\n//           className={`control-btn mic-btn ${isMuted ? 'muted' : ''}`} // ミュート状態に応じてクラスを追加\r\n//           onClick={handleMute}\r\n//           id=\"micBtn\"\r\n//           disabled={!me || !audioPublicationRef.current || isAiModeOn} // ルームに参加していない、またはオーディオが公開されていない、AIモード中は無効\r\n//         >\r\n//           {isMuted ? '🔇 マイクミュート' : '🎤 マイクON'} {/* ミュート状態に応じてアイコンとテキストを変更 */}\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Home;\r\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\r\n// import './style.css'; // style.cssを再度有効化\r\nimport {\r\n  nowInSec,\r\n  SkyWayAuthToken,\r\n  SkyWayContext,\r\n  SkyWayRoom,\r\n  SkyWayStreamFactory,\r\n  uuidV4,\r\n  RemoteDataStream, // RemoteDataStreamをインポート\r\n  RemoteVideoStream, // RemoteVideoStreamをインポート\r\n  RemoteAudioStream, // RemoteAudioStreamをインポート\r\n} from '@skyway-sdk/room';\r\n\r\n/**\r\n * ホーム画面コンポーネント\r\n * @param {object} props - プロパティ\r\n * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n */\r\nfunction Home({ setIsLoggedIn }) {\r\n  // ルーム名\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  // 自分の参加者情報 (ルームに参加すると設定されます)\r\n  const [me, setMe] = useState(null);\r\n  // SkyWayコンテキストのインスタンス\r\n  const [skywayContext, setSkywayContext] = useState(null);\r\n  // SkyWayルームのインスタンス\r\n  const [skywayRoom, setSkywayRoom] = useState(null);\r\n  // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\r\n  const remoteVideoElements = useRef(new Map());\r\n  // リモートビデオを表示するDOM要素への参照\r\n  const robotDisplayRef = useRef(null);\r\n  // ローカルストリームの参照を保持\r\n  const localStreamRef = useRef(null);\r\n  // 受信したメッセージを表示するための状態\r\n  // src/home.js\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [receivedMessages, setReceivedMessages] = useState([]);\r\n  // 送信したデータストリームの参照を保持\r\n  const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\r\n  // マイクの状態を表示するための状態 (ミュート状態を管理)\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  // オーディオストリームのPublicationを保持するための参照\r\n  const audioPublicationRef = useRef(null);\r\n  // AIモードがONかどうかを管理する状態\r\n  const [isAiModeOn, setIsAiModeOn] = useState(false);\r\n  // AIからの提案を保持する状態\r\n  // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\r\n  const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\r\n  // モーションが進行中かどうかを管理する状態\r\n  const [isMoveInProgress, setIsMoveInProgress] = useState(false);\r\n  // 翻訳されたテキストを保持する状態を追加\r\n  const [translatedText, setTranslatedText] = useState(\"\");\r\n  // 🌟追加: 音声認識が実行中かどうかを管理する状態\r\n  const [isListening, setIsListening] = useState(false);\r\n  // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\r\n  const recognition = useRef(null);\r\n\r\n  // --- 新規追加: Google Translation APIを呼び出す関数 ---\r\n  /**\r\n   * テキストを翻訳する関数\r\n   * @param {string} textToTranslate - 翻訳するテキスト\r\n   * @returns {Promise<string>} - 翻訳されたテキスト\r\n   */\r\n  const translateText = async (textToTranslate) => {\r\n    try {\r\n      // ローカルのバックエンドサーバーを呼び出す\r\n      const response = await fetch('http://localhost:3001/translate', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text: textToTranslate }),\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        return data.translatedText;\r\n      } else {\r\n        console.error('Translation API error:', data.error);\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to call translation API:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // メッセージとモーションの多言語マッピング\r\n  const messages = useMemo(() => ({\r\n    hello: {\r\n      japanese: 'リセット',\r\n      english: 'Hello'\r\n    },\r\n    goodbye: {\r\n      japanese: '決めポーズ',\r\n      english: 'Goodbye'\r\n    },\r\n    bow: {\r\n      japanese: 'バイバイ',\r\n      english: 'Bow'\r\n    },\r\n    flap: {\r\n      japanese: 'YES',\r\n      english: 'Flap'\r\n    },\r\n    lookUp: {\r\n      japanese: 'NO',\r\n      english: 'Look up'\r\n    },\r\n    lookDown: {\r\n      japanese: '右手を上げる',\r\n      english: 'Look down'\r\n    },\r\n    lookRight: {\r\n      japanese: '右手を下げる',\r\n      english: 'Look right'\r\n    },\r\n    lookLeft: {\r\n      japanese: '左手を上げる',\r\n      english: 'Left hand up' // Changed from 'Look left' for clarity\r\n    },\r\n    nod: {\r\n      japanese: '左手を下げる',\r\n      english: 'Left hand down' // Changed from 'Nod' for clarity\r\n    },\r\n    tiltHead: {\r\n      japanese: '上を向く',\r\n      english: 'Look up' // Changed from 'Tilt head' for clarity\r\n    },\r\n    spin: {\r\n      japanese: '下を向く',\r\n      english: 'Look down' // Changed from 'Spin' for clarity\r\n    },\r\n    jump: {\r\n      japanese: '右を向く',\r\n      english: 'Look right' // Changed from 'Jump' for clarity\r\n    },\r\n    dance: {\r\n      japanese: '左を向く',\r\n      english: 'Look left' // Changed from 'Dance' for clarity\r\n    },\r\n    bowDeep: {\r\n      japanese: 'パタパタ',\r\n      english: 'Flap arms' // Changed from 'Deep bow' for clarity\r\n    },\r\n    doingSomething: {\r\n      japanese: 'こんにちは',\r\n      english: 'Hello'\r\n    },\r\n    thankYou: {\r\n      japanese: 'バイバイ',\r\n      english: 'Goodbye' // Changed from 'Thank you' for clarity\r\n    },\r\n    good: {\r\n      japanese: 'ようこそ',\r\n      english: 'Welcome' // Changed from 'Good' for clarity\r\n    },\r\n    ookini: {\r\n      japanese: 'ありがとう',\r\n      english: 'Thank you (Kansai dialect)'\r\n    },\r\n    amazing: {\r\n      japanese: '楽しんでね',\r\n      english: 'Enjoy' // Changed from 'Amazing' for clarity\r\n    }\r\n  }), []);\r\n\r\n\r\n  /**\r\n   * ログアウトボタンクリック時のハンドラ\r\n   */\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false); // ログイン状態をfalseに設定\r\n  };\r\n\r\n  // SkyWay App ID と Secret Key\r\n  // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\r\n  // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\r\n  const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\r\n  const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\r\n\r\n  // SkyWay認証トークンの生成\r\n  const token = useMemo(() => {\r\n    if (appId == null || secretKey == null) return undefined;\r\n\r\n    return new SkyWayAuthToken({\r\n      jti: uuidV4(), // JWT ID\r\n      iat: nowInSec(), // 発行時刻\r\n      exp: nowInSec() + 60 * 60 * 24, // 有効期限 (24時間)\r\n      version: 3,\r\n      scope: {\r\n        appId: appId,\r\n        rooms: [\r\n          {\r\n            name: \"*\", // すべてのルーム名に適用\r\n            methods: [\"create\", \"close\", \"updateMetadata\"], // ルーム操作の権限\r\n            member: {\r\n              name: \"*\", // すべてのメンバーに適用\r\n              methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\r\n            }\r\n          }],\r\n        turn: {\r\n          enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\r\n        }\r\n      }\r\n    }).encode(secretKey);\r\n\r\n  }, [appId, secretKey]);\r\n\r\n  /**\r\n   * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n   * トークンが利用可能になったときに一度だけ実行されます。\r\n   */\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    let currentContext;\r\n    const initContext = async () => {\r\n      try {\r\n        currentContext = await SkyWayContext.Create(token);\r\n        setSkywayContext(currentContext);\r\n        console.log(\"SkyWayContext created successfully.\");\r\n      } catch (error) {\r\n        console.error(\"Failed to create SkyWayContext:\", error);\r\n      }\r\n    };\r\n\r\n    initContext();\r\n\r\n    // コンポーネントのアンマウント時にコンテキストを破棄\r\n    return () => {\r\n      if (currentContext) {\r\n        currentContext.dispose();\r\n        console.log(\"SkyWayContext disposed.\");\r\n      }\r\n    };\r\n  }, [token]); // tokenが変更されたときにのみ実行\r\n\r\n  // 🌟追加: SpeechRecognition APIの初期化\r\n  useEffect(() => {\r\n    // ブラウザがSpeechRecognitionに対応しているか確認\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    if (!SpeechRecognition) {\r\n      console.error(\"SpeechRecognition API is not supported by this browser.\");\r\n      return;\r\n    }\r\n\r\n    // SpeechRecognitionオブジェクトを初期化\r\n    recognition.current = new SpeechRecognition();\r\n    recognition.current.continuous = true; // 連続的な認識\r\n    recognition.current.interimResults = true; // 中間結果を返す\r\n    recognition.current.lang = 'ja-JP'; // 日本語を指定\r\n\r\n    // 音声認識の結果を処理するハンドラ\r\n    recognition.current.onresult = async (event) => { // asyncを追加\r\n      let finalTranscript = '';\r\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n        if (event.results[i].isFinal) {\r\n          finalTranscript = event.results[i][0].transcript;\r\n          break; // 最初の確定した結果のみを取得\r\n        }\r\n      }\r\n\r\n      // 確定した結果が空でなければSkywayで送信\r\n      if (finalTranscript.trim() !== '') {\r\n        console.log(\"Transcription final result:\", finalTranscript);\r\n        // Skywayのデータストリームで送信\r\n        if (localDataStreamRef.current && me) {\r\n          localDataStreamRef.current.write(finalTranscript);\r\n          console.log(`Sent transcription: \"${finalTranscript}\"`);\r\n          // 自分の画面にも表示\r\n          setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: finalTranscript, isLocal: true }]);\r\n\r\n          // 🌟翻訳処理を追加\r\n          const translated = await translateText(finalTranscript);\r\n          if (translated) {\r\n            console.log(\"Translated text:\", translated);\r\n            // 翻訳結果をSkywayで送信\r\n            localDataStreamRef.current.write(`translate_request:${translated}`);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    // 認識エラー時のハンドラ\r\n    recognition.current.onerror = (event) => {\r\n      console.error(\"Speech recognition error:\", event.error);\r\n      setIsListening(false); // エラー時はリスニング状態を停止\r\n    };\r\n\r\n    // 認識終了時のハンドラ\r\n    recognition.current.onend = () => {\r\n      console.log(\"Speech recognition ended.\");\r\n      // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\r\n      // if (isListening) {\r\n      //   recognition.current.start();\r\n      // }\r\n    };\r\n\r\n    // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\r\n    return () => {\r\n      if (recognition.current) {\r\n        recognition.current.stop();\r\n      }\r\n    };\r\n  }, [me, localDataStreamRef]);\r\n\r\n  /**\r\n   * リモートストリームをDOMに追加するヘルパー関数\r\n   * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\r\n  const attachRemoteStream = (stream, memberId) => {\r\n    if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\r\n      // 既存のビデオ要素があれば削除\r\n      const existingVideo = remoteVideoElements.current.get(memberId);\r\n      if (existingVideo) {\r\n        robotDisplayRef.current.removeChild(existingVideo);\r\n        remoteVideoElements.current.delete(memberId);\r\n      }\r\n\r\n      const video = document.createElement(\"video\");\r\n      video.autoplay = true; // 自動再生\r\n      video.playsInline = true; // インライン再生 (iOSなどで必要)\r\n      video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\r\n      video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\r\n      stream.attach(video); // ストリームをビデオ要素のソースに設定\r\n      robotDisplayRef.current.appendChild(video);\r\n      remoteVideoElements.current.set(memberId, video);\r\n      console.log(`Attached stream from ${memberId} to DOM.`);\r\n    } else {\r\n      console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * データストリームの受信を処理するヘルパー関数\r\n   * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\r\n  const handleDataStream = (stream, memberId) => {\r\n    if (stream instanceof RemoteDataStream) {\r\n      stream.onData.add((data) => {\r\n        console.log(`Received data from ${memberId}:`, data);\r\n        // 受信したメッセージを状態に追加\r\n        setReceivedMessages(prevMessages => [...prevMessages, { senderId: memberId, message: data }]);\r\n\r\n        // \"move_finish\" シグナルをチェック\r\n        if (data === \"move_finish\") {\r\n          console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\r\n          setIsMoveInProgress(false); // モーション終了\r\n        }\r\n\r\n        // AI提案のフォーマットをチェック\r\n        // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\r\n        const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\r\n        const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\r\n\r\n        if (combinedMatch) {\r\n          const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\r\n          const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\r\n\r\n          setAiSuggestions([\r\n            { key: 'ai_assist_1', text: suggestion1Content }, // キーをai_assist_1に修正\r\n            { key: 'ai_assist_2', text: suggestion2Content }  // キーをai_assist_2に修正\r\n          ]);\r\n          console.log(\"Received combined AI suggestions.\");\r\n        } else {\r\n          // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\r\n          const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\r\n          const singleMatch = String(data).match(aiSingleSuggestionRegex);\r\n\r\n          if (singleMatch) {\r\n            const suggestionNumber = parseInt(singleMatch[1], 10);\r\n            const suggestionContent = singleMatch[2];\r\n\r\n            if (suggestionNumber === 1 || suggestionNumber === 2) {\r\n              setAiSuggestions(prevSuggestions => {\r\n                const newSuggestions = [...prevSuggestions];\r\n                newSuggestions[suggestionNumber - 1] = {\r\n                  key: `ai_assist_${suggestionNumber}`, // キーをai_assist_Nに修正\r\n                  text: suggestionContent\r\n                };\r\n                return newSuggestions;\r\n              });\r\n              console.log(`Received single AI suggestion ${suggestionNumber}.`);\r\n            }\r\n          }\r\n        }\r\n\r\n        // 新しい翻訳フォーマットをチェック\r\n        const translateRegex = /^translate_request:(.*)$/;\r\n        const translateMatch = String(data).match(translateRegex);\r\n\r\n        if (translateMatch) {\r\n          const translatedContent = translateMatch[1];\r\n          setTranslatedText(translatedContent); // 状態を更新\r\n          console.log(`Received translated text: ${translatedContent}`);\r\n        } else {\r\n          // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\r\n          // setTranslatedText(\"\");\r\n        }\r\n      });\r\n      console.log(`Listening for data from ${memberId}.`);\r\n    } else {\r\n      console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ルームに参加するハンドラ\r\n   * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n   */\r\n  const handleJoinRoom = async () => {\r\n    if (!skywayContext) {\r\n      console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\r\n      return;\r\n    }\r\n    if (!roomName) {\r\n      console.error(\"Room name is empty. Please enter a room name to join.\");\r\n      return;\r\n    }\r\n    if (skywayRoom && me) {\r\n      console.warn(\"Already in a room. Please leave the current room first.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // 指定されたルーム名でP2Pルームを作成または検索\r\n      const room = await SkyWayRoom.FindOrCreate(skywayContext, {\r\n        type: \"p2p\", // P2Pルームタイプ\r\n        name: roomName,\r\n      });\r\n\r\n      // roomオブジェクトが有効であることを確認\r\n      if (!room) {\r\n        console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\r\n        throw new Error(\"Failed to create or find SkyWayRoom.\");\r\n      }\r\n\r\n      setSkywayRoom(room);\r\n      console.log(`SkyWayRoom '${roomName}' found or created.`);\r\n\r\n      // ルームに参加し、自分のメンバー情報を取得\r\n      const localMember = await room.join();\r\n      // localMemberが有効であることを確認\r\n      if (!localMember) {\r\n        console.error(\"room.join() returned null or undefined localMember.\");\r\n        throw new Error(\"Failed to join the room.\");\r\n      }\r\n      setMe(localMember);\r\n      console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\r\n      // ルームIDと自分のIDをコンソールに表示\r\n      console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\r\n\r\n\r\n      // 自分のカメラとマイクのストリームを作成し、公開\r\n      const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\r\n      localStreamRef.current = video; // ローカルビデオストリームを保存\r\n      await localMember.publish(video);\r\n      const publication_audio = await localMember.publish(audio);\r\n      audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\r\n      setIsMuted(false);\r\n      console.log(\"Published local camera and microphone stream.\");\r\n\r\n      // 自分のデータストリームを作成し、公開\r\n      const dataStream = await SkyWayStreamFactory.createDataStream();\r\n      localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\r\n      await localMember.publish(dataStream);\r\n      console.log(\"Published local data stream.\");\r\n\r\n      // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\r\n      setIsMoveInProgress(false);\r\n\r\n\r\n      // --- 既存のストリームを購読するロジック ---\r\n      // ルーム内の既存の公開ストリームをすべて購読する\r\n      for (const publication of room.publications) {\r\n        // 自分のストリームは購読しない\r\n        if (localMember.id === publication.publisher.id) {\r\n          continue;\r\n        }\r\n        try {\r\n          const { stream } = await localMember.subscribe(publication.id);\r\n          console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\r\n\r\n          if (publication.contentType === 'video' || publication.contentType === 'audio') {\r\n            attachRemoteStream(stream, publication.publisher.id);\r\n          } else if (publication.contentType === 'data') {\r\n            handleDataStream(stream, publication.publisher.id);\r\n          } else {\r\n            console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\r\n          }\r\n        } catch (subscribeError) {\r\n          console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\r\n        }\r\n      }\r\n\r\n      // --- ルームイベントリスナーの設定 ---\r\n\r\n      // メンバーがルームに参加したときのイベント\r\n      if (room.onMemberJoined) {\r\n        room.onMemberJoined.add((e) => {\r\n          console.log(`Member joined: ${e.member.id}`);\r\n        });\r\n      } else {\r\n        console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\r\n      }\r\n\r\n      // メンバーがルームを離脱したときのイベント\r\n      if (room.onMemberLeft) {\r\n        room.onMemberLeft.add((e) => {\r\n          console.log(`Member left: ${e.member.id}`);\r\n          // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\r\n          const videoElement = remoteVideoElements.current.get(e.member.id);\r\n          if (videoElement && robotDisplayRef.current) {\r\n            robotDisplayRef.current.removeChild(videoElement);\r\n            remoteVideoElements.current.delete(e.member.id);\r\n            console.log(`Removed video for member ${e.member.id}`);\r\n          }\r\n          // データストリーム関連のクリーンアップもここに追加可能ですが、\r\n          // onDataリスナーはストリームが閉じられると自動的に停止します。\r\n        });\r\n      } else {\r\n        console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\r\n      }\r\n\r\n      // ストリームが公開されたときのイベント\r\n      if (room.onStreamPublished) {\r\n        room.onStreamPublished.add(async (e) => {\r\n          console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\r\n          // 自分のストリームは購読しない\r\n          if (localMember.id !== e.publication.publisher.id) {\r\n            try {\r\n              // リモートストリームを購読\r\n              const { stream } = await localMember.subscribe(e.publication.id);\r\n              console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\r\n              if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\r\n                attachRemoteStream(stream, e.publication.publisher.id);\r\n              } else if (e.publication.contentType === 'data') {\r\n                handleDataStream(stream, e.publication.publisher.id);\r\n              } else {\r\n                console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\r\n              }\r\n            } catch (subscribeError) {\r\n              console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\r\n            }\r\n          } else {\r\n            console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\r\n      }\r\n\r\n      // ストリームが非公開になったときのイベント\r\n      if (room.onStreamUnpublished) {\r\n        room.onStreamUnpublished.add((e) => {\r\n          console.log(`Stream unpublished by ${e.publication.publisher.id}`);\r\n          // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\r\n          const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\r\n          if (videoElement && robotDisplayRef.current) {\r\n            robotDisplayRef.current.removeChild(videoElement);\r\n            remoteVideoElements.current.delete(e.publication.publisher.id);\r\n            console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to join room:\", error);\r\n      // エラー発生時に状態をリセットして再試行可能にする\r\n      setSkywayRoom(null);\r\n      setMe(null);\r\n      // エラー時に既存のビデオ要素をクリーンアップ\r\n      if (robotDisplayRef.current) {\r\n        Array.from(robotDisplayRef.current.children).forEach(child => {\r\n          if (child.tagName === 'VIDEO') {\r\n            // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n            if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n              child.srcObject.getTracks().forEach(track => track.stop());\r\n              child.srcObject = null;\r\n            }\r\n            child.remove(); // DOMから要素を削除\r\n          }\r\n        });\r\n      }\r\n      remoteVideoElements.current.clear();\r\n      if (localStreamRef.current) {\r\n        // LocalVideoStreamのstop()メソッドを呼び出す\r\n        if (typeof localStreamRef.current.stop === 'function') {\r\n          localStreamRef.current.stop();\r\n          console.log(\"Stopped local media stream during join error cleanup.\");\r\n        } else {\r\n          console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\r\n        }\r\n        localStreamRef.current = null;\r\n      }\r\n      // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n      localDataStreamRef.current = null; // 参照をクリア\r\n      console.log(\"Local data stream reference cleared during join error cleanup.\");\r\n      // ミュート状態もリセット\r\n      setIsMuted(false);\r\n      audioPublicationRef.current = null;\r\n      setIsMoveInProgress(false); // エラー時もモーション状態をリセット\r\n      setTranslatedText(\"\"); // 翻訳テキストをクリア\r\n    }\r\n  };\r\n  /**\r\n   * ルームから退出するハンドラ\r\n   */\r\n  const handleLeaveRoom = async () => {\r\n    if (skywayRoom && me) {\r\n      try {\r\n        // ローカルストリームを停止し、公開を解除\r\n        if (localStreamRef.current) {\r\n          // LocalVideoStreamのstop()メソッドを呼び出す\r\n          if (typeof localStreamRef.current.stop === 'function') {\r\n            localStreamRef.current.stop();\r\n            console.log(\"Stopped local media stream.\");\r\n          } else {\r\n            console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during leave.\");\r\n          }\r\n          localStreamRef.current = null;\r\n        }\r\n        // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n        localDataStreamRef.current = null; // 参照をクリア\r\n        console.log(\"Local data stream reference cleared.\");\r\n        \r\n        // --- 修正箇所: `skywayRoom.close()`の前にルームの破棄処理を追加 ---\r\n        // メンバーがルームを離脱\r\n        await skywayRoom.leave();\r\n        console.log(`Left room '${roomName}'.`);\r\n\r\n        // SkywayRoomインスタンスを破棄\r\n        await skywayRoom.close();\r\n        console.log(`Closed SkyWayRoom '${roomName}'.`);\r\n\r\n        // 状態をリセット\r\n        setSkywayRoom(null);\r\n        setMe(null);\r\n        setReceivedMessages([]);\r\n        setAiSuggestions([null, null]);\r\n        setIsMoveInProgress(false);\r\n        setTranslatedText(\"\");\r\n        \r\n        // リモートビデオ要素を全て削除\r\n        if (robotDisplayRef.current) {\r\n          Array.from(robotDisplayRef.current.children).forEach(child => {\r\n            if (child.tagName === 'VIDEO') {\r\n              // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n              if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n                child.srcObject.getTracks().forEach(track => track.stop());\r\n                child.srcObject = null;\r\n              }\r\n              child.remove(); // DOMから要素を削除\r\n            }\r\n          });\r\n        }\r\n        remoteVideoElements.current.clear();\r\n        \r\n      } catch (error) {\r\n        console.error(\"Failed to leave room:\", error);\r\n      }\r\n    } else {\r\n      console.warn(\"Not in a room. Cannot leave.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ミュート/アンミュートを切り替えるハンドラ\r\n   */\r\n  const handleMute = async () => {\r\n    if (audioPublicationRef.current) {\r\n      if (isMuted) {\r\n        // アンミュート\r\n        await audioPublicationRef.current.unpublish();\r\n        console.log(\"Unmuted microphone.\");\r\n      } else {\r\n        // ミュート\r\n        await audioPublicationRef.current.unpublish();\r\n        console.log(\"Muted microphone.\");\r\n      }\r\n      setIsMuted(!isMuted); // 状態を更新\r\n    }\r\n  };\r\n\r\n  /**\r\n   * AIモードを切り替えるハンドラ\r\n   */\r\n  const handleAiModeToggle = () => {\r\n    setIsAiModeOn(!isAiModeOn);\r\n    console.log(`AI mode is now ${!isAiModeOn ? 'ON' : 'OFF'}`);\r\n  };\r\n\r\n  /**\r\n   * サイドパネルのボタンをクリックしたときのハンドラ\r\n   * @param {string} dataToSend - 送信する文字列（モーションコマンドなど）\r\n   */\r\n  const handleSend = (dataToSend) => {\r\n    if (localDataStreamRef.current && me) {\r\n      if (isMoveInProgress) {\r\n        console.log(\"Motion is already in progress. Please wait.\");\r\n        return; // モーション中は送信を許可しない\r\n      }\r\n      \r\n      // データストリームで送信\r\n      localDataStreamRef.current.write(dataToSend);\r\n      console.log(`Sent data: \"${dataToSend}\"`);\r\n      \r\n      // 自分の画面にも表示\r\n      setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: dataToSend, isLocal: true }]);\r\n      \r\n      // モーションコマンドの場合、進行中フラグを立てる\r\n      // ai_assist:はモーションではないので、isMoveInProgressはtrueにしない\r\n      if (!dataToSend.startsWith(\"ai_assist_\")) {\r\n        setIsMoveInProgress(true);\r\n      } else {\r\n        // AI提案の送信後はAI提案をクリア\r\n        setAiSuggestions([null, null]);\r\n      }\r\n    } else {\r\n      console.error(\"Data stream is not available or not joined a room.\");\r\n    }\r\n  };\r\n  \r\n  // 🌟追加: 音声認識の開始/停止を切り替えるハンドラ\r\n  const handleToggleListening = () => {\r\n    if (isListening) {\r\n      recognition.current.stop();\r\n      setIsListening(false);\r\n      console.log(\"Speech recognition stopped.\");\r\n    } else {\r\n      recognition.current.start();\r\n      setIsListening(true);\r\n      console.log(\"Speech recognition started.\");\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"home-container p-6 flex flex-col h-screen bg-gray-100 font-inter\">\r\n      <header className=\"flex justify-between items-center mb-6\">\r\n        <h1 className=\"text-2xl font-bold text-gray-800\">SkyWay WebRTC App</h1>\r\n        <button\r\n          onClick={handleLogout}\r\n          className=\"bg-red-500 text-white py-2 px-4 rounded-md shadow-md hover:bg-red-600 transition-colors\"\r\n        >\r\n          Logout\r\n        </button>\r\n      </header>\r\n\r\n      {/* メインコンテンツ */}\r\n      <main className=\"flex flex-1 overflow-hidden space-x-6\">\r\n        {/* 左側の操作パネル */}\r\n        <div className=\"flex-none w-1/4 bg-white rounded-lg shadow-lg p-6 flex flex-col\">\r\n          <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">Room Controls</h2>\r\n          <div className=\"mb-4\">\r\n            <input\r\n              type=\"text\"\r\n              value={roomName}\r\n              onChange={(e) => setRoomName(e.target.value)}\r\n              placeholder=\"Enter room name\"\r\n              className=\"w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n              disabled={!!me}\r\n            />\r\n          </div>\r\n          <div className=\"flex space-x-2 mb-4\">\r\n            <button\r\n              onClick={handleJoinRoom}\r\n              className=\"flex-1 bg-green-500 text-white py-2 rounded-md shadow-md hover:bg-green-600 transition-colors disabled:opacity-50\"\r\n              disabled={!skywayContext || !!me}\r\n            >\r\n              Join Room\r\n            </button>\r\n            <button\r\n              onClick={handleLeaveRoom}\r\n              className=\"flex-1 bg-yellow-500 text-white py-2 rounded-md shadow-md hover:bg-yellow-600 transition-colors disabled:opacity-50\"\r\n              disabled={!me}\r\n            >\r\n              Leave Room\r\n            </button>\r\n          </div>\r\n          <hr className=\"my-4 border-gray-200\" />\r\n          <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">Actions</h2>\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            {Object.entries(messages).map(([key, value]) => (\r\n              <button\r\n                key={key}\r\n                onClick={() => handleSend(key)}\r\n                className=\"bg-blue-500 text-white py-2 px-4 rounded-md shadow-md hover:bg-blue-600 transition-colors disabled:opacity-50\"\r\n                disabled={!me || isMoveInProgress}\r\n              >\r\n                {value.japanese}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 中央のビデオとメッセージ表示エリア */}\r\n        <div className=\"flex-1 flex flex-col space-y-6\">\r\n          <div ref={robotDisplayRef} className=\"flex-1 bg-gray-900 rounded-lg shadow-lg overflow-hidden relative\">\r\n            <div className=\"absolute top-4 left-4 z-10 text-white p-2 rounded-md bg-black bg-opacity-50\">\r\n              <p className=\"text-sm\">Room ID: {roomName}</p>\r\n              <p className=\"text-sm\">My ID: {me?.id}</p>\r\n            </div>\r\n            {/* ここにロボットのビデオストリームが表示されます */}\r\n          </div>\r\n          \r\n          {/* 🌟追加: 翻訳されたテキストの表示 */}\r\n          {translatedText && (\r\n            <div className=\"bg-white p-4 rounded-lg shadow-lg flex-none mt-2\">\r\n              <p className=\"text-gray-700 font-semibold\">Translated: <span className=\"font-normal\">{translatedText}</span></p>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"flex-none bg-white rounded-lg shadow-lg p-4 h-48 overflow-y-auto\">\r\n            <h3 className=\"text-lg font-semibold mb-2 text-gray-700\">Messages</h3>\r\n            {receivedMessages.map((msg, index) => (\r\n              <div key={index} className={`mb-2 p-2 rounded-md ${msg.isLocal ? 'bg-blue-100 self-end' : 'bg-gray-100 self-start'}`}>\r\n                <p className=\"text-sm text-gray-800\">\r\n                  <span className=\"font-bold\">{msg.senderId}:</span> {msg.message}\r\n                </p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* AI提案ボタン */}\r\n          {isAiModeOn && aiSuggestions[0] && aiSuggestions[1] && (\r\n            <div className=\"ai-suggestions-container\">\r\n              <button\r\n                onClick={() => handleSend(`ai_assist_1:${aiSuggestions[0].text}`)}\r\n                className=\"ai-suggestion-btn\"\r\n              >\r\n                {aiSuggestions[0].text}\r\n              </button>\r\n              <button\r\n                onClick={() => handleSend(`ai_assist_2:${aiSuggestions[1].text}`)}\r\n                className=\"ai-suggestion-btn\"\r\n              >\r\n                {aiSuggestions[1].text}\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </main>\r\n      <div className=\"bottom-controls\">\r\n        <button\r\n          className={`control-btn ai-btn ${isAiModeOn ? 'active' : ''}`}\r\n          onClick={() => handleAiModeToggle()}\r\n          disabled={!me}\r\n        >\r\n          {isAiModeOn ? 'AIモードOFF' : 'AIモードON'}\r\n        </button>\r\n        <button\r\n          className={`control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`}\r\n          onClick={handleToggleListening}\r\n          disabled={!me || !localDataStreamRef.current}\r\n        >\r\n          {isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'}\r\n        </button>\r\n        <button\r\n          className={`control-btn mic-btn ${isMuted ? 'muted' : ''}`}\r\n          onClick={handleMute}\r\n          id=\"micBtn\"\r\n          disabled={!me || !audioPublicationRef.current}\r\n        >\r\n          {isMuted ? 'マイク ON' : 'マイク OFF'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}