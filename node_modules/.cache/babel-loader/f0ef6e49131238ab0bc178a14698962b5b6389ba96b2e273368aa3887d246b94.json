{"ast":null,"code":"var _jsxFileName = \"C:\\\\banpaku_2025\\\\banpaku\\\\src\\\\home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport './style.css'; // style.cssを再度有効化\nimport { nowInSec, SkyWayAuthToken, SkyWayContext, SkyWayRoom, SkyWayStreamFactory, uuidV4, RemoteDataStream,\n// RemoteDataStreamをインポート\nRemoteVideoStream,\n// RemoteVideoStreamをインポート\nRemoteAudioStream // RemoteAudioStreamをインポート\n} from '@skyway-sdk/room';\n\n/**\r\n * ホーム画面コンポーネント\r\n * @param {object} props - プロパティ\r\n * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home({\n  setIsLoggedIn\n}) {\n  _s();\n  // ルーム名\n  const [roomName, setRoomName] = useState(\"\");\n  // 自分の参加者情報 (ルームに参加すると設定されます)\n  const [me, setMe] = useState(null);\n  // SkyWayコンテキストのインスタンス\n  const [skywayContext, setSkywayContext] = useState(null);\n  // SkyWayルームのインスタンス\n  const [skywayRoom, setSkywayRoom] = useState(null);\n  // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\n  const remoteVideoElements = useRef(new Map());\n  // リモートビデオを表示するDOM要素への参照\n  const robotDisplayRef = useRef(null);\n  // ローカルストリームの参照を保持\n  const localStreamRef = useRef(null);\n  // 受信したメッセージを表示するための状態\n  // src/home.js\n  // eslint-disable-next-line no-unused-vars\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  // 送信したデータストリームの参照を保持\n  const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\n  // マイクの状態を表示するための状態 (ミュート状態を管理)\n  const [isMuted, setIsMuted] = useState(false);\n  // オーディオストリームのPublicationを保持するための参照\n  const audioPublicationRef = useRef(null);\n  // 現在の言語状態 ('japanese' または 'english')\n  const [currentLanguage, setCurrentLanguage] = useState('japanese');\n  // AIモードがONかどうかを管理する状態\n  const [isAiModeOn, setIsAiModeOn] = useState(false);\n  // AIからの提案を保持する状態\n  // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\n  const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\n  // モーションが進行中かどうかを管理する状態\n  const [isMoveInProgress, setIsMoveInProgress] = useState(false);\n\n  // メッセージとモーションの多言語マッピング\n  const messages = useMemo(() => ({\n    hello: {\n      japanese: 'リセット',\n      english: 'Hello'\n    },\n    goodbye: {\n      japanese: '決めポーズ',\n      english: 'Goodbye'\n    },\n    bow: {\n      japanese: 'バイバイ',\n      english: 'Bow'\n    },\n    flap: {\n      japanese: 'YES',\n      english: 'Flap'\n    },\n    lookUp: {\n      japanese: 'NO',\n      english: 'Look up'\n    },\n    lookDown: {\n      japanese: '右手を上げる',\n      english: 'Look down'\n    },\n    lookRight: {\n      japanese: '右手を下げる',\n      english: 'Look right'\n    },\n    lookLeft: {\n      japanese: '左手を上げる',\n      english: 'Left hand up' // Changed from 'Look left' for clarity\n    },\n    nod: {\n      japanese: '左手を下げる',\n      english: 'Left hand down' // Changed from 'Nod' for clarity\n    },\n    tiltHead: {\n      japanese: '上を向く',\n      english: 'Look up' // Changed from 'Tilt head' for clarity\n    },\n    spin: {\n      japanese: '下を向く',\n      english: 'Look down' // Changed from 'Spin' for clarity\n    },\n    jump: {\n      japanese: '右を向く',\n      english: 'Look right' // Changed from 'Jump' for clarity\n    },\n    dance: {\n      japanese: '左を向く',\n      english: 'Look left' // Changed from 'Dance' for clarity\n    },\n    bowDeep: {\n      japanese: 'パタパタ',\n      english: 'Flap arms' // Changed from 'Deep bow' for clarity\n    },\n    doingSomething: {\n      japanese: 'こんにちは',\n      english: 'Hello'\n    },\n    thankYou: {\n      japanese: 'バイバイ',\n      english: 'Goodbye' // Changed from 'Thank you' for clarity\n    },\n    good: {\n      japanese: 'ようこそ',\n      english: 'Welcome' // Changed from 'Good' for clarity\n    },\n    ookini: {\n      japanese: 'ありがとう',\n      english: 'Thank you (Kansai dialect)'\n    },\n    amazing: {\n      japanese: '楽しんでね',\n      english: 'Enjoy' // Changed from 'Amazing' for clarity\n    }\n  }), []);\n\n  /**\r\n   * ログアウトボタンクリック時のハンドラ\r\n   */\n  const handleLogout = () => {\n    setIsLoggedIn(false); // ログイン状態をfalseに設定\n  };\n\n  // SkyWay App ID と Secret Key\n  // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\n  // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\n  const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\n  const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\n\n  // SkyWay認証トークンの生成\n  const token = useMemo(() => {\n    if (appId == null || secretKey == null) return undefined;\n    return new SkyWayAuthToken({\n      jti: uuidV4(),\n      // JWT ID\n      iat: nowInSec(),\n      // 発行時刻\n      exp: nowInSec() + 60 * 60 * 24,\n      // 有効期限 (24時間)\n      version: 3,\n      scope: {\n        appId: appId,\n        rooms: [{\n          name: \"*\",\n          // すべてのルーム名に適用\n          methods: [\"create\", \"close\", \"updateMetadata\"],\n          // ルーム操作の権限\n          member: {\n            name: \"*\",\n            // すべてのメンバーに適用\n            methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\n          }\n        }],\n        turn: {\n          enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\n        }\n      }\n    }).encode(secretKey);\n  }, [appId, secretKey]);\n\n  /**\r\n   * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n   * トークンが利用可能になったときに一度だけ実行されます。\r\n   */\n  useEffect(() => {\n    if (!token) return;\n    let currentContext;\n    const initContext = async () => {\n      try {\n        currentContext = await SkyWayContext.Create(token);\n        setSkywayContext(currentContext);\n        console.log(\"SkyWayContext created successfully.\");\n      } catch (error) {\n        console.error(\"Failed to create SkyWayContext:\", error);\n      }\n    };\n    initContext();\n\n    // コンポーネントのアンマウント時にコンテキストを破棄\n    return () => {\n      if (currentContext) {\n        currentContext.dispose();\n        console.log(\"SkyWayContext disposed.\");\n      }\n    };\n  }, [token]); // tokenが変更されたときにのみ実行\n\n  /**\r\n   * リモートストリームをDOMに追加するヘルパー関数\r\n   * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\n  const attachRemoteStream = (stream, memberId) => {\n    if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\n      // 既存のビデオ要素があれば削除\n      const existingVideo = remoteVideoElements.current.get(memberId);\n      if (existingVideo) {\n        robotDisplayRef.current.removeChild(existingVideo);\n        remoteVideoElements.current.delete(memberId);\n      }\n      const video = document.createElement(\"video\");\n      video.autoplay = true; // 自動再生\n      video.playsInline = true; // インライン再生 (iOSなどで必要)\n      video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\n      video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\n      stream.attach(video); // ストリームをビデオ要素のソースに設定\n      robotDisplayRef.current.appendChild(video);\n      remoteVideoElements.current.set(memberId, video);\n      console.log(`Attached stream from ${memberId} to DOM.`);\n    } else {\n      console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\n    }\n  };\n\n  /**\r\n   * データストリームの受信を処理するヘルパー関数\r\n   * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\n  const handleDataStream = (stream, memberId) => {\n    if (stream instanceof RemoteDataStream) {\n      stream.onData.add(data => {\n        console.log(`Received data from ${memberId}:`, data);\n        // 受信したメッセージを状態に追加\n        setReceivedMessages(prevMessages => [...prevMessages, {\n          senderId: memberId,\n          message: data\n        }]);\n\n        // \"move_finish\" シグナルをチェック\n        if (data === \"move_finish\") {\n          console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\n          setIsMoveInProgress(false); // モーション終了\n        }\n\n        // AI提案のフォーマットをチェック\n        // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\n        const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\n        const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\n        if (combinedMatch) {\n          const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\n          const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\n\n          setAiSuggestions([{\n            key: 'ai_assist_1',\n            text: suggestion1Content\n          },\n          // キーをai_assist_1に修正\n          {\n            key: 'ai_assist_2',\n            text: suggestion2Content\n          } // キーをai_assist_2に修正\n          ]);\n          console.log(\"Received combined AI suggestions.\");\n        } else {\n          // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\n          const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\n          const singleMatch = String(data).match(aiSingleSuggestionRegex);\n          if (singleMatch) {\n            const suggestionNumber = parseInt(singleMatch[1], 10);\n            const suggestionContent = singleMatch[2];\n            if (suggestionNumber === 1 || suggestionNumber === 2) {\n              setAiSuggestions(prevSuggestions => {\n                const newSuggestions = [...prevSuggestions];\n                newSuggestions[suggestionNumber - 1] = {\n                  key: `ai_assist_${suggestionNumber}`,\n                  // キーをai_assist_Nに修正\n                  text: suggestionContent\n                };\n                return newSuggestions;\n              });\n              console.log(`Received single AI suggestion ${suggestionNumber}.`);\n            }\n          }\n        }\n      });\n      console.log(`Listening for data from ${memberId}.`);\n    } else {\n      console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\n    }\n  };\n\n  /**\r\n   * ルームに参加するハンドラ\r\n   * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n   */\n  const handleJoinRoom = async () => {\n    if (!skywayContext) {\n      console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\n      return;\n    }\n    if (!roomName) {\n      console.error(\"Room name is empty. Please enter a room name to join.\");\n      return;\n    }\n    if (skywayRoom && me) {\n      console.warn(\"Already in a room. Please leave the current room first.\");\n      return;\n    }\n    try {\n      // 指定されたルーム名でP2Pルームを作成または検索\n      const room = await SkyWayRoom.FindOrCreate(skywayContext, {\n        type: \"p2p\",\n        // P2Pルームタイプ\n        name: roomName\n      });\n\n      // roomオブジェクトが有効であることを確認\n      if (!room) {\n        console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\n        throw new Error(\"Failed to create or find SkyWayRoom.\");\n      }\n      setSkywayRoom(room);\n      console.log(`SkyWayRoom '${roomName}' found or created.`);\n\n      // ルームに参加し、自分のメンバー情報を取得\n      const localMember = await room.join();\n      // localMemberが有効であることを確認\n      if (!localMember) {\n        console.error(\"room.join() returned null or undefined localMember.\");\n        throw new Error(\"Failed to join the room.\");\n      }\n      setMe(localMember);\n      console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\n      // ルームIDと自分のIDをコンソールに表示\n      console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\n\n      // 自分のカメラとマイクのストリームを作成し、公開\n      const {\n        audio,\n        video\n      } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\n      localStreamRef.current = video; // ローカルビデオストリームを保存\n      await localMember.publish(video);\n      const publication_audio = await localMember.publish(audio);\n      audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\n      setIsMuted(false);\n      console.log(\"Published local camera and microphone stream.\");\n\n      // 自分のデータストリームを作成し、公開\n      const dataStream = await SkyWayStreamFactory.createDataStream();\n      localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\n      await localMember.publish(dataStream);\n      console.log(\"Published local data stream.\");\n\n      // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\n      setIsMoveInProgress(false);\n\n      // --- 既存のストリームを購読するロジック ---\n      // ルーム内の既存の公開ストリームをすべて購読する\n      for (const publication of room.publications) {\n        // 自分のストリームは購読しない\n        if (localMember.id === publication.publisher.id) {\n          continue;\n        }\n        try {\n          const {\n            stream\n          } = await localMember.subscribe(publication.id);\n          console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\n          if (publication.contentType === 'video' || publication.contentType === 'audio') {\n            attachRemoteStream(stream, publication.publisher.id);\n          } else if (publication.contentType === 'data') {\n            handleDataStream(stream, publication.publisher.id);\n          } else {\n            console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\n          }\n        } catch (subscribeError) {\n          console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\n        }\n      }\n\n      // --- ルームイベントリスナーの設定 ---\n\n      // メンバーがルームに参加したときのイベント\n      if (room.onMemberJoined) {\n        room.onMemberJoined.add(e => {\n          console.log(`Member joined: ${e.member.id}`);\n        });\n      } else {\n        console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\n      }\n\n      // メンバーがルームを離脱したときのイベント\n      if (room.onMemberLeft) {\n        room.onMemberLeft.add(e => {\n          console.log(`Member left: ${e.member.id}`);\n          // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\n          const videoElement = remoteVideoElements.current.get(e.member.id);\n          if (videoElement && robotDisplayRef.current) {\n            robotDisplayRef.current.removeChild(videoElement);\n            remoteVideoElements.current.delete(e.member.id);\n            console.log(`Removed video for member ${e.member.id}`);\n          }\n          // データストリーム関連のクリーンアップもここに追加可能ですが、\n          // onDataリスナーはストリームが閉じられると自動的に停止します。\n        });\n      } else {\n        console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\n      }\n\n      // ストリームが公開されたときのイベント\n      if (room.onStreamPublished) {\n        room.onStreamPublished.add(async e => {\n          console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\n          // 自分のストリームは購読しない\n          if (localMember.id !== e.publication.publisher.id) {\n            try {\n              // リモートストリームを購読\n              const {\n                stream\n              } = await localMember.subscribe(e.publication.id);\n              console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\n              if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\n                attachRemoteStream(stream, e.publication.publisher.id);\n              } else if (e.publication.contentType === 'data') {\n                handleDataStream(stream, e.publication.publisher.id);\n              } else {\n                console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\n              }\n            } catch (subscribeError) {\n              console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\n            }\n          } else {\n            console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\n          }\n        });\n      } else {\n        console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\n      }\n\n      // ストリームが非公開になったときのイベント\n      if (room.onStreamUnpublished) {\n        room.onStreamUnpublished.add(e => {\n          console.log(`Stream unpublished by ${e.publication.publisher.id}`);\n          // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\n          const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\n          if (videoElement && robotDisplayRef.current) {\n            robotDisplayRef.current.removeChild(videoElement);\n            remoteVideoElements.current.delete(e.publication.publisher.id);\n            console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\n          }\n        });\n      } else {\n        console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\n      }\n    } catch (error) {\n      console.error(\"Failed to join room:\", error);\n      // エラー発生時に状態をリセットして再試行可能にする\n      setSkywayRoom(null);\n      setMe(null);\n      // エラー時に既存のビデオ要素をクリーンアップ\n      if (robotDisplayRef.current) {\n        Array.from(robotDisplayRef.current.children).forEach(child => {\n          if (child.tagName === 'VIDEO') {\n            // ビデオ要素のsrcObjectをクリアし、トラックを停止\n            if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\n              child.srcObject.getTracks().forEach(track => track.stop());\n              child.srcObject = null;\n            }\n            child.remove(); // DOMから要素を削除\n          }\n        });\n      }\n      remoteVideoElements.current.clear();\n      if (localStreamRef.current) {\n        // LocalVideoStreamのstop()メソッドを呼び出す\n        if (typeof localStreamRef.current.stop === 'function') {\n          localStreamRef.current.stop();\n          console.log(\"Stopped local media stream during join error cleanup.\");\n        } else {\n          console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\n        }\n        localStreamRef.current = null;\n      }\n      // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\n      localDataStreamRef.current = null; // 参照をクリア\n      console.log(\"Local data stream reference cleared during join error cleanup.\");\n\n      // ミュート状態もリセット\n      setIsMuted(false);\n      audioPublicationRef.current = null;\n      setIsMoveInProgress(false); // エラー時もモーション状態をリセット\n    }\n  };\n\n  /**\r\n   * ルームから退出するハンドラ\r\n   */\n  const handleLeaveRoom = async () => {\n    if (skywayRoom && me) {\n      try {\n        // ローカルストリームを停止し、公開を解除\n        if (localStreamRef.current) {\n          // LocalVideoStreamのstop()メソッドを呼び出す\n          if (typeof localStreamRef.current.stop === 'function') {\n            localStreamRef.current.stop();\n            console.log(\"Stopped local media stream.\");\n          } else {\n            console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during leave.\");\n          }\n          localStreamRef.current = null;\n        }\n        // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\n        localDataStreamRef.current = null; // 参照をクリア\n        console.log(\"Local data stream reference cleared.\");\n\n        // オーディオPublicationの参照をクリア\n        audioPublicationRef.current = null;\n        setIsMuted(false); // ミュート状態をリセット\n\n        await me.leave(); // ルームから退出\n        console.log(`Left room '${roomName}'`);\n        // ルーム退出をコンソールに表示\n        console.log(`Left room: ${roomName}`);\n\n        // room.dispose()を使用\n        if (skywayRoom) {\n          await skywayRoom.dispose(); // ルームを閉じる (これはルームの作成者のみが効果的です)\n          console.log(\"SkyWay Room disposed.\");\n        }\n        // SkyWay SDKに関するすべての操作が不要になった場合にcontext.dispose()を呼び出す\n        // このコンポーネントがアンマウントされる際にuseEffectのクリーンアップ関数で処理されるため、ここでは呼び出さない\n      } catch (error) {} finally {\n        // 状態をリセット\n        setMe(null);\n        setSkywayRoom(null);\n        setReceivedMessages([]); // 受信メッセージもクリア\n        // すべてのリモートビデオ要素をDOMから削除\n        if (robotDisplayRef.current) {\n          Array.from(robotDisplayRef.current.children).forEach(child => {\n            if (child.tagName === 'VIDEO') {\n              // ビデオ要素のsrcObjectをクリアし、トラックを停止\n              if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\n                child.srcObject.getTracks().forEach(track => track.stop());\n                child.srcObject = null;\n              }\n              child.remove(); // DOMから要素を削除\n            }\n          });\n        }\n        remoteVideoElements.current.clear();\n        // AIモードもオフにする\n        setIsAiModeOn(false);\n        setAiSuggestions([null, null]); // 提案もクリア\n        setIsMoveInProgress(false); // ルーム退出時もモーション状態をリセット\n      }\n    }\n  };\n\n  /**\r\n   * モーションを操作するボタンを押した時の処理\r\n   * @param {string | object} messageOrKey - 送信するメッセージのキー (messagesオブジェクトのキー) またはAI提案オブジェクト\r\n   */\n  const handleSend = async messageOrKey => {\n    if (me && skywayRoom && localDataStreamRef.current) {\n      try {\n        let messageToSend;\n        let shouldSetMoveInProgress = false; // モーション進行中フラグを制御するための新しい変数\n\n        if (typeof messageOrKey === 'string') {\n          // サイドボタンからの送信の場合、直接メッセージ文字列を使用\n          if (messageOrKey.startsWith(\"template_motion_\")) {\n            messageToSend = messageOrKey;\n            shouldSetMoveInProgress = true; // モーションコマンドの場合のみフラグを立てる\n          } else if (messageOrKey.startsWith(\"template_voice_\")) {\n            messageToSend = messageOrKey;\n            // ボイスコマンドの場合はshouldSetMoveInProgressをtrueにしない\n          } else {\n            var _messages$messageOrKe;\n            // 既存のmessagesオブジェクトからのルックアップ (AI提案以外でキーが渡された場合など)\n            messageToSend = (_messages$messageOrKe = messages[messageOrKey]) === null || _messages$messageOrKe === void 0 ? void 0 : _messages$messageOrKe[currentLanguage];\n          }\n        } else if (typeof messageOrKey === 'object' && messageOrKey.key) {\n          // messageOrKey.text から messageOrKey.key に変更\n          // AI提案ボタンからの送信\n          messageToSend = messageOrKey.key; // 提案のキー（ai_assist_1など）を送信\n          // AI提案の場合はshouldSetMoveInProgressをtrueにしない\n        }\n        if (!messageToSend) {\n          console.warn(`Message to send is empty or not found.`);\n          return;\n        }\n        localDataStreamRef.current.write(messageToSend);\n        console.log(`Sent message: \"${messageToSend}\"`);\n        // 送信したメッセージも自身の画面に表示\n        setReceivedMessages(prevMessages => [...prevMessages, {\n          senderId: me.id,\n          message: messageToSend,\n          isLocal: true\n        }]);\n        setAiSuggestions([null, null]); // 送信したら提案をクリア\n\n        // shouldSetMoveInProgressがtrueの場合のみモーション進行中状態にする\n        if (shouldSetMoveInProgress) {\n          setIsMoveInProgress(true);\n        }\n        // AI提案やボイスコマンドの場合は、isMoveInProgressは変更しない\n        // (以前のモーションが進行中であればそのまま、そうでなければfalseのまま)\n      } catch (error) {\n        console.error(\"Failed to send data:\", error);\n      }\n    } else {\n      console.warn(\"Cannot send message: Not in a room, 'me' object is not available, or data stream is not ready.\");\n    }\n  };\n\n  /**\r\n   * マイクのミュート/ミュート解除を切り替えるハンドラ\r\n   */\n  const handleMute = async () => {\n    console.log(\"start\");\n    if (!audioPublicationRef.current) {\n      console.warn(\"Audio publication not available. Cannot toggle mute.\");\n      return;\n    }\n    try {\n      if (isMuted) {\n        // 現在ミュート状態なら、ミュートを解除\n        await audioPublicationRef.current.enable();\n        console.log(\"Microphone unmuted.\");\n      } else {\n        // 現在ミュート状態でないなら、ミュート\n        await audioPublicationRef.current.disable();\n        console.log(\"Microphone muted.\");\n      }\n      setIsMuted(!isMuted); // ミュート状態をトグル\n    } catch (error) {\n      console.error(\"Failed to toggle microphone mute state:\", error);\n    }\n  };\n\n  // AIモードが変更されたときにシグナルを送信するためのフラグ\n  const isInitialAiModeRender = useRef(true);\n\n  /**\r\n   * AIモードの状態変更を監視し、シグナルを送信するuseEffect\r\n   */\n  useEffect(() => {\n    // 初回レンダリング時はシグナルを送信しない\n    if (isInitialAiModeRender.current) {\n      isInitialAiModeRender.current = false;\n      return;\n    }\n\n    // me オブジェクトとデータストリームが利用可能であることを確認\n    if (!me || !localDataStreamRef.current) {\n      return;\n    }\n    if (isAiModeOn) {\n      // AIモードがONになったら、AIに提案を要求するメッセージを送信\n      localDataStreamRef.current.write(\"ai_assist_on\");\n      console.log(\"Sent AI_MODE_REQUEST_SUGGESTIONS signal.\");\n      setAiSuggestions([null, null]); // 新しいセッションのために提案をクリア\n    } else {\n      // AIモードがOFFになったら提案をクリアし、AIモード終了のシグナルを送信\n      localDataStreamRef.current.write(\"ai_assist_off\");\n      console.log(\"Sent AI_MODE_OFF_SIGNAL.\");\n      setAiSuggestions([null, null]); // 提案をクリア\n    }\n  }, [isAiModeOn, me, localDataStreamRef]); // isAiModeOn, me, localDataStreamRef の変更に反応\n\n  /**\r\n   * 言語を切り替えるハンドラ\r\n   */\n  const handleToggleLanguage = () => {\n    setCurrentLanguage(prevLang => prevLang === 'japanese' ? 'english' : 'japanese');\n  };\n\n  /**\r\n   * AIモードを切り替えるハンドラ\r\n   * この関数はAIモードの状態をトグルするのみで、シグナル送信はuseEffectに任せる\r\n   */\n  const handleAiModeToggle = () => {\n    setIsAiModeOn(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"motion-btn\",\n          disabled: isAiModeOn || isMoveInProgress,\n          children: \"\\u30E2\\u30FC\\u30B7\\u30E7\\u30F3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"robot-status\",\n          children: \"\\u64CD\\u4F5C\\u3057\\u3066\\u3044\\u308B\\u30ED\\u30DC\\u30C3\\u30C8\\uFF1ARX78-myakumyaku\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          className: \"logout-btn\",\n          children: \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"voice-btn\",\n          disabled: isAiModeOn || isMoveInProgress,\n          children: \"\\u30DC\\u30A4\\u30B9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-panel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-panel-content\",\n          children: Object.keys(messages).slice(0, 14).map(key =>\n          /*#__PURE__*/\n          // 左側のボタン数を調整\n          _jsxDEV(\"button\", {\n            // 左側のボタンは \"template_motion_〇〇\" 形式で送信\n            onClick: () => handleSend(`template_motion_${messages[key].japanese}`),\n            className: \"side-btn\",\n            disabled: isAiModeOn || !me || isMoveInProgress // AIモード中、未参加、モーション中は無効化\n            ,\n            children: [messages[key].japanese, \" \"]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"room-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"\\u30EB\\u30FC\\u30E0\\u540D\\u3092\\u5165\\u529B\",\n            value: roomName,\n            onChange: e => setRoomName(e.target.value),\n            className: \"room-input\",\n            disabled: !!me // ルーム参加中は入力不可にする\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 13\n          }, this), !me ?\n          /*#__PURE__*/\n          // ルームに参加していない場合\n          _jsxDEV(\"button\", {\n            onClick: handleJoinRoom,\n            className: \"join-room-btn\",\n            disabled: !skywayContext || !roomName,\n            children: \"\\u30EB\\u30FC\\u30E0\\u306B\\u53C2\\u52A0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 15\n          }, this) :\n          /*#__PURE__*/\n          // ルームに参加している場合\n          _jsxDEV(\"button\", {\n            onClick: handleLeaveRoom,\n            className: \"leave-room-btn\",\n            children: \"\\u30EB\\u30FC\\u30E0\\u3092\\u9000\\u51FA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"robot-display\",\n          ref: robotDisplayRef,\n          children: (aiSuggestions[0] || aiSuggestions[1]) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ai-suggestions\",\n            children: [aiSuggestions[0] && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSend(aiSuggestions[0]),\n              className: \"ai-suggestion-btn\",\n              disabled: isMoveInProgress // モーション中は無効化\n              ,\n              children: aiSuggestions[0].text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 751,\n              columnNumber: 19\n            }, this), aiSuggestions[1] && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleSend(aiSuggestions[1]),\n              className: \"ai-suggestion-btn\",\n              disabled: isMoveInProgress // モーション中は無効化\n              ,\n              children: aiSuggestions[1].text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-panel right\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-panel-content\",\n          children: Object.keys(messages).slice(14).map(key =>\n          /*#__PURE__*/\n          // 右側のボタン数を調整\n          _jsxDEV(\"button\", {\n            // 右側のボタンは \"template_voice_〇〇\" 形式で送信\n            onClick: () => handleSend(`template_voice_${messages[key].japanese}`),\n            className: \"side-btn\",\n            disabled: isAiModeOn || !me || isMoveInProgress // AIモード中、未参加、モーション中は無効化\n            ,\n            children: [messages[key].japanese, \" \"]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 773,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 772,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn ai-btn ${isAiModeOn ? 'ai-mode-on' : ''}`,\n        onClick: handleAiModeToggle,\n        disabled: !me // ルームに参加していない場合は無効\n        ,\n        children: [\"\\uD83D\\uDD01 \\u30EA\\u30BB\\u30C3\\u30C8 \", isAiModeOn ? 'ON' : 'OFF']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn ai-btn ${isAiModeOn ? 'ai-mode-on' : ''}`,\n        onClick: handleAiModeToggle,\n        disabled: !me // ルームに参加していない場合は無効\n        ,\n        children: [\"\\uD83E\\uDD16 AI\\u30E2\\u30FC\\u30C9 \", isAiModeOn ? 'ON' : 'OFF']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 797,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn mic-btn ${isMuted ? 'muted' : ''}` // ミュート状態に応じてクラスを追加\n        ,\n        onClick: handleMute,\n        id: \"micBtn\",\n        disabled: !me || !audioPublicationRef.current || isAiModeOn // ルームに参加していない、またはオーディオが公開されていない、AIモード中は無効\n        ,\n        children: [isMuted ? '🔇 マイクミュート' : '🎤 マイクON', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 804,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"control-btn manual-btn\",\n        id: \"manualBtn\",\n        disabled: isAiModeOn || isMoveInProgress,\n        children: \"\\uD83D\\uDCCB \\u30DE\\u30CB\\u30E5\\u30A2\\u30EB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"control-btn greeting-btn\",\n        id: \"languageBtn\",\n        onClick: handleToggleLanguage // 言語切り替えハンドラを設定\n        ,\n        disabled: isAiModeOn || isMoveInProgress // AIモード中、モーション中は無効化\n        ,\n        children: [\"\\uD83D\\uDC4B \", currentLanguage === 'japanese' ? 'にほんご' : 'English', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 815,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 694,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"3qRmzvhDIcQrUiGoYzn35J4FEGs=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","nowInSec","SkyWayAuthToken","SkyWayContext","SkyWayRoom","SkyWayStreamFactory","uuidV4","RemoteDataStream","RemoteVideoStream","RemoteAudioStream","jsxDEV","_jsxDEV","Home","setIsLoggedIn","_s","roomName","setRoomName","me","setMe","skywayContext","setSkywayContext","skywayRoom","setSkywayRoom","remoteVideoElements","Map","robotDisplayRef","localStreamRef","receivedMessages","setReceivedMessages","localDataStreamRef","isMuted","setIsMuted","audioPublicationRef","currentLanguage","setCurrentLanguage","isAiModeOn","setIsAiModeOn","aiSuggestions","setAiSuggestions","isMoveInProgress","setIsMoveInProgress","messages","hello","japanese","english","goodbye","bow","flap","lookUp","lookDown","lookRight","lookLeft","nod","tiltHead","spin","jump","dance","bowDeep","doingSomething","thankYou","good","ookini","amazing","handleLogout","appId","secretKey","token","undefined","jti","iat","exp","version","scope","rooms","name","methods","member","turn","enabled","encode","currentContext","initContext","Create","console","log","error","dispose","attachRemoteStream","stream","memberId","current","existingVideo","get","removeChild","delete","video","document","createElement","autoplay","playsInline","className","dataset","attach","appendChild","set","warn","handleDataStream","onData","add","data","prevMessages","senderId","message","aiCombinedSuggestionRegex","combinedMatch","String","match","suggestion1Content","suggestion2Content","key","text","aiSingleSuggestionRegex","singleMatch","suggestionNumber","parseInt","suggestionContent","prevSuggestions","newSuggestions","handleJoinRoom","room","FindOrCreate","type","Error","localMember","join","id","audio","createMicrophoneAudioAndCameraStream","publish","publication_audio","dataStream","createDataStream","publication","publications","publisher","subscribe","contentType","subscribeError","onMemberJoined","e","onMemberLeft","videoElement","onStreamPublished","onStreamUnpublished","Array","from","children","forEach","child","tagName","srcObject","getTracks","track","stop","remove","clear","handleLeaveRoom","leave","handleSend","messageOrKey","messageToSend","shouldSetMoveInProgress","startsWith","_messages$messageOrKe","write","isLocal","handleMute","enable","disable","isInitialAiModeRender","handleToggleLanguage","prevLang","handleAiModeToggle","prev","disabled","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Object","keys","slice","map","placeholder","value","onChange","target","ref","_c","$RefreshReg$"],"sources":["C:/banpaku_2025/banpaku/src/home.js"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport './style.css'; // style.cssを再度有効化\r\nimport {\r\n  nowInSec,\r\n  SkyWayAuthToken,\r\n  SkyWayContext,\r\n  SkyWayRoom,\r\n  SkyWayStreamFactory,\r\n  uuidV4,\r\n  RemoteDataStream, // RemoteDataStreamをインポート\r\n  RemoteVideoStream, // RemoteVideoStreamをインポート\r\n  RemoteAudioStream, // RemoteAudioStreamをインポート\r\n} from '@skyway-sdk/room';\r\n\r\n/**\r\n * ホーム画面コンポーネント\r\n * @param {object} props - プロパティ\r\n * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n */\r\nfunction Home({ setIsLoggedIn }) {\r\n  // ルーム名\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  // 自分の参加者情報 (ルームに参加すると設定されます)\r\n  const [me, setMe] = useState(null);\r\n  // SkyWayコンテキストのインスタンス\r\n  const [skywayContext, setSkywayContext] = useState(null);\r\n  // SkyWayルームのインスタンス\r\n  const [skywayRoom, setSkywayRoom] = useState(null);\r\n  // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\r\n  const remoteVideoElements = useRef(new Map());\r\n  // リモートビデオを表示するDOM要素への参照\r\n  const robotDisplayRef = useRef(null);\r\n  // ローカルストリームの参照を保持\r\n  const localStreamRef = useRef(null);\r\n  // 受信したメッセージを表示するための状態\r\n  // src/home.js\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [receivedMessages, setReceivedMessages] = useState([]);\r\n  // 送信したデータストリームの参照を保持\r\n  const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\r\n  // マイクの状態を表示するための状態 (ミュート状態を管理)\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  // オーディオストリームのPublicationを保持するための参照\r\n  const audioPublicationRef = useRef(null);\r\n  // 現在の言語状態 ('japanese' または 'english')\r\n  const [currentLanguage, setCurrentLanguage] = useState('japanese');\r\n  // AIモードがONかどうかを管理する状態\r\n  const [isAiModeOn, setIsAiModeOn] = useState(false);\r\n  // AIからの提案を保持する状態\r\n  // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\r\n  const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\r\n  // モーションが進行中かどうかを管理する状態\r\n  const [isMoveInProgress, setIsMoveInProgress] = useState(false);\r\n\r\n\r\n  // メッセージとモーションの多言語マッピング\r\n  const messages = useMemo(() => ({\r\n    hello: {\r\n      japanese: 'リセット',\r\n      english: 'Hello'\r\n    },\r\n    goodbye: {\r\n      japanese: '決めポーズ',\r\n      english: 'Goodbye'\r\n    },\r\n    bow: {\r\n      japanese: 'バイバイ',\r\n      english: 'Bow'\r\n    },\r\n    flap: {\r\n      japanese: 'YES',\r\n      english: 'Flap'\r\n    },\r\n    lookUp: {\r\n      japanese: 'NO',\r\n      english: 'Look up'\r\n    },\r\n    lookDown: {\r\n      japanese: '右手を上げる',\r\n      english: 'Look down'\r\n    },\r\n    lookRight: {\r\n      japanese: '右手を下げる',\r\n      english: 'Look right'\r\n    },\r\n    lookLeft: {\r\n      japanese: '左手を上げる',\r\n      english: 'Left hand up' // Changed from 'Look left' for clarity\r\n    },\r\n    nod: {\r\n      japanese: '左手を下げる',\r\n      english: 'Left hand down' // Changed from 'Nod' for clarity\r\n    },\r\n    tiltHead: {\r\n      japanese: '上を向く',\r\n      english: 'Look up' // Changed from 'Tilt head' for clarity\r\n    },\r\n    spin: {\r\n      japanese: '下を向く',\r\n      english: 'Look down' // Changed from 'Spin' for clarity\r\n    },\r\n    jump: {\r\n      japanese: '右を向く',\r\n      english: 'Look right' // Changed from 'Jump' for clarity\r\n    },\r\n    dance: {\r\n      japanese: '左を向く',\r\n      english: 'Look left' // Changed from 'Dance' for clarity\r\n    },\r\n    bowDeep: {\r\n      japanese: 'パタパタ',\r\n      english: 'Flap arms' // Changed from 'Deep bow' for clarity\r\n    },\r\n    doingSomething: {\r\n      japanese: 'こんにちは',\r\n      english: 'Hello'\r\n    },\r\n    thankYou: {\r\n      japanese: 'バイバイ',\r\n      english: 'Goodbye' // Changed from 'Thank you' for clarity\r\n    },\r\n    good: {\r\n      japanese: 'ようこそ',\r\n      english: 'Welcome' // Changed from 'Good' for clarity\r\n    },\r\n    ookini: {\r\n      japanese: 'ありがとう',\r\n      english: 'Thank you (Kansai dialect)'\r\n    },\r\n    amazing: {\r\n      japanese: '楽しんでね',\r\n      english: 'Enjoy' // Changed from 'Amazing' for clarity\r\n    }\r\n  }), []);\r\n\r\n\r\n  /**\r\n   * ログアウトボタンクリック時のハンドラ\r\n   */\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false); // ログイン状態をfalseに設定\r\n  };\r\n\r\n  // SkyWay App ID と Secret Key\r\n  // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\r\n  // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\r\n  const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\r\n  const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\r\n\r\n  // SkyWay認証トークンの生成\r\n  const token = useMemo(() => {\r\n    if (appId == null || secretKey == null) return undefined;\r\n\r\n    return new SkyWayAuthToken({\r\n      jti: uuidV4(), // JWT ID\r\n      iat: nowInSec(), // 発行時刻\r\n      exp: nowInSec() + 60 * 60 * 24, // 有効期限 (24時間)\r\n      version: 3,\r\n      scope: {\r\n        appId: appId,\r\n        rooms: [\r\n          {\r\n            name: \"*\", // すべてのルーム名に適用\r\n            methods: [\"create\", \"close\", \"updateMetadata\"], // ルーム操作の権限\r\n            member: {\r\n              name: \"*\", // すべてのメンバーに適用\r\n              methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\r\n            }\r\n          }],\r\n        turn: {\r\n          enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\r\n        }\r\n      }\r\n    }).encode(secretKey);\r\n\r\n  }, [appId, secretKey]);\r\n\r\n  /**\r\n   * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n   * トークンが利用可能になったときに一度だけ実行されます。\r\n   */\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    let currentContext;\r\n    const initContext = async () => {\r\n      try {\r\n        currentContext = await SkyWayContext.Create(token);\r\n        setSkywayContext(currentContext);\r\n        console.log(\"SkyWayContext created successfully.\");\r\n      } catch (error) {\r\n        console.error(\"Failed to create SkyWayContext:\", error);\r\n      }\r\n    };\r\n\r\n    initContext();\r\n\r\n    // コンポーネントのアンマウント時にコンテキストを破棄\r\n    return () => {\r\n      if (currentContext) {\r\n        currentContext.dispose();\r\n        console.log(\"SkyWayContext disposed.\");\r\n      }\r\n    };\r\n  }, [token]); // tokenが変更されたときにのみ実行\r\n\r\n  /**\r\n   * リモートストリームをDOMに追加するヘルパー関数\r\n   * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\r\n  const attachRemoteStream = (stream, memberId) => {\r\n    if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\r\n      // 既存のビデオ要素があれば削除\r\n      const existingVideo = remoteVideoElements.current.get(memberId);\r\n      if (existingVideo) {\r\n        robotDisplayRef.current.removeChild(existingVideo);\r\n        remoteVideoElements.current.delete(memberId);\r\n      }\r\n\r\n      const video = document.createElement(\"video\");\r\n      video.autoplay = true; // 自動再生\r\n      video.playsInline = true; // インライン再生 (iOSなどで必要)\r\n      video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\r\n      video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\r\n      stream.attach(video); // ストリームをビデオ要素のソースに設定\r\n      robotDisplayRef.current.appendChild(video);\r\n      remoteVideoElements.current.set(memberId, video);\r\n      console.log(`Attached stream from ${memberId} to DOM.`);\r\n    } else {\r\n      console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * データストリームの受信を処理するヘルパー関数\r\n   * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\r\n  const handleDataStream = (stream, memberId) => {\r\n    if (stream instanceof RemoteDataStream) {\r\n      stream.onData.add((data) => {\r\n        console.log(`Received data from ${memberId}:`, data);\r\n        // 受信したメッセージを状態に追加\r\n        setReceivedMessages(prevMessages => [...prevMessages, { senderId: memberId, message: data }]);\r\n\r\n        // \"move_finish\" シグナルをチェック\r\n        if (data === \"move_finish\") {\r\n          console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\r\n          setIsMoveInProgress(false); // モーション終了\r\n        }\r\n\r\n        // AI提案のフォーマットをチェック\r\n        // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\r\n        const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\r\n        const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\r\n\r\n        if (combinedMatch) {\r\n          const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\r\n          const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\r\n\r\n          setAiSuggestions([\r\n            { key: 'ai_assist_1', text: suggestion1Content }, // キーをai_assist_1に修正\r\n            { key: 'ai_assist_2', text: suggestion2Content }  // キーをai_assist_2に修正\r\n          ]);\r\n          console.log(\"Received combined AI suggestions.\");\r\n        } else {\r\n          // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\r\n          const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\r\n          const singleMatch = String(data).match(aiSingleSuggestionRegex);\r\n\r\n          if (singleMatch) {\r\n            const suggestionNumber = parseInt(singleMatch[1], 10);\r\n            const suggestionContent = singleMatch[2];\r\n\r\n            if (suggestionNumber === 1 || suggestionNumber === 2) {\r\n              setAiSuggestions(prevSuggestions => {\r\n                const newSuggestions = [...prevSuggestions];\r\n                newSuggestions[suggestionNumber - 1] = {\r\n                  key: `ai_assist_${suggestionNumber}`, // キーをai_assist_Nに修正\r\n                  text: suggestionContent\r\n                };\r\n                return newSuggestions;\r\n              });\r\n              console.log(`Received single AI suggestion ${suggestionNumber}.`);\r\n            }\r\n          }\r\n        }\r\n      });\r\n      console.log(`Listening for data from ${memberId}.`);\r\n    } else {\r\n      console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ルームに参加するハンドラ\r\n   * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n   */\r\n  const handleJoinRoom = async () => {\r\n    if (!skywayContext) {\r\n      console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\r\n      return;\r\n    }\r\n    if (!roomName) {\r\n      console.error(\"Room name is empty. Please enter a room name to join.\");\r\n      return;\r\n    }\r\n    if (skywayRoom && me) {\r\n      console.warn(\"Already in a room. Please leave the current room first.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // 指定されたルーム名でP2Pルームを作成または検索\r\n      const room = await SkyWayRoom.FindOrCreate(skywayContext, {\r\n        type: \"p2p\", // P2Pルームタイプ\r\n        name: roomName,\r\n      });\r\n\r\n      // roomオブジェクトが有効であることを確認\r\n      if (!room) {\r\n        console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\r\n        throw new Error(\"Failed to create or find SkyWayRoom.\");\r\n      }\r\n\r\n      setSkywayRoom(room);\r\n      console.log(`SkyWayRoom '${roomName}' found or created.`);\r\n\r\n      // ルームに参加し、自分のメンバー情報を取得\r\n      const localMember = await room.join();\r\n      // localMemberが有効であることを確認\r\n      if (!localMember) {\r\n        console.error(\"room.join() returned null or undefined localMember.\");\r\n        throw new Error(\"Failed to join the room.\");\r\n      }\r\n      setMe(localMember);\r\n      console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\r\n      // ルームIDと自分のIDをコンソールに表示\r\n      console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\r\n\r\n\r\n      // 自分のカメラとマイクのストリームを作成し、公開\r\n      const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\r\n      localStreamRef.current = video; // ローカルビデオストリームを保存\r\n      await localMember.publish(video);\r\n      const publication_audio = await localMember.publish(audio);\r\n      audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\r\n      setIsMuted(false);\r\n      console.log(\"Published local camera and microphone stream.\");\r\n\r\n      // 自分のデータストリームを作成し、公開\r\n      const dataStream = await SkyWayStreamFactory.createDataStream();\r\n      localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\r\n      await localMember.publish(dataStream);\r\n      console.log(\"Published local data stream.\");\r\n\r\n      // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\r\n      setIsMoveInProgress(false);\r\n\r\n\r\n      // --- 既存のストリームを購読するロジック ---\r\n      // ルーム内の既存の公開ストリームをすべて購読する\r\n      for (const publication of room.publications) {\r\n        // 自分のストリームは購読しない\r\n        if (localMember.id === publication.publisher.id) {\r\n          continue;\r\n        }\r\n        try {\r\n          const { stream } = await localMember.subscribe(publication.id);\r\n          console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\r\n\r\n          if (publication.contentType === 'video' || publication.contentType === 'audio') {\r\n            attachRemoteStream(stream, publication.publisher.id);\r\n          } else if (publication.contentType === 'data') {\r\n            handleDataStream(stream, publication.publisher.id);\r\n          } else {\r\n            console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\r\n          }\r\n        } catch (subscribeError) {\r\n          console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\r\n        }\r\n      }\r\n\r\n      // --- ルームイベントリスナーの設定 ---\r\n\r\n      // メンバーがルームに参加したときのイベント\r\n      if (room.onMemberJoined) {\r\n        room.onMemberJoined.add((e) => {\r\n          console.log(`Member joined: ${e.member.id}`);\r\n        });\r\n      } else {\r\n        console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\r\n      }\r\n\r\n      // メンバーがルームを離脱したときのイベント\r\n      if (room.onMemberLeft) {\r\n        room.onMemberLeft.add((e) => {\r\n          console.log(`Member left: ${e.member.id}`);\r\n          // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\r\n          const videoElement = remoteVideoElements.current.get(e.member.id);\r\n          if (videoElement && robotDisplayRef.current) {\r\n            robotDisplayRef.current.removeChild(videoElement);\r\n            remoteVideoElements.current.delete(e.member.id);\r\n            console.log(`Removed video for member ${e.member.id}`);\r\n          }\r\n          // データストリーム関連のクリーンアップもここに追加可能ですが、\r\n          // onDataリスナーはストリームが閉じられると自動的に停止します。\r\n        });\r\n      } else {\r\n        console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\r\n      }\r\n\r\n      // ストリームが公開されたときのイベント\r\n      if (room.onStreamPublished) {\r\n        room.onStreamPublished.add(async (e) => {\r\n          console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\r\n          // 自分のストリームは購読しない\r\n          if (localMember.id !== e.publication.publisher.id) {\r\n            try {\r\n              // リモートストリームを購読\r\n              const { stream } = await localMember.subscribe(e.publication.id);\r\n              console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\r\n\r\n              if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\r\n                attachRemoteStream(stream, e.publication.publisher.id);\r\n              } else if (e.publication.contentType === 'data') {\r\n                handleDataStream(stream, e.publication.publisher.id);\r\n              } else {\r\n                console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\r\n              }\r\n            } catch (subscribeError) {\r\n              console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\r\n            }\r\n          } else {\r\n            console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\r\n      }\r\n\r\n      // ストリームが非公開になったときのイベント\r\n      if (room.onStreamUnpublished) {\r\n        room.onStreamUnpublished.add((e) => {\r\n          console.log(`Stream unpublished by ${e.publication.publisher.id}`);\r\n          // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\r\n          const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\r\n          if (videoElement && robotDisplayRef.current) {\r\n            robotDisplayRef.current.removeChild(videoElement);\r\n            remoteVideoElements.current.delete(e.publication.publisher.id);\r\n            console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error(\"Failed to join room:\", error);\r\n      // エラー発生時に状態をリセットして再試行可能にする\r\n      setSkywayRoom(null);\r\n      setMe(null);\r\n      // エラー時に既存のビデオ要素をクリーンアップ\r\n      if (robotDisplayRef.current) {\r\n        Array.from(robotDisplayRef.current.children).forEach(child => {\r\n          if (child.tagName === 'VIDEO') {\r\n            // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n            if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n              child.srcObject.getTracks().forEach(track => track.stop());\r\n              child.srcObject = null;\r\n            }\r\n            child.remove(); // DOMから要素を削除\r\n          }\r\n        });\r\n      }\r\n      remoteVideoElements.current.clear();\r\n      if (localStreamRef.current) {\r\n        // LocalVideoStreamのstop()メソッドを呼び出す\r\n        if (typeof localStreamRef.current.stop === 'function') {\r\n          localStreamRef.current.stop();\r\n          console.log(\"Stopped local media stream during join error cleanup.\");\r\n        } else {\r\n          console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\r\n        }\r\n        localStreamRef.current = null;\r\n      }\r\n      // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n      localDataStreamRef.current = null; // 参照をクリア\r\n      console.log(\"Local data stream reference cleared during join error cleanup.\");\r\n\r\n      // ミュート状態もリセット\r\n      setIsMuted(false);\r\n      audioPublicationRef.current = null;\r\n      setIsMoveInProgress(false); // エラー時もモーション状態をリセット\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ルームから退出するハンドラ\r\n   */\r\n  const handleLeaveRoom = async () => {\r\n    if (skywayRoom && me) {\r\n      try {\r\n        // ローカルストリームを停止し、公開を解除\r\n        if (localStreamRef.current) {\r\n          // LocalVideoStreamのstop()メソッドを呼び出す\r\n          if (typeof localStreamRef.current.stop === 'function') {\r\n            localStreamRef.current.stop();\r\n            console.log(\"Stopped local media stream.\");\r\n          } else {\r\n            console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during leave.\");\r\n          }\r\n          localStreamRef.current = null;\r\n        }\r\n        // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n        localDataStreamRef.current = null; // 参照をクリア\r\n        console.log(\"Local data stream reference cleared.\");\r\n\r\n        // オーディオPublicationの参照をクリア\r\n        audioPublicationRef.current = null;\r\n        setIsMuted(false); // ミュート状態をリセット\r\n\r\n        await me.leave(); // ルームから退出\r\n        console.log(`Left room '${roomName}'`);\r\n        // ルーム退出をコンソールに表示\r\n        console.log(`Left room: ${roomName}`);\r\n\r\n\r\n        // room.dispose()を使用\r\n        if (skywayRoom) {\r\n          await skywayRoom.dispose(); // ルームを閉じる (これはルームの作成者のみが効果的です)\r\n          console.log(\"SkyWay Room disposed.\");\r\n        }\r\n        // SkyWay SDKに関するすべての操作が不要になった場合にcontext.dispose()を呼び出す\r\n        // このコンポーネントがアンマウントされる際にuseEffectのクリーンアップ関数で処理されるため、ここでは呼び出さない\r\n\r\n      } catch (error) {\r\n      } finally {\r\n        // 状態をリセット\r\n        setMe(null);\r\n        setSkywayRoom(null);\r\n        setReceivedMessages([]); // 受信メッセージもクリア\r\n        // すべてのリモートビデオ要素をDOMから削除\r\n        if (robotDisplayRef.current) {\r\n          Array.from(robotDisplayRef.current.children).forEach(child => {\r\n            if (child.tagName === 'VIDEO') {\r\n              // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n              if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n                child.srcObject.getTracks().forEach(track => track.stop());\r\n                child.srcObject = null;\r\n              }\r\n              child.remove(); // DOMから要素を削除\r\n            }\r\n          });\r\n        }\r\n        remoteVideoElements.current.clear();\r\n        // AIモードもオフにする\r\n        setIsAiModeOn(false);\r\n        setAiSuggestions([null, null]); // 提案もクリア\r\n        setIsMoveInProgress(false); // ルーム退出時もモーション状態をリセット\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * モーションを操作するボタンを押した時の処理\r\n   * @param {string | object} messageOrKey - 送信するメッセージのキー (messagesオブジェクトのキー) またはAI提案オブジェクト\r\n   */\r\n  const handleSend = async (messageOrKey) => {\r\n    if (me && skywayRoom && localDataStreamRef.current) {\r\n      try {\r\n        let messageToSend;\r\n        let shouldSetMoveInProgress = false; // モーション進行中フラグを制御するための新しい変数\r\n\r\n        if (typeof messageOrKey === 'string') {\r\n          // サイドボタンからの送信の場合、直接メッセージ文字列を使用\r\n          if (messageOrKey.startsWith(\"template_motion_\")) {\r\n            messageToSend = messageOrKey;\r\n            shouldSetMoveInProgress = true; // モーションコマンドの場合のみフラグを立てる\r\n          } else if (messageOrKey.startsWith(\"template_voice_\")) {\r\n            messageToSend = messageOrKey;\r\n            // ボイスコマンドの場合はshouldSetMoveInProgressをtrueにしない\r\n          } else {\r\n            // 既存のmessagesオブジェクトからのルックアップ (AI提案以外でキーが渡された場合など)\r\n            messageToSend = messages[messageOrKey]?.[currentLanguage];\r\n          }\r\n        } else if (typeof messageOrKey === 'object' && messageOrKey.key) { // messageOrKey.text から messageOrKey.key に変更\r\n          // AI提案ボタンからの送信\r\n          messageToSend = messageOrKey.key; // 提案のキー（ai_assist_1など）を送信\r\n          // AI提案の場合はshouldSetMoveInProgressをtrueにしない\r\n        }\r\n\r\n        if (!messageToSend) {\r\n          console.warn(`Message to send is empty or not found.`);\r\n          return;\r\n        }\r\n\r\n        localDataStreamRef.current.write(messageToSend);\r\n        console.log(`Sent message: \"${messageToSend}\"`);\r\n        // 送信したメッセージも自身の画面に表示\r\n        setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: messageToSend, isLocal: true }]);\r\n        setAiSuggestions([null, null]); // 送信したら提案をクリア\r\n\r\n        // shouldSetMoveInProgressがtrueの場合のみモーション進行中状態にする\r\n        if (shouldSetMoveInProgress) {\r\n          setIsMoveInProgress(true);\r\n        }\r\n        // AI提案やボイスコマンドの場合は、isMoveInProgressは変更しない\r\n        // (以前のモーションが進行中であればそのまま、そうでなければfalseのまま)\r\n\r\n      } catch (error) {\r\n        console.error(\"Failed to send data:\", error);\r\n      }\r\n    } else {\r\n      console.warn(\"Cannot send message: Not in a room, 'me' object is not available, or data stream is not ready.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * マイクのミュート/ミュート解除を切り替えるハンドラ\r\n   */\r\n  const handleMute = async () => {\r\n    console.log(\"start\");\r\n    if (!audioPublicationRef.current) {\r\n      console.warn(\"Audio publication not available. Cannot toggle mute.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (isMuted) {\r\n        // 現在ミュート状態なら、ミュートを解除\r\n        await audioPublicationRef.current.enable();\r\n        console.log(\"Microphone unmuted.\");\r\n      } else {\r\n        // 現在ミュート状態でないなら、ミュート\r\n        await audioPublicationRef.current.disable();\r\n        console.log(\"Microphone muted.\");\r\n      }\r\n      setIsMuted(!isMuted); // ミュート状態をトグル\r\n    } catch (error) {\r\n      console.error(\"Failed to toggle microphone mute state:\", error);\r\n    }\r\n  };\r\n\r\n  // AIモードが変更されたときにシグナルを送信するためのフラグ\r\n  const isInitialAiModeRender = useRef(true);\r\n\r\n  /**\r\n   * AIモードの状態変更を監視し、シグナルを送信するuseEffect\r\n   */\r\n  useEffect(() => {\r\n    // 初回レンダリング時はシグナルを送信しない\r\n    if (isInitialAiModeRender.current) {\r\n      isInitialAiModeRender.current = false;\r\n      return;\r\n    }\r\n\r\n    // me オブジェクトとデータストリームが利用可能であることを確認\r\n    if (!me || !localDataStreamRef.current) {\r\n      return;\r\n    }\r\n\r\n    if (isAiModeOn) {\r\n      // AIモードがONになったら、AIに提案を要求するメッセージを送信\r\n      localDataStreamRef.current.write(\"ai_assist_on\");\r\n      console.log(\"Sent AI_MODE_REQUEST_SUGGESTIONS signal.\");\r\n      setAiSuggestions([null, null]); // 新しいセッションのために提案をクリア\r\n    } else {\r\n      // AIモードがOFFになったら提案をクリアし、AIモード終了のシグナルを送信\r\n      localDataStreamRef.current.write(\"ai_assist_off\");\r\n      console.log(\"Sent AI_MODE_OFF_SIGNAL.\");\r\n      setAiSuggestions([null, null]); // 提案をクリア\r\n    }\r\n  }, [isAiModeOn, me, localDataStreamRef]); // isAiModeOn, me, localDataStreamRef の変更に反応\r\n\r\n  /**\r\n   * 言語を切り替えるハンドラ\r\n   */\r\n  const handleToggleLanguage = () => {\r\n    setCurrentLanguage(prevLang => (prevLang === 'japanese' ? 'english' : 'japanese'));\r\n  };\r\n\r\n  /**\r\n   * AIモードを切り替えるハンドラ\r\n   * この関数はAIモードの状態をトグルするのみで、シグナル送信はuseEffectに任せる\r\n   */\r\n  const handleAiModeToggle = () => {\r\n    setIsAiModeOn(prev => !prev);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"header\">\r\n        <div className=\"header-left\">\r\n          <button className=\"motion-btn\" disabled={isAiModeOn || isMoveInProgress}>モーション</button>\r\n          <span className=\"robot-status\">\r\n            操作しているロボット：RX78-myakumyaku\r\n          </span>\r\n        </div>\r\n        <div className=\"header-right\">\r\n          <button onClick={handleLogout} className=\"logout-btn\">ログアウト</button>\r\n          <button className=\"voice-btn\" disabled={isAiModeOn || isMoveInProgress}>ボイス</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"main-container\">\r\n        <div className=\"side-panel\">\r\n          <div className=\"side-panel-content\">\r\n            {Object.keys(messages).slice(0, 14).map(key => ( // 左側のボタン数を調整\r\n              <button\r\n                key={key}\r\n                // 左側のボタンは \"template_motion_〇〇\" 形式で送信\r\n                onClick={() => handleSend(`template_motion_${messages[key].japanese}`)}\r\n                className=\"side-btn\"\r\n                disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\r\n              >\r\n                {messages[key].japanese} {/* 常に日本語表示 */}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"main-area\">\r\n          <div className=\"room-controls\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"ルーム名を入力\"\r\n              value={roomName}\r\n              onChange={(e) => setRoomName(e.target.value)}\r\n              className=\"room-input\"\r\n              disabled={!!me} // ルーム参加中は入力不可にする\r\n            />\r\n            {!me ? ( // ルームに参加していない場合\r\n              <button onClick={handleJoinRoom} className=\"join-room-btn\" disabled={!skywayContext || !roomName}>\r\n                ルームに参加\r\n              </button>\r\n            ) : ( // ルームに参加している場合\r\n              <button onClick={handleLeaveRoom} className=\"leave-room-btn\">\r\n                ルームを退出\r\n              </button>\r\n            )}\r\n          </div>\r\n          <div className=\"robot-display\" ref={robotDisplayRef}>\r\n            {/* リモートのビデオストリームがここに動的に追加されます */}\r\n            {/* ルーム情報はコンソールに表示されるため、ここでは表示しません */}\r\n\r\n            {/* AIからの提案表示 */}\r\n            {(aiSuggestions[0] || aiSuggestions[1]) && (\r\n              <div className=\"ai-suggestions\">\r\n                {aiSuggestions[0] && (\r\n                  <button\r\n                    onClick={() => handleSend(aiSuggestions[0])}\r\n                    className=\"ai-suggestion-btn\"\r\n                    disabled={isMoveInProgress} // モーション中は無効化\r\n                  >\r\n                    {aiSuggestions[0].text}\r\n                  </button>\r\n                )}\r\n                {aiSuggestions[1] && (\r\n                  <button\r\n                    onClick={() => handleSend(aiSuggestions[1])}\r\n                    className=\"ai-suggestion-btn\"\r\n                    disabled={isMoveInProgress} // モーション中は無効化\r\n                  >\r\n                    {aiSuggestions[1].text}\r\n                  </button>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"side-panel right\">\r\n          <div className=\"side-panel-content\">\r\n            {Object.keys(messages).slice(14).map(key => ( // 右側のボタン数を調整\r\n              <button\r\n                key={key}\r\n                // 右側のボタンは \"template_voice_〇〇\" 形式で送信\r\n                onClick={() => handleSend(`template_voice_${messages[key].japanese}`)}\r\n                className=\"side-btn\"\r\n                disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\r\n              >\r\n                {messages[key].japanese} {/* 常に日本語表示 */}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-controls\">\r\n        <button\r\n          className={`control-btn ai-btn ${isAiModeOn ? 'ai-mode-on' : ''}`}\r\n          onClick={handleAiModeToggle}\r\n          disabled={!me} // ルームに参加していない場合は無効\r\n        >\r\n          🔁 リセット {isAiModeOn ? 'ON' : 'OFF'}\r\n        </button>\r\n\r\n        <button\r\n          className={`control-btn ai-btn ${isAiModeOn ? 'ai-mode-on' : ''}`}\r\n          onClick={handleAiModeToggle}\r\n          disabled={!me} // ルームに参加していない場合は無効\r\n        >\r\n          🤖 AIモード {isAiModeOn ? 'ON' : 'OFF'}\r\n        </button>\r\n        <button\r\n          className={`control-btn mic-btn ${isMuted ? 'muted' : ''}`} // ミュート状態に応じてクラスを追加\r\n          onClick={handleMute}\r\n          id=\"micBtn\"\r\n          disabled={!me || !audioPublicationRef.current || isAiModeOn} // ルームに参加していない、またはオーディオが公開されていない、AIモード中は無効\r\n        >\r\n          {isMuted ? '🔇 マイクミュート' : '🎤 マイクON'} {/* ミュート状態に応じてアイコンとテキストを変更 */}\r\n        </button>\r\n        <button className=\"control-btn manual-btn\" id=\"manualBtn\" disabled={isAiModeOn || isMoveInProgress}>\r\n          📋 マニュアル\r\n        </button>\r\n        <button\r\n          className=\"control-btn greeting-btn\"\r\n          id=\"languageBtn\"\r\n          onClick={handleToggleLanguage} // 言語切り替えハンドラを設定\r\n          disabled={isAiModeOn || isMoveInProgress} // AIモード中、モーション中は無効化\r\n        >\r\n          👋 {currentLanguage === 'japanese' ? 'にほんご' : 'English'} {/* 現在の言語に応じてボタンのテキストを変更 */}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}