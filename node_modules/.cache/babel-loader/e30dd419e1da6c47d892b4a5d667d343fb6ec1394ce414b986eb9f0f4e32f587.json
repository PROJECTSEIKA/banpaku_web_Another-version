{"ast":null,"code":"var _jsxFileName = \"C:\\\\banpaku_2025\\\\banpaku_web_Another-version\\\\src\\\\home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport './style.css'; // style.cssを再度有効化\nimport { nowInSec, SkyWayAuthToken, SkyWayContext, SkyWayRoom, SkyWayStreamFactory, uuidV4, RemoteDataStream,\n// RemoteDataStreamをインポート\nRemoteVideoStream,\n// RemoteVideoStreamをインポート\nRemoteAudioStream // RemoteAudioStreamをインポート\n} from '@skyway-sdk/room';\n\n/**\r\n * ホーム画面コンポーネント\r\n * @param {object} props - プロパティ\r\n * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home({\n  setIsLoggedIn\n}) {\n  _s();\n  // ルーム名\n  const [roomName, setRoomName] = useState(\"\");\n  // 自分の参加者情報 (ルームに参加すると設定されます)\n  const [me, setMe] = useState(null);\n  // SkyWayコンテキストのインスタンス\n  const [skywayContext, setSkywayContext] = useState(null);\n  // SkyWayルームのインスタンス\n  const [skywayRoom, setSkywayRoom] = useState(null);\n  // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\n  const remoteVideoElements = useRef(new Map());\n  // リモートビデオを表示するDOM要素への参照\n  const robotDisplayRef = useRef(null);\n  // ローカルストリームの参照を保持\n  const localStreamRef = useRef(null);\n  // 受信したメッセージを表示するための状態\n  // src/home.js\n  // eslint-disable-next-line no-unused-vars\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  // 送信したデータストリームの参照を保持\n  const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\n  // マイクの状態を表示するための状態 (ミュート状態を管理)\n  const [isMuted, setIsMuted] = useState(false);\n  // オーディオストリームのPublicationを保持するための参照\n  const audioPublicationRef = useRef(null);\n  // AIモードがONかどうかを管理する状態\n  const [isAiModeOn, setIsAiModeOn] = useState(false);\n  // AIからの提案を保持する状態\n  // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\n  const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\n  // モーションが進行中かどうかを管理する状態\n  const [isMoveInProgress, setIsMoveInProgress] = useState(false);\n  // 翻訳されたテキストを保持する状態を追加\n  const [translatedText, setTranslatedText] = useState(\"\");\n  // 🌟追加: 音声認識が実行中かどうかを管理する状態\n  const [isListening, setIsListening] = useState(false);\n  // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\n  const recognition = useRef(null);\n  const URL = \"https://translation.googleapis.com/language/translate/v2?key=\";\n  const apiKey = 'AIzaSyBBk7P0P0XCyh3p0Ov7jiP9d1n02wYk_AY';\n  // メッセージとモーションの多言語マッピング\n  const messages = useMemo(() => ({\n    hello: {\n      japanese: 'リセット',\n      english: 'Hello'\n    },\n    goodbye: {\n      japanese: '決めポーズ',\n      english: 'Goodbye'\n    },\n    bow: {\n      japanese: 'バイバイ',\n      english: 'Bow'\n    },\n    flap: {\n      japanese: 'YES',\n      english: 'Flap'\n    },\n    lookUp: {\n      japanese: 'NO',\n      english: 'Look up'\n    },\n    lookDown: {\n      japanese: '右手を上げる',\n      english: 'Look down'\n    },\n    lookRight: {\n      japanese: '右手を下げる',\n      english: 'Look right'\n    },\n    lookLeft: {\n      japanese: '左手を上げる',\n      english: 'Left hand up' // Changed from 'Look left' for clarity\n    },\n    nod: {\n      japanese: '左手を下げる',\n      english: 'Left hand down' // Changed from 'Nod' for clarity\n    },\n    tiltHead: {\n      japanese: '上を向く',\n      english: 'Look up' // Changed from 'Tilt head' for clarity\n    },\n    spin: {\n      japanese: '下を向く',\n      english: 'Look down' // Changed from 'Spin' for clarity\n    },\n    jump: {\n      japanese: '右を向く',\n      english: 'Look right' // Changed from 'Jump' for clarity\n    },\n    dance: {\n      japanese: '左を向く',\n      english: 'Look left' // Changed from 'Dance' for clarity\n    },\n    bowDeep: {\n      japanese: 'パタパタ',\n      english: 'Flap arms' // Changed from 'Deep bow' for clarity\n    },\n    doingSomething: {\n      japanese: 'こんにちは',\n      english: 'Hello'\n    },\n    thankYou: {\n      japanese: 'バイバイ',\n      english: 'Goodbye' // Changed from 'Thank you' for clarity\n    },\n    good: {\n      japanese: 'ようこそ',\n      english: 'Welcome' // Changed from 'Good' for clarity\n    },\n    ookini: {\n      japanese: 'ありがとう',\n      english: 'Thank you (Kansai dialect)'\n    },\n    amazing: {\n      japanese: '楽しんでね',\n      english: 'Enjoy' // Changed from 'Amazing' for clarity\n    }\n  }), []);\n\n  /**\r\n   * ログアウトボタンクリック時のハンドラ\r\n   */\n  const handleLogout = () => {\n    setIsLoggedIn(false); // ログイン状態をfalseに設定\n  };\n\n  // SkyWay App ID と Secret Key\n  // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\n  // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\n  const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\n  const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\n\n  // SkyWay認証トークンの生成\n  const token = useMemo(() => {\n    if (appId == null || secretKey == null) return undefined;\n    return new SkyWayAuthToken({\n      jti: uuidV4(),\n      // JWT ID\n      iat: nowInSec(),\n      // 発行時刻\n      exp: nowInSec() + 60 * 60 * 24,\n      // 有効期限 (24時間)\n      version: 3,\n      scope: {\n        appId: appId,\n        rooms: [{\n          name: \"*\",\n          // すべてのルーム名に適用\n          methods: [\"create\", \"close\", \"updateMetadata\"],\n          // ルーム操作の権限\n          member: {\n            name: \"*\",\n            // すべてのメンバーに適用\n            methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\n          }\n        }],\n        turn: {\n          enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\n        }\n      }\n    }).encode(secretKey);\n  }, [appId, secretKey]);\n\n  /**\r\n   * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n   * トークンが利用可能になったときに一度だけ実行されます。\r\n   */\n  useEffect(() => {\n    if (!token) return;\n    let currentContext;\n    const initContext = async () => {\n      try {\n        currentContext = await SkyWayContext.Create(token);\n        setSkywayContext(currentContext);\n        console.log(\"SkyWayContext created successfully.\");\n      } catch (error) {\n        console.error(\"Failed to create SkyWayContext:\", error);\n      }\n    };\n    initContext();\n\n    // コンポーネントのアンマウント時にコンテキストを破棄\n    return () => {\n      if (currentContext) {\n        currentContext.dispose();\n        console.log(\"SkyWayContext disposed.\");\n      }\n    };\n  }, [token]); // tokenが変更されたときにのみ実行\n\n  // 🌟追加: SpeechRecognition APIの初期化\n  useEffect(() => {\n    // ブラウザがSpeechRecognitionに対応しているか確認\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      console.error(\"SpeechRecognition API is not supported by this browser.\");\n      return;\n    }\n\n    // SpeechRecognitionオブジェクトを初期化\n    recognition.current = new SpeechRecognition();\n    recognition.current.continuous = true; // 連続的な認識\n    recognition.current.interimResults = true; // 中間結果を返す\n    recognition.current.lang = 'ja-JP'; // 日本語を指定\n\n    // 音声認識の結果を処理するハンドラ\n    recognition.current.onresult = event => {\n      let finalTranscript = '';\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\n        if (event.results[i].isFinal) {\n          finalTranscript = event.results[i][0].transcript;\n          break; // 最初の確定した結果のみを取得\n        }\n      }\n\n      // 確定した結果が空でなければSkywayで送信\n      if (finalTranscript.trim() !== '') {\n        console.log(\"Transcription final result:\", finalTranscript);\n        // Skywayのデータストリームで送信\n        if (localDataStreamRef.current && me) {\n          //const result = `translate_data_web:${finalTranscript}`;\n          const URL2 = URL + apiKey + \"&q=\" + encodeURI(finalTranscript) + \"&source=\" + 'ja' + \"&target=\" + 'en'; // eslint-disable-line\n          let xhr = new XMLHttpRequest();\n          xhr.open('POST', [URL2], false);\n          xhr.send();\n          if (xhr.status === 200) {\n            const res = JSON.parse(xhr.responseText);\n            const res2 = res[\"data\"][\"translations\"][0][\"translatedText\"];\n            const res3 = `translate_data_web:${res2}`;\n            localDataStreamRef.current.write(res3);\n          }\n          console.log(`Sent transcription: \"${finalTranscript}\"`);\n          // 自分の画面にも表示\n          setReceivedMessages(prevMessages => [...prevMessages, {\n            senderId: me.id,\n            message: finalTranscript,\n            isLocal: true\n          }]);\n        }\n      }\n    };\n\n    // 認識エラー時のハンドラ\n    recognition.current.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n      setIsListening(false); // エラー時はリスニング状態を停止\n    };\n\n    // 認識終了時のハンドラ\n    recognition.current.onend = () => {\n      console.log(\"Speech recognition ended.\");\n      // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\n      // if (isListening) {\n      //   recognition.current.start();\n      // }\n    };\n\n    // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\n    return () => {\n      if (recognition.current) {\n        recognition.current.stop();\n      }\n    };\n  }, [me, localDataStreamRef]);\n\n  /**\r\n   * リモートストリームをDOMに追加するヘルパー関数\r\n   * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\n  const attachRemoteStream = (stream, memberId) => {\n    if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\n      // 既存のビデオ要素があれば削除\n      const existingVideo = remoteVideoElements.current.get(memberId);\n      if (existingVideo) {\n        robotDisplayRef.current.removeChild(existingVideo);\n        remoteVideoElements.current.delete(memberId);\n      }\n      const video = document.createElement(\"video\");\n      video.autoplay = true; // 自動再生\n      video.playsInline = true; // インライン再生 (iOSなどで必要)\n      video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\n      video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\n      stream.attach(video); // ストリームをビデオ要素のソースに設定\n      robotDisplayRef.current.appendChild(video);\n      remoteVideoElements.current.set(memberId, video);\n      console.log(`Attached stream from ${memberId} to DOM.`);\n    } else {\n      console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\n    }\n  };\n\n  /**\r\n   * データストリームの受信を処理するヘルパー関数\r\n   * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\n  const handleDataStream = (stream, memberId) => {\n    if (stream instanceof RemoteDataStream) {\n      stream.onData.add(data => {\n        console.log(`Received data from ${memberId}:`, data);\n        // 受信したメッセージを状態に追加\n        setReceivedMessages(prevMessages => [...prevMessages, {\n          senderId: memberId,\n          message: data\n        }]);\n\n        // \"move_finish\" シグナルをチェック\n        if (data === \"move_finish\") {\n          console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\n          setIsMoveInProgress(false); // モーション終了\n        }\n        // AI提案のフォーマットをチェック\n        // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\n        const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\n        const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\n        if (combinedMatch) {\n          const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\n          const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\n          console.log(suggestion1Content);\n          console.log(suggestion2Content);\n          setAiSuggestions([{\n            key: 'ai_assist_1',\n            text: suggestion1Content\n          },\n          // キーをai_assist_1に修正\n          {\n            key: 'ai_assist_2',\n            text: suggestion2Content\n          } // キーをai_assist_2に修正\n          ]);\n          console.log(\"Received combined AI suggestions.\");\n        } else {\n          // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\n          const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\n          const singleMatch = String(data).match(aiSingleSuggestionRegex);\n          if (singleMatch) {\n            const suggestionNumber = parseInt(singleMatch[1], 10);\n            const suggestionContent = singleMatch[2];\n            if (suggestionNumber === 1 || suggestionNumber === 2) {\n              setAiSuggestions(prevSuggestions => {\n                const newSuggestions = [...prevSuggestions];\n                newSuggestions[suggestionNumber - 1] = {\n                  key: `ai_assist_${suggestionNumber}`,\n                  // キーをai_assist_Nに修正\n                  text: suggestionContent\n                };\n                return newSuggestions;\n              });\n              console.log(`Received single AI suggestion ${suggestionNumber}.`);\n            }\n          }\n        }\n        // 新しい翻訳フォーマットをチェック\n        const translateRegex = /^translate_request:(.*)$/;\n        const translateMatch = String(data).match(translateRegex);\n        if (translateMatch) {\n          const translatedContent = translateMatch[1];\n          setTranslatedText(translatedContent); // 状態を更新\n          console.log(`Received translated text: ${translatedContent}`);\n        } else {\n          // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\n          // setTranslatedText(\"\");\n        }\n      });\n      console.log(`Listening for data from ${memberId}.`);\n    } else {\n      console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\n    }\n  };\n\n  /**\r\n   * ルームに参加するハンドラ\r\n   * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n   */\n  const handleJoinRoom = async () => {\n    if (!skywayContext) {\n      console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\n      return;\n    }\n    if (!roomName) {\n      console.error(\"Room name is empty. Please enter a room name to join.\");\n      return;\n    }\n    if (skywayRoom && me) {\n      console.warn(\"Already in a room. Please leave the current room first.\");\n      return;\n    }\n    try {\n      // 指定されたルーム名でP2Pルームを作成または検索\n      const room = await SkyWayRoom.FindOrCreate(skywayContext, {\n        type: \"p2p\",\n        // P2Pルームタイプ\n        name: roomName\n      });\n      // roomオブジェクトが有効であることを確認\n      if (!room) {\n        console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\n        throw new Error(\"Failed to create or find SkyWayRoom.\");\n      }\n      setSkywayRoom(room);\n      console.log(`SkyWayRoom '${roomName}' found or created.`);\n      // ルームに参加し、自分のメンバー情報を取得\n      const localMember = await room.join();\n      // localMemberが有効であることを確認\n      if (!localMember) {\n        console.error(\"room.join() returned null or undefined localMember.\");\n        throw new Error(\"Failed to join the room.\");\n      }\n      setMe(localMember);\n      console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\n      // ルームIDと自分のIDをコンソールに表示\n      console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\n      // 自分のカメラとマイクのストリームを作成し、公開\n      const {\n        audio,\n        video\n      } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\n      localStreamRef.current = video; // ローカルビデオストリームを保存\n      await localMember.publish(video);\n      const publication_audio = await localMember.publish(audio);\n      audioPublicationRef.current = publication_audio; // オーディオの Publication を保持\n      // データストリームを作成し、公開\n      const localDataStream = await SkyWayStreamFactory.createDataStream();\n      localDataStreamRef.current = localDataStream; // データストリームの参照を保持\n      await localMember.publish(localDataStream);\n      // ルーム内の既存のメンバーのストリームを購読\n      room.members.forEach(member => {\n        if (member.id !== localMember.id) {\n          member.publications.forEach(publication => {\n            if (publication.contentType === \"video\" || publication.contentType === \"audio\") {\n              const {\n                stream\n              } = publication.subscribe();\n              attachRemoteStream(stream, member.id);\n            } else if (publication.contentType === \"data\") {\n              const {\n                stream\n              } = publication.subscribe();\n              handleDataStream(stream, member.id);\n            }\n          });\n        }\n      });\n\n      // 新しいメンバーがルームに参加したときのイベントリスナー\n      room.onMemberJoined.add(e => {\n        console.log(`Member joined: ${e.member.id}`);\n        e.member.onStreamPublished.add(async e => {\n          console.log(`Stream published by ${e.publication.publisher.id}`);\n          if (e.publication.contentType === \"video\" || e.publication.contentType === \"audio\") {\n            const {\n              stream\n            } = await e.publication.subscribe();\n            attachRemoteStream(stream, e.publication.publisher.id);\n          } else if (e.publication.contentType === \"data\") {\n            const {\n              stream\n            } = await e.publication.subscribe();\n            handleDataStream(stream, e.publication.publisher.id);\n          }\n        });\n      });\n\n      // メンバーがルームから離脱したときのイベントリスナー\n      room.onMemberLeft.add(e => {\n        console.log(`Member left: ${e.member.id}`);\n        const videoElement = remoteVideoElements.current.get(e.member.id);\n        if (videoElement) {\n          robotDisplayRef.current.removeChild(videoElement);\n          remoteVideoElements.current.delete(e.member.id);\n        }\n        // ルームに誰もいなくなったらAIモードをリセット\n        if (room.members.length <= 1) {\n          setIsAiModeOn(false);\n        }\n      });\n      // Publicationの停止（unpublish）を検知するイベントリスナー\n      room.onPublicationUnpublished.add(e => {\n        console.log(`Publication unpublished: ${e.publication.id} by ${e.publication.publisher.id}`);\n        const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\n        if (videoElement) {\n          robotDisplayRef.current.removeChild(videoElement);\n          remoteVideoElements.current.delete(e.publication.publisher.id);\n        }\n      });\n      console.log(\"Joined room and set up listeners successfully.\");\n    } catch (error) {\n      console.error(\"Failed to join room:\", error);\n      // エラーが発生した場合、状態をクリア\n      setSkywayRoom(null);\n      setMe(null);\n    }\n  };\n\n  /**\r\n   * ルームから退出するハンドラ\r\n   */\n  const handleLeaveRoom = () => {\n    if (skywayRoom) {\n      skywayRoom.close(); // ルームを閉じる\n      setSkywayRoom(null);\n      setMe(null);\n      localStreamRef.current = null;\n      localDataStreamRef.current = null;\n      // すべてのリモートビデオ要素を削除\n      remoteVideoElements.current.forEach(video => {\n        if (robotDisplayRef.current) {\n          robotDisplayRef.current.removeChild(video);\n        }\n      });\n      remoteVideoElements.current.clear();\n      setIsAiModeOn(false); // 退出時にAIモードをリセット\n      console.log(\"Left the room and cleaned up.\");\n    }\n  };\n\n  /**\r\n   * データストリームでメッセージを送信するハンドラ\r\n   * @param {string} message - 送信するメッセージ\r\n   */\n  const handleSend = message => {\n    if (localDataStreamRef.current) {\n      localDataStreamRef.current.write(message);\n      console.log(`Sent message: \"${message}\"`);\n      // 自分の画面にも表示\n      setReceivedMessages(prevMessages => [...prevMessages, {\n        senderId: me.id,\n        message: message,\n        isLocal: true\n      }]);\n      // モーションコマンド送信後、モーション完了シグナルを待つためボタンを無効化\n      if (message.startsWith('template_move')) {\n        setIsMoveInProgress(true);\n      } else if (message.startsWith('ai_assist')) {\n        // AIアシストボタンが押された場合、提案をリセット\n        setAiSuggestions([null, null]);\n        setIsAiModeOn(false); // AIモードを自動でOFFにする\n      }\n    }\n  };\n\n  /**\r\n   * マイクのミュート/ミュート解除を切り替えるハンドラ\r\n   */\n  const handleMute = async () => {\n    if (!audioPublicationRef.current) {\n      console.error(\"Audio publication not found.\");\n      return;\n    }\n    const isMutedNow = !isMuted;\n    try {\n      if (isMutedNow) {\n        await audioPublicationRef.current.unpublish();\n        console.log(\"Audio stream unpublished (muted).\");\n      } else {\n        const {\n          audio\n        } = await SkyWayStreamFactory.createMicrophoneAudioStream();\n        const newPublication = await me.publish(audio);\n        audioPublicationRef.current = newPublication;\n        console.log(\"Audio stream published (unmuted).\");\n      }\n      setIsMuted(isMutedNow);\n    } catch (error) {\n      console.error(\"Failed to toggle mute state:\", error);\n    }\n  };\n\n  /**\r\n   * AIモードのON/OFFを切り替えるハンドラ\r\n   */\n  const handleAiModeToggle = () => {\n    const newAiMode = !isAiModeOn;\n    setIsAiModeOn(newAiMode);\n    if (!newAiMode) {\n      // AIモードをOFFにする場合、提案をリセット\n      setAiSuggestions([null, null]);\n      // AIモードOFFのシグナルを送信\n      if (localDataStreamRef.current) {\n        localDataStreamRef.current.write('ai_mode_off');\n      }\n    } else {\n      // AIモードをONにする場合、シグナルを送信\n      if (localDataStreamRef.current) {\n        localDataStreamRef.current.write('ai_mode_on');\n      }\n    }\n  };\n\n  // 🌟追加: 音声認識の開始/停止を切り替えるハンドラ\n  const handleToggleListening = () => {\n    if (isListening) {\n      recognition.current.stop();\n      setIsListening(false);\n      console.log(\"Stopped listening.\");\n    } else {\n      recognition.current.start();\n      setIsListening(true);\n      console.log(\"Started listening.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left\",\n        children: aiSuggestions.map((suggestion, index) => suggestion && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ai-btn\",\n          onClick: () => handleSend(suggestion.key),\n          children: suggestion.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-controls-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"room-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Room Name\",\n            value: roomName,\n            onChange: e => setRoomName(e.target.value),\n            className: \"room-name-input\",\n            disabled: !!me // 参加済みの場合は無効\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 13\n          }, this), me ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLeaveRoom,\n            className: \"join-btn\",\n            children: \"\\u30EB\\u30FC\\u30E0\\u304B\\u3089\\u9000\\u51FA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleJoinRoom,\n            className: \"join-btn\",\n            children: \"\\u30EB\\u30FC\\u30E0\\u306B\\u53C2\\u52A0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"robot-status\",\n          children: me ? \"接続中\" : \"未接続\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogout,\n          className: \"logout-btn\",\n          children: \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-area\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: robotDisplayRef,\n          className: \"robot-display\",\n          children: me && /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: localStreamRef,\n            autoPlay: true,\n            playsInline: true,\n            className: \"local-video object-cover\",\n            muted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 20\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-panel-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"panel-title\",\n            children: \"\\u30E2\\u30FC\\u30B7\\u30E7\\u30F3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 13\n          }, this), Object.keys(messages).map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n            // 送信するデータは \"template_move_〇〇\" 形式で送信\n            onClick: () => handleSend(`template_move_${messages[key].english}`),\n            className: \"side-btn\"\n            // AIモード中、未参加、モーション中は無効化\n            ,\n            disabled: isAiModeOn || !me || isMoveInProgress,\n            children: messages[key].japanese\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-panel-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"panel-title\",\n            children: \"\\u97F3\\u58F0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 13\n          }, this), Object.keys(messages).map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n            // 送信するデータは \"template_voice_〇〇\" 形式で送信\n            onClick: () => handleSend(`template_voice_${messages[key].japanese}`),\n            className: \"side-btn\",\n            disabled: isAiModeOn || !me || isMoveInProgress // AIモード中、未参加、モーション中は無効化\n            ,\n            children: [messages[key].japanese, \" \"]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn ai-btn`,\n        onClick: () => handleAiModeToggle(),\n        disabled: !me // ルームに参加していない場合は無効\n        ,\n        children: isAiModeOn ? 'リセット' : 'AIモードON'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`,\n        onClick: handleToggleListening,\n        disabled: !me || !localDataStreamRef.current || isAiModeOn // ルーム未参加、データストリーム未準備、AIモード中は無効\n        ,\n        children: isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn mic-btn ${isMuted ? 'muted' : ''}` // ミュート状態に応じてクラスを追加\n        ,\n        onClick: handleMute,\n        id: \"micBtn\",\n        disabled: !me || isAiModeOn // ルームに参加していない場合は無効\n        ,\n        children: isMuted ? 'マイクON' : 'マイクOFF'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 594,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"NWNpkQGfcah/H07YYObfVlDojho=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","nowInSec","SkyWayAuthToken","SkyWayContext","SkyWayRoom","SkyWayStreamFactory","uuidV4","RemoteDataStream","RemoteVideoStream","RemoteAudioStream","jsxDEV","_jsxDEV","Home","setIsLoggedIn","_s","roomName","setRoomName","me","setMe","skywayContext","setSkywayContext","skywayRoom","setSkywayRoom","remoteVideoElements","Map","robotDisplayRef","localStreamRef","receivedMessages","setReceivedMessages","localDataStreamRef","isMuted","setIsMuted","audioPublicationRef","isAiModeOn","setIsAiModeOn","aiSuggestions","setAiSuggestions","isMoveInProgress","setIsMoveInProgress","translatedText","setTranslatedText","isListening","setIsListening","recognition","URL","apiKey","messages","hello","japanese","english","goodbye","bow","flap","lookUp","lookDown","lookRight","lookLeft","nod","tiltHead","spin","jump","dance","bowDeep","doingSomething","thankYou","good","ookini","amazing","handleLogout","appId","secretKey","token","undefined","jti","iat","exp","version","scope","rooms","name","methods","member","turn","enabled","encode","currentContext","initContext","Create","console","log","error","dispose","SpeechRecognition","window","webkitSpeechRecognition","current","continuous","interimResults","lang","onresult","event","finalTranscript","i","resultIndex","results","length","isFinal","transcript","trim","URL2","encodeURI","xhr","XMLHttpRequest","open","send","status","res","JSON","parse","responseText","res2","res3","write","prevMessages","senderId","id","message","isLocal","onerror","onend","stop","attachRemoteStream","stream","memberId","existingVideo","get","removeChild","delete","video","document","createElement","autoplay","playsInline","className","dataset","attach","appendChild","set","warn","handleDataStream","onData","add","data","aiCombinedSuggestionRegex","combinedMatch","String","match","suggestion1Content","suggestion2Content","key","text","aiSingleSuggestionRegex","singleMatch","suggestionNumber","parseInt","suggestionContent","prevSuggestions","newSuggestions","translateRegex","translateMatch","translatedContent","handleJoinRoom","room","FindOrCreate","type","Error","localMember","join","audio","createMicrophoneAudioAndCameraStream","publish","publication_audio","localDataStream","createDataStream","members","forEach","publications","publication","contentType","subscribe","onMemberJoined","e","onStreamPublished","publisher","onMemberLeft","videoElement","onPublicationUnpublished","handleLeaveRoom","close","clear","handleSend","startsWith","handleMute","isMutedNow","unpublish","createMicrophoneAudioStream","newPublication","handleAiModeToggle","newAiMode","handleToggleListening","start","children","map","suggestion","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","target","disabled","ref","autoPlay","muted","Object","keys","_c","$RefreshReg$"],"sources":["C:/banpaku_2025/banpaku_web_Another-version/src/home.js"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport './style.css'; // style.cssを再度有効化\r\nimport {\r\n  nowInSec,\r\n  SkyWayAuthToken,\r\n  SkyWayContext,\r\n  SkyWayRoom,\r\n  SkyWayStreamFactory,\r\n  uuidV4,\r\n  RemoteDataStream, // RemoteDataStreamをインポート\r\n  RemoteVideoStream, // RemoteVideoStreamをインポート\r\n  RemoteAudioStream, // RemoteAudioStreamをインポート\r\n} from '@skyway-sdk/room';\r\n\r\n/**\r\n * ホーム画面コンポーネント\r\n * @param {object} props - プロパティ\r\n * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n */\r\nfunction Home({ setIsLoggedIn }) {\r\n  // ルーム名\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  // 自分の参加者情報 (ルームに参加すると設定されます)\r\n  const [me, setMe] = useState(null);\r\n  // SkyWayコンテキストのインスタンス\r\n  const [skywayContext, setSkywayContext] = useState(null);\r\n  // SkyWayルームのインスタンス\r\n  const [skywayRoom, setSkywayRoom] = useState(null);\r\n  // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\r\n  const remoteVideoElements = useRef(new Map());\r\n  // リモートビデオを表示するDOM要素への参照\r\n  const robotDisplayRef = useRef(null);\r\n  // ローカルストリームの参照を保持\r\n  const localStreamRef = useRef(null);\r\n  // 受信したメッセージを表示するための状態\r\n  // src/home.js\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [receivedMessages, setReceivedMessages] = useState([]);\r\n  // 送信したデータストリームの参照を保持\r\n  const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\r\n  // マイクの状態を表示するための状態 (ミュート状態を管理)\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  // オーディオストリームのPublicationを保持するための参照\r\n  const audioPublicationRef = useRef(null);\r\n  // AIモードがONかどうかを管理する状態\r\n  const [isAiModeOn, setIsAiModeOn] = useState(false);\r\n  // AIからの提案を保持する状態\r\n  // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\r\n  const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\r\n  // モーションが進行中かどうかを管理する状態\r\n  const [isMoveInProgress, setIsMoveInProgress] = useState(false);\r\n  // 翻訳されたテキストを保持する状態を追加\r\n  const [translatedText, setTranslatedText] = useState(\"\");\r\n  // 🌟追加: 音声認識が実行中かどうかを管理する状態\r\n  const [isListening, setIsListening] = useState(false);\r\n  // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\r\n  const recognition = useRef(null);\r\n\r\n  const URL = \"https://translation.googleapis.com/language/translate/v2?key=\";\r\n  const apiKey = 'AIzaSyBBk7P0P0XCyh3p0Ov7jiP9d1n02wYk_AY';\r\n  // メッセージとモーションの多言語マッピング\r\n  const messages = useMemo(() => ({\r\n    hello: {\r\n      japanese: 'リセット',\r\n      english: 'Hello'\r\n    },\r\n    goodbye: {\r\n      japanese: '決めポーズ',\r\n      english: 'Goodbye'\r\n    },\r\n    bow: {\r\n      japanese: 'バイバイ',\r\n      english: 'Bow'\r\n    },\r\n    flap: {\r\n      japanese: 'YES',\r\n      english: 'Flap'\r\n    },\r\n    lookUp: {\r\n      japanese: 'NO',\r\n      english: 'Look up'\r\n    },\r\n    lookDown: {\r\n      japanese: '右手を上げる',\r\n      english: 'Look down'\r\n    },\r\n    lookRight: {\r\n      japanese: '右手を下げる',\r\n      english: 'Look right'\r\n    },\r\n    lookLeft: {\r\n      japanese: '左手を上げる',\r\n      english: 'Left hand up' // Changed from 'Look left' for clarity\r\n    },\r\n    nod: {\r\n      japanese: '左手を下げる',\r\n      english: 'Left hand down' // Changed from 'Nod' for clarity\r\n    },\r\n    tiltHead: {\r\n      japanese: '上を向く',\r\n      english: 'Look up' // Changed from 'Tilt head' for clarity\r\n    },\r\n    spin: {\r\n      japanese: '下を向く',\r\n      english: 'Look down' // Changed from 'Spin' for clarity\r\n    },\r\n    jump: {\r\n      japanese: '右を向く',\r\n      english: 'Look right' // Changed from 'Jump' for clarity\r\n    },\r\n    dance: {\r\n      japanese: '左を向く',\r\n      english: 'Look left' // Changed from 'Dance' for clarity\r\n    },\r\n    bowDeep: {\r\n      japanese: 'パタパタ',\r\n      english: 'Flap arms' // Changed from 'Deep bow' for clarity\r\n    },\r\n    doingSomething: {\r\n      japanese: 'こんにちは',\r\n      english: 'Hello'\r\n    },\r\n    thankYou: {\r\n      japanese: 'バイバイ',\r\n      english: 'Goodbye' // Changed from 'Thank you' for clarity\r\n    },\r\n    good: {\r\n      japanese: 'ようこそ',\r\n      english: 'Welcome' // Changed from 'Good' for clarity\r\n    },\r\n    ookini: {\r\n      japanese: 'ありがとう',\r\n      english: 'Thank you (Kansai dialect)'\r\n    },\r\n    amazing: {\r\n      japanese: '楽しんでね',\r\n      english: 'Enjoy' // Changed from 'Amazing' for clarity\r\n    }\r\n  }), []);\r\n\r\n\r\n  /**\r\n   * ログアウトボタンクリック時のハンドラ\r\n   */\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false); // ログイン状態をfalseに設定\r\n  };\r\n\r\n  // SkyWay App ID と Secret Key\r\n  // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\r\n  // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\r\n  const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\r\n  const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\r\n\r\n  // SkyWay認証トークンの生成\r\n  const token = useMemo(() => {\r\n    if (appId == null || secretKey == null) return undefined;\r\n\r\n    return new SkyWayAuthToken({\r\n      jti: uuidV4(), // JWT ID\r\n      iat: nowInSec(), // 発行時刻\r\n      exp: nowInSec() + 60 * 60 * 24, // 有効期限 (24時間)\r\n      version: 3,\r\n      scope: {\r\n        appId: appId,\r\n        rooms: [\r\n          {\r\n            name: \"*\", // すべてのルーム名に適用\r\n            methods: [\"create\", \"close\", \"updateMetadata\"], // ルーム操作の権限\r\n            member: {\r\n              name: \"*\", // すべてのメンバーに適用\r\n              methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\r\n            }\r\n          }],\r\n        turn: {\r\n          enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\r\n        }\r\n      }\r\n    }).encode(secretKey);\r\n\r\n  }, [appId, secretKey]);\r\n\r\n  /**\r\n   * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n   * トークンが利用可能になったときに一度だけ実行されます。\r\n   */\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    let currentContext;\r\n    const initContext = async () => {\r\n      try {\r\n        currentContext = await SkyWayContext.Create(token);\r\n        setSkywayContext(currentContext);\r\n        console.log(\"SkyWayContext created successfully.\");\r\n      } catch (error) {\r\n        console.error(\"Failed to create SkyWayContext:\", error);\r\n      }\r\n    };\r\n\r\n    initContext();\r\n\r\n    // コンポーネントのアンマウント時にコンテキストを破棄\r\n    return () => {\r\n      if (currentContext) {\r\n        currentContext.dispose();\r\n        console.log(\"SkyWayContext disposed.\");\r\n      }\r\n    };\r\n  }, [token]); // tokenが変更されたときにのみ実行\r\n\r\n  // 🌟追加: SpeechRecognition APIの初期化\r\n  useEffect(() => {\r\n    // ブラウザがSpeechRecognitionに対応しているか確認\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    if (!SpeechRecognition) {\r\n      console.error(\"SpeechRecognition API is not supported by this browser.\");\r\n      return;\r\n    }\r\n\r\n    // SpeechRecognitionオブジェクトを初期化\r\n    recognition.current = new SpeechRecognition();\r\n    recognition.current.continuous = true; // 連続的な認識\r\n    recognition.current.interimResults = true; // 中間結果を返す\r\n    recognition.current.lang = 'ja-JP'; // 日本語を指定\r\n\r\n    // 音声認識の結果を処理するハンドラ\r\n    recognition.current.onresult = (event) => {\r\n      let finalTranscript = '';\r\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n        if (event.results[i].isFinal) {\r\n          finalTranscript = event.results[i][0].transcript;\r\n          break; // 最初の確定した結果のみを取得\r\n        }\r\n      }\r\n\r\n      // 確定した結果が空でなければSkywayで送信\r\n      if (finalTranscript.trim() !== '') {\r\n        console.log(\"Transcription final result:\", finalTranscript);\r\n        // Skywayのデータストリームで送信\r\n        if (localDataStreamRef.current && me) {\r\n          //const result = `translate_data_web:${finalTranscript}`;\r\n          const URL2 = URL + apiKey + \"&q=\"+encodeURI(finalTranscript)+\"&source=\"+'ja'+\"&target=\"+'en'; // eslint-disable-line\r\n          let xhr = new XMLHttpRequest()\r\n          xhr.open('POST', [URL2], false)\r\n          xhr.send();\r\n          if (xhr.status === 200) {\r\n            const res = JSON.parse(xhr.responseText);\r\n            const res2 = res[\"data\"][\"translations\"][0][\"translatedText\"]\r\n            const res3 =`translate_data_web:${res2}`;\r\n            localDataStreamRef.current.write(res3);\r\n          }\r\n\r\n          console.log(`Sent transcription: \"${finalTranscript}\"`);\r\n          // 自分の画面にも表示\r\n          setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: finalTranscript, isLocal: true }]);\r\n        }\r\n      }\r\n    };\r\n\r\n    // 認識エラー時のハンドラ\r\n    recognition.current.onerror = (event) => {\r\n      console.error(\"Speech recognition error:\", event.error);\r\n      setIsListening(false); // エラー時はリスニング状態を停止\r\n    };\r\n\r\n    // 認識終了時のハンドラ\r\n    recognition.current.onend = () => {\r\n      console.log(\"Speech recognition ended.\");\r\n      // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\r\n      // if (isListening) {\r\n      //   recognition.current.start();\r\n      // }\r\n    };\r\n\r\n    // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\r\n    return () => {\r\n      if (recognition.current) {\r\n        recognition.current.stop();\r\n      }\r\n    };\r\n  }, [me, localDataStreamRef]);\r\n\r\n  /**\r\n   * リモートストリームをDOMに追加するヘルパー関数\r\n   * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\r\n  const attachRemoteStream = (stream, memberId) => {\r\n    if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\r\n      // 既存のビデオ要素があれば削除\r\n      const existingVideo = remoteVideoElements.current.get(memberId);\r\n      if (existingVideo) {\r\n        robotDisplayRef.current.removeChild(existingVideo);\r\n        remoteVideoElements.current.delete(memberId);\r\n      }\r\n\r\n      const video = document.createElement(\"video\");\r\n      video.autoplay = true; // 自動再生\r\n      video.playsInline = true; // インライン再生 (iOSなどで必要)\r\n      video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\r\n      video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\r\n      stream.attach(video); // ストリームをビデオ要素のソースに設定\r\n      robotDisplayRef.current.appendChild(video);\r\n      remoteVideoElements.current.set(memberId, video);\r\n      console.log(`Attached stream from ${memberId} to DOM.`);\r\n    } else {\r\n      console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * データストリームの受信を処理するヘルパー関数\r\n   * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\r\n  const handleDataStream = (stream, memberId) => {\r\n    if (stream instanceof RemoteDataStream) {\r\n      stream.onData.add((data) => {\r\n        console.log(`Received data from ${memberId}:`, data);\r\n        // 受信したメッセージを状態に追加\r\n        setReceivedMessages(prevMessages => [...prevMessages, { senderId: memberId, message: data }]);\r\n\r\n        // \"move_finish\" シグナルをチェック\r\n        if (data === \"move_finish\") {\r\n          console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\r\n          setIsMoveInProgress(false); // モーション終了\r\n        }\r\n        // AI提案のフォーマットをチェック\r\n        // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\r\n        const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\r\n        const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\r\n        if (combinedMatch) {\r\n          const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\r\n          const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\r\n          console.log(suggestion1Content);\r\n          console.log(suggestion2Content);\r\n          setAiSuggestions([\r\n            { key: 'ai_assist_1', text: suggestion1Content }, // キーをai_assist_1に修正\r\n            { key: 'ai_assist_2', text: suggestion2Content } // キーをai_assist_2に修正\r\n          ]);\r\n          console.log(\"Received combined AI suggestions.\");\r\n        } else {\r\n          // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\r\n          const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\r\n          const singleMatch = String(data).match(aiSingleSuggestionRegex);\r\n          if (singleMatch) {\r\n            const suggestionNumber = parseInt(singleMatch[1], 10);\r\n            const suggestionContent = singleMatch[2];\r\n            if (suggestionNumber === 1 || suggestionNumber === 2) {\r\n              setAiSuggestions(prevSuggestions => {\r\n                const newSuggestions = [...prevSuggestions];\r\n                newSuggestions[suggestionNumber - 1] = { key: `ai_assist_${suggestionNumber}`, // キーをai_assist_Nに修正\r\n                text: suggestionContent };\r\n                return newSuggestions;\r\n              });\r\n              console.log(`Received single AI suggestion ${suggestionNumber}.`);\r\n            }\r\n          }\r\n        }\r\n        // 新しい翻訳フォーマットをチェック\r\n        const translateRegex = /^translate_request:(.*)$/;\r\n        const translateMatch = String(data).match(translateRegex);\r\n        if (translateMatch) {\r\n          const translatedContent = translateMatch[1];\r\n          setTranslatedText(translatedContent); // 状態を更新\r\n          console.log(`Received translated text: ${translatedContent}`);\r\n        } else {\r\n          // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\r\n          // setTranslatedText(\"\");\r\n        }\r\n      });\r\n      console.log(`Listening for data from ${memberId}.`);\r\n    } else {\r\n      console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ルームに参加するハンドラ\r\n   * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n   */\r\n  const handleJoinRoom = async () => {\r\n    if (!skywayContext) {\r\n      console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\r\n      return;\r\n    }\r\n    if (!roomName) {\r\n      console.error(\"Room name is empty. Please enter a room name to join.\");\r\n      return;\r\n    }\r\n    if (skywayRoom && me) {\r\n      console.warn(\"Already in a room. Please leave the current room first.\");\r\n      return;\r\n    }\r\n    try {\r\n      // 指定されたルーム名でP2Pルームを作成または検索\r\n      const room = await SkyWayRoom.FindOrCreate(skywayContext, { type: \"p2p\", // P2Pルームタイプ\r\n        name: roomName,\r\n      });\r\n      // roomオブジェクトが有効であることを確認\r\n      if (!room) {\r\n        console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\r\n        throw new Error(\"Failed to create or find SkyWayRoom.\");\r\n      }\r\n      setSkywayRoom(room);\r\n      console.log(`SkyWayRoom '${roomName}' found or created.`);\r\n      // ルームに参加し、自分のメンバー情報を取得\r\n      const localMember = await room.join();\r\n      // localMemberが有効であることを確認\r\n      if (!localMember) {\r\n        console.error(\"room.join() returned null or undefined localMember.\");\r\n        throw new Error(\"Failed to join the room.\");\r\n      }\r\n      setMe(localMember);\r\n      console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\r\n      // ルームIDと自分のIDをコンソールに表示\r\n      console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\r\n      // 自分のカメラとマイクのストリームを作成し、公開\r\n      const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\r\n      localStreamRef.current = video; // ローカルビデオストリームを保存\r\n      await localMember.publish(video);\r\n      const publication_audio = await localMember.publish(audio);\r\n      audioPublicationRef.current = publication_audio; // オーディオの Publication を保持\r\n      // データストリームを作成し、公開\r\n      const localDataStream = await SkyWayStreamFactory.createDataStream();\r\n      localDataStreamRef.current = localDataStream; // データストリームの参照を保持\r\n      await localMember.publish(localDataStream);\r\n      // ルーム内の既存のメンバーのストリームを購読\r\n      room.members.forEach(member => {\r\n        if (member.id !== localMember.id) {\r\n          member.publications.forEach(publication => {\r\n            if (publication.contentType === \"video\" || publication.contentType === \"audio\") {\r\n              const { stream } = publication.subscribe();\r\n              attachRemoteStream(stream, member.id);\r\n            } else if (publication.contentType === \"data\") {\r\n              const { stream } = publication.subscribe();\r\n              handleDataStream(stream, member.id);\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      // 新しいメンバーがルームに参加したときのイベントリスナー\r\n      room.onMemberJoined.add((e) => {\r\n        console.log(`Member joined: ${e.member.id}`);\r\n        e.member.onStreamPublished.add(async (e) => {\r\n          console.log(`Stream published by ${e.publication.publisher.id}`);\r\n          if (e.publication.contentType === \"video\" || e.publication.contentType === \"audio\") {\r\n            const { stream } = await e.publication.subscribe();\r\n            attachRemoteStream(stream, e.publication.publisher.id);\r\n          } else if (e.publication.contentType === \"data\") {\r\n            const { stream } = await e.publication.subscribe();\r\n            handleDataStream(stream, e.publication.publisher.id);\r\n          }\r\n        });\r\n      });\r\n\r\n      // メンバーがルームから離脱したときのイベントリスナー\r\n      room.onMemberLeft.add((e) => {\r\n        console.log(`Member left: ${e.member.id}`);\r\n        const videoElement = remoteVideoElements.current.get(e.member.id);\r\n        if (videoElement) {\r\n          robotDisplayRef.current.removeChild(videoElement);\r\n          remoteVideoElements.current.delete(e.member.id);\r\n        }\r\n        // ルームに誰もいなくなったらAIモードをリセット\r\n        if (room.members.length <= 1) {\r\n          setIsAiModeOn(false);\r\n        }\r\n      });\r\n      // Publicationの停止（unpublish）を検知するイベントリスナー\r\n      room.onPublicationUnpublished.add((e) => {\r\n        console.log(`Publication unpublished: ${e.publication.id} by ${e.publication.publisher.id}`);\r\n        const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\r\n        if (videoElement) {\r\n          robotDisplayRef.current.removeChild(videoElement);\r\n          remoteVideoElements.current.delete(e.publication.publisher.id);\r\n        }\r\n      });\r\n      console.log(\"Joined room and set up listeners successfully.\");\r\n\r\n    } catch (error) {\r\n      console.error(\"Failed to join room:\", error);\r\n      // エラーが発生した場合、状態をクリア\r\n      setSkywayRoom(null);\r\n      setMe(null);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ルームから退出するハンドラ\r\n   */\r\n  const handleLeaveRoom = () => {\r\n    if (skywayRoom) {\r\n      skywayRoom.close(); // ルームを閉じる\r\n      setSkywayRoom(null);\r\n      setMe(null);\r\n      localStreamRef.current = null;\r\n      localDataStreamRef.current = null;\r\n      // すべてのリモートビデオ要素を削除\r\n      remoteVideoElements.current.forEach(video => {\r\n        if (robotDisplayRef.current) {\r\n          robotDisplayRef.current.removeChild(video);\r\n        }\r\n      });\r\n      remoteVideoElements.current.clear();\r\n      setIsAiModeOn(false); // 退出時にAIモードをリセット\r\n      console.log(\"Left the room and cleaned up.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * データストリームでメッセージを送信するハンドラ\r\n   * @param {string} message - 送信するメッセージ\r\n   */\r\n  const handleSend = (message) => {\r\n    if (localDataStreamRef.current) {\r\n      localDataStreamRef.current.write(message);\r\n      console.log(`Sent message: \"${message}\"`);\r\n      // 自分の画面にも表示\r\n      setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: message, isLocal: true }]);\r\n      // モーションコマンド送信後、モーション完了シグナルを待つためボタンを無効化\r\n      if (message.startsWith('template_move')) {\r\n        setIsMoveInProgress(true);\r\n      } else if (message.startsWith('ai_assist')) {\r\n        // AIアシストボタンが押された場合、提案をリセット\r\n        setAiSuggestions([null, null]);\r\n        setIsAiModeOn(false); // AIモードを自動でOFFにする\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * マイクのミュート/ミュート解除を切り替えるハンドラ\r\n   */\r\n  const handleMute = async () => {\r\n    if (!audioPublicationRef.current) {\r\n      console.error(\"Audio publication not found.\");\r\n      return;\r\n    }\r\n    const isMutedNow = !isMuted;\r\n    try {\r\n      if (isMutedNow) {\r\n        await audioPublicationRef.current.unpublish();\r\n        console.log(\"Audio stream unpublished (muted).\");\r\n      } else {\r\n        const { audio } = await SkyWayStreamFactory.createMicrophoneAudioStream();\r\n        const newPublication = await me.publish(audio);\r\n        audioPublicationRef.current = newPublication;\r\n        console.log(\"Audio stream published (unmuted).\");\r\n      }\r\n      setIsMuted(isMutedNow);\r\n    } catch (error) {\r\n      console.error(\"Failed to toggle mute state:\", error);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * AIモードのON/OFFを切り替えるハンドラ\r\n   */\r\n  const handleAiModeToggle = () => {\r\n    const newAiMode = !isAiModeOn;\r\n    setIsAiModeOn(newAiMode);\r\n    if (!newAiMode) {\r\n      // AIモードをOFFにする場合、提案をリセット\r\n      setAiSuggestions([null, null]);\r\n      // AIモードOFFのシグナルを送信\r\n      if (localDataStreamRef.current) {\r\n        localDataStreamRef.current.write('ai_mode_off');\r\n      }\r\n    } else {\r\n      // AIモードをONにする場合、シグナルを送信\r\n      if (localDataStreamRef.current) {\r\n        localDataStreamRef.current.write('ai_mode_on');\r\n      }\r\n    }\r\n  };\r\n  \r\n  // 🌟追加: 音声認識の開始/停止を切り替えるハンドラ\r\n  const handleToggleListening = () => {\r\n    if (isListening) {\r\n      recognition.current.stop();\r\n      setIsListening(false);\r\n      console.log(\"Stopped listening.\");\r\n    } else {\r\n      recognition.current.start();\r\n      setIsListening(true);\r\n      console.log(\"Started listening.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header className=\"header\">\r\n        <div className=\"header-left\">\r\n          {/* AI提案のボタン */}\r\n          {aiSuggestions.map((suggestion, index) =>\r\n            suggestion && (\r\n              <button\r\n                key={index}\r\n                className=\"ai-btn\"\r\n                onClick={() => handleSend(suggestion.key)}\r\n              >\r\n                {suggestion.text}\r\n              </button>\r\n            )\r\n          )}\r\n        </div>\r\n        \r\n        {/* room-controls をヘッダーの左端から中央寄りに移動 */}\r\n        <div className=\"room-controls-container\">\r\n          <div className=\"room-controls\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Room Name\"\r\n              value={roomName}\r\n              onChange={(e) => setRoomName(e.target.value)}\r\n              className=\"room-name-input\"\r\n              disabled={!!me} // 参加済みの場合は無効\r\n            />\r\n            {me ? (\r\n              <button onClick={handleLeaveRoom} className=\"join-btn\">\r\n                ルームから退出\r\n              </button>\r\n            ) : (\r\n              <button onClick={handleJoinRoom} className=\"join-btn\">\r\n                ルームに参加\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"header-right\">\r\n          <span className=\"robot-status\">{me ? \"接続中\" : \"未接続\"}</span>\r\n          <button onClick={handleLogout} className=\"logout-btn\">\r\n            ログアウト\r\n          </button>\r\n        </div>\r\n      </header>\r\n      <div className=\"main-container\">\r\n        <div className=\"main-area\">\r\n          <div ref={robotDisplayRef} className=\"robot-display\">\r\n            {me && <video ref={localStreamRef} autoPlay playsInline className=\"local-video object-cover\" muted />}\r\n          </div>\r\n          {/* AI提案のボタンを削除 */}\r\n        </div>\r\n        <div className=\"side-panel\">\r\n          <div className=\"side-panel-content\">\r\n            <h2 className=\"panel-title\">モーション</h2>\r\n            {Object.keys(messages).map(key => (\r\n              <button\r\n                key={key}\r\n                // 送信するデータは \"template_move_〇〇\" 形式で送信\r\n                onClick={() => handleSend(`template_move_${messages[key].english}`)}\r\n                className=\"side-btn\"\r\n                // AIモード中、未参加、モーション中は無効化\r\n                disabled={isAiModeOn || !me || isMoveInProgress}\r\n              >\r\n                {messages[key].japanese}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          <div className=\"side-panel-content\">\r\n            <h2 className=\"panel-title\">音声</h2>\r\n            {Object.keys(messages).map(key => (\r\n              <button\r\n                key={key}\r\n                // 送信するデータは \"template_voice_〇〇\" 形式で送信\r\n                onClick={() => handleSend(`template_voice_${messages[key].japanese}`)}\r\n                className=\"side-btn\"\r\n                disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\r\n              >\r\n                {messages[key].japanese} {/* 常に日本語表示 */}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-controls\">\r\n        <button\r\n          className={`control-btn ai-btn`}\r\n          onClick={() => handleAiModeToggle()}\r\n          disabled={!me} // ルームに参加していない場合は無効\r\n        >\r\n          {isAiModeOn ? 'リセット' : 'AIモードON'}\r\n        </button>\r\n        {/* 🌟追加: 音声認識ボタン */}\r\n        <button\r\n          className={`control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`}\r\n          onClick={handleToggleListening}\r\n          disabled={!me || !localDataStreamRef.current || isAiModeOn} // ルーム未参加、データストリーム未準備、AIモード中は無効\r\n        >\r\n          {isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'}\r\n        </button>\r\n        <button\r\n          className={`control-btn mic-btn ${isMuted ? 'muted' : ''}`} // ミュート状態に応じてクラスを追加\r\n          onClick={handleMute}\r\n          id=\"micBtn\"\r\n          disabled={!me || isAiModeOn} // ルームに参加していない場合は無効\r\n        >\r\n          {isMuted ? 'マイクON' : 'マイクOFF'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}