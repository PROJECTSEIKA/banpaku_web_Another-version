{"ast":null,"code":"var _jsxFileName = \"C:\\\\banpaku_2025\\\\banpaku\\\\src\\\\home.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useMemo, useRef, useState } from \"react\";\n// import './style.css'; // style.cssを再度有効化\n// import {\n//   nowInSec,\n//   SkyWayAuthToken,\n//   SkyWayContext,\n//   SkyWayRoom,\n//   SkyWayStreamFactory,\n//   uuidV4,\n//   RemoteDataStream, // RemoteDataStreamをインポート\n//   RemoteVideoStream, // RemoteVideoStreamをインポート\n//   RemoteAudioStream, // RemoteAudioStreamをインポート\n// } from '@skyway-sdk/room';\n\n// /**\n//  * ホーム画面コンポーネント\n//  * @param {object} props - プロパティ\n//  * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\n//  */\n// function Home({ setIsLoggedIn }) {\n//   // ルーム名\n//   const [roomName, setRoomName] = useState(\"\");\n//   // 自分の参加者情報 (ルームに参加すると設定されます)\n//   const [me, setMe] = useState(null);\n//   // SkyWayコンテキストのインスタンス\n//   const [skywayContext, setSkywayContext] = useState(null);\n//   // SkyWayルームのインスタンス\n//   const [skywayRoom, setSkywayRoom] = useState(null);\n//   // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\n//   const remoteVideoElements = useRef(new Map());\n//   // リモートビデオを表示するDOM要素への参照\n//   const robotDisplayRef = useRef(null);\n//   // ローカルストリームの参照を保持\n//   const localStreamRef = useRef(null);\n//   // 受信したメッセージを表示するための状態\n//   // src/home.js\n//   // eslint-disable-next-line no-unused-vars\n//   const [receivedMessages, setReceivedMessages] = useState([]);\n//   // 送信したデータストリームの参照を保持\n//   const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\n//   // マイクの状態を表示するための状態 (ミュート状態を管理)\n//   const [isMuted, setIsMuted] = useState(false);\n//   // オーディオストリームのPublicationを保持するための参照\n//   const audioPublicationRef = useRef(null);\n//   // AIモードがONかどうかを管理する状態\n//   const [isAiModeOn, setIsAiModeOn] = useState(false);\n//   // AIからの提案を保持する状態\n//   // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\n//   const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\n//   // モーションが進行中かどうかを管理する状態\n//   const [isMoveInProgress, setIsMoveInProgress] = useState(false);\n//   // 翻訳されたテキストを保持する状態を追加\n//   const [translatedText, setTranslatedText] = useState(\"\");\n//   // 🌟追加: 音声認識が実行中かどうかを管理する状態\n//   const [isListening, setIsListening] = useState(false);\n//   // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\n//   const recognition = useRef(null);\n\n//   // メッセージとモーションの多言語マッピング\n//   const messages = useMemo(() => ({\n//     hello: {\n//       japanese: 'リセット',\n//       english: 'Hello'\n//     },\n//     goodbye: {\n//       japanese: '決めポーズ',\n//       english: 'Goodbye'\n//     },\n//     bow: {\n//       japanese: 'バイバイ',\n//       english: 'Bow'\n//     },\n//     flap: {\n//       japanese: 'YES',\n//       english: 'Flap'\n//     },\n//     lookUp: {\n//       japanese: 'NO',\n//       english: 'Look up'\n//     },\n//     lookDown: {\n//       japanese: '右手を上げる',\n//       english: 'Look down'\n//     },\n//     lookRight: {\n//       japanese: '右手を下げる',\n//       english: 'Look right'\n//     },\n//     lookLeft: {\n//       japanese: '左手を上げる',\n//       english: 'Left hand up' // Changed from 'Look left' for clarity\n//     },\n//     nod: {\n//       japanese: '左手を下げる',\n//       english: 'Left hand down' // Changed from 'Nod' for clarity\n//     },\n//     tiltHead: {\n//       japanese: '上を向く',\n//       english: 'Look up' // Changed from 'Tilt head' for clarity\n//     },\n//     spin: {\n//       japanese: '下を向く',\n//       english: 'Look down' // Changed from 'Spin' for clarity\n//     },\n//     jump: {\n//       japanese: '右を向く',\n//       english: 'Look right' // Changed from 'Jump' for clarity\n//     },\n//     dance: {\n//       japanese: '左を向く',\n//       english: 'Look left' // Changed from 'Dance' for clarity\n//     },\n//     bowDeep: {\n//       japanese: 'パタパタ',\n//       english: 'Flap arms' // Changed from 'Deep bow' for clarity\n//     },\n//     doingSomething: {\n//       japanese: 'こんにちは',\n//       english: 'Hello'\n//     },\n//     thankYou: {\n//       japanese: 'バイバイ',\n//       english: 'Goodbye' // Changed from 'Thank you' for clarity\n//     },\n//     good: {\n//       japanese: 'ようこそ',\n//       english: 'Welcome' // Changed from 'Good' for clarity\n//     },\n//     ookini: {\n//       japanese: 'ありがとう',\n//       english: 'Thank you (Kansai dialect)'\n//     },\n//     amazing: {\n//       japanese: '楽しんでね',\n//       english: 'Enjoy' // Changed from 'Amazing' for clarity\n//     }\n//   }), []);\n\n//   /**\n//    * ログアウトボタンクリック時のハンドラ\n//    */\n//   const handleLogout = () => {\n//     setIsLoggedIn(false); // ログイン状態をfalseに設定\n//   };\n\n//   // SkyWay App ID と Secret Key\n//   // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\n//   // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\n//   const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\n//   const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\n\n//   // SkyWay認証トークンの生成\n//   const token = useMemo(() => {\n//     if (appId == null || secretKey == null) return undefined;\n\n//     return new SkyWayAuthToken({\n//       jti: uuidV4(), // JWT ID\n//       iat: nowInSec(), // 発行時刻\n//       exp: nowInSec() + 60 * 60 * 24, // 有効期限 (24時間)\n//       version: 3,\n//       scope: {\n//         appId: appId,\n//         rooms: [\n//           {\n//             name: \"*\", // すべてのルーム名に適用\n//             methods: [\"create\", \"close\", \"updateMetadata\"], // ルーム操作の権限\n//             member: {\n//               name: \"*\", // すべてのメンバーに適用\n//               methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\n//             }\n//           }],\n//         turn: {\n//           enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\n//         }\n//       }\n//     }).encode(secretKey);\n\n//   }, [appId, secretKey]);\n\n//   /**\n//    * SkyWayContextの初期化とクリーンアップを行うuseEffect\n//    * トークンが利用可能になったときに一度だけ実行されます。\n//    */\n//   useEffect(() => {\n//     if (!token) return;\n\n//     let currentContext;\n//     const initContext = async () => {\n//       try {\n//         currentContext = await SkyWayContext.Create(token);\n//         setSkywayContext(currentContext);\n//         console.log(\"SkyWayContext created successfully.\");\n//       } catch (error) {\n//         console.error(\"Failed to create SkyWayContext:\", error);\n//       }\n//     };\n\n//     initContext();\n\n//     // コンポーネントのアンマウント時にコンテキストを破棄\n//     return () => {\n//       if (currentContext) {\n//         currentContext.dispose();\n//         console.log(\"SkyWayContext disposed.\");\n//       }\n//     };\n//   }, [token]); // tokenが変更されたときにのみ実行\n\n//   // 🌟追加: SpeechRecognition APIの初期化\n//   useEffect(() => {\n//     // ブラウザがSpeechRecognitionに対応しているか確認\n//     const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n//     if (!SpeechRecognition) {\n//       console.error(\"SpeechRecognition API is not supported by this browser.\");\n//       return;\n//     }\n\n//     // SpeechRecognitionオブジェクトを初期化\n//     recognition.current = new SpeechRecognition();\n//     recognition.current.continuous = true; // 連続的な認識\n//     recognition.current.interimResults = true; // 中間結果を返す\n//     recognition.current.lang = 'ja-JP'; // 日本語を指定\n\n//     // 音声認識の結果を処理するハンドラ\n//     recognition.current.onresult = (event) => {\n//       let finalTranscript = '';\n//       for (let i = event.resultIndex; i < event.results.length; ++i) {\n//         if (event.results[i].isFinal) {\n//           finalTranscript = event.results[i][0].transcript;\n//           break; // 最初の確定した結果のみを取得\n//         }\n//       }\n\n//       // 確定した結果が空でなければSkywayで送信\n//       if (finalTranscript.trim() !== '') {\n//         console.log(\"Transcription final result:\", finalTranscript);\n//         // Skywayのデータストリームで送信\n//         if (localDataStreamRef.current && me) {\n//           localDataStreamRef.current.write(finalTranscript);\n//           console.log(`Sent transcription: \"${finalTranscript}\"`);\n//           // 自分の画面にも表示\n//           setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: finalTranscript, isLocal: true }]);\n//         }\n//       }\n//     };\n\n//     // 認識エラー時のハンドラ\n//     recognition.current.onerror = (event) => {\n//       console.error(\"Speech recognition error:\", event.error);\n//       setIsListening(false); // エラー時はリスニング状態を停止\n//     };\n\n//     // 認識終了時のハンドラ\n//     recognition.current.onend = () => {\n//       console.log(\"Speech recognition ended.\");\n//       // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\n//       // if (isListening) {\n//       //   recognition.current.start();\n//       // }\n//     };\n\n//     // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\n//     return () => {\n//       if (recognition.current) {\n//         recognition.current.stop();\n//       }\n//     };\n//   }, [me, localDataStreamRef]);\n\n//   /**\n//    * リモートストリームをDOMに追加するヘルパー関数\n//    * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\n//    * @param {string} memberId - ストリームのパブリッシャーのメンバーID\n//    */\n//   const attachRemoteStream = (stream, memberId) => {\n//     if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\n//       // 既存のビデオ要素があれば削除\n//       const existingVideo = remoteVideoElements.current.get(memberId);\n//       if (existingVideo) {\n//         robotDisplayRef.current.removeChild(existingVideo);\n//         remoteVideoElements.current.delete(memberId);\n//       }\n\n//       const video = document.createElement(\"video\");\n//       video.autoplay = true; // 自動再生\n//       video.playsInline = true; // インライン再生 (iOSなどで必要)\n//       video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\n//       video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\n//       stream.attach(video); // ストリームをビデオ要素のソースに設定\n//       robotDisplayRef.current.appendChild(video);\n//       remoteVideoElements.current.set(memberId, video);\n//       console.log(`Attached stream from ${memberId} to DOM.`);\n//     } else {\n//       console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\n//     }\n//   };\n\n//   /**\n//    * データストリームの受信を処理するヘルパー関数\n//    * @param {RemoteDataStream} stream - 受信するデータストリーム\n//    * @param {string} memberId - ストリームのパブリッシャーのメンバーID\n//    */\n//   const handleDataStream = (stream, memberId) => {\n//     if (stream instanceof RemoteDataStream) {\n//       stream.onData.add((data) => {\n//         console.log(`Received data from ${memberId}:`, data);\n//         // 受信したメッセージを状態に追加\n//         setReceivedMessages(prevMessages => [...prevMessages, { senderId: memberId, message: data }]);\n\n//         // \"move_finish\" シグナルをチェック\n//         if (data === \"move_finish\") {\n//           console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\n//           setIsMoveInProgress(false); // モーション終了\n//         }\n\n//         // AI提案のフォーマットをチェック\n//         // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\n//         const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\n//         const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\n\n//         if (combinedMatch) {\n//           const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\n//           const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\n\n//           setAiSuggestions([\n//             { key: 'ai_assist_1', text: suggestion1Content }, // キーをai_assist_1に修正\n//             { key: 'ai_assist_2', text: suggestion2Content }  // キーをai_assist_2に修正\n//           ]);\n//           console.log(\"Received combined AI suggestions.\");\n//         } else {\n//           // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\n//           const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\n//           const singleMatch = String(data).match(aiSingleSuggestionRegex);\n\n//           if (singleMatch) {\n//             const suggestionNumber = parseInt(singleMatch[1], 10);\n//             const suggestionContent = singleMatch[2];\n\n//             if (suggestionNumber === 1 || suggestionNumber === 2) {\n//               setAiSuggestions(prevSuggestions => {\n//                 const newSuggestions = [...prevSuggestions];\n//                 newSuggestions[suggestionNumber - 1] = {\n//                   key: `ai_assist_${suggestionNumber}`, // キーをai_assist_Nに修正\n//                   text: suggestionContent\n//                 };\n//                 return newSuggestions;\n//               });\n//               console.log(`Received single AI suggestion ${suggestionNumber}.`);\n//             }\n//           }\n//         }\n\n//         // 新しい翻訳フォーマットをチェック\n//         const translateRegex = /^translate_request:(.*)$/;\n//         const translateMatch = String(data).match(translateRegex);\n\n//         if (translateMatch) {\n//           const translatedContent = translateMatch[1];\n//           setTranslatedText(translatedContent); // 状態を更新\n//           console.log(`Received translated text: ${translatedContent}`);\n//         } else {\n//           // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\n//           // setTranslatedText(\"\");\n//         }\n//       });\n//       console.log(`Listening for data from ${memberId}.`);\n//     } else {\n//       console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\n//     }\n//   };\n\n//   /**\n//    * ルームに参加するハンドラ\n//    * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\n//    */\n//   const handleJoinRoom = async () => {\n//     if (!skywayContext) {\n//       console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\n//       return;\n//     }\n//     if (!roomName) {\n//       console.error(\"Room name is empty. Please enter a room name to join.\");\n//       return;\n//     }\n//     if (skywayRoom && me) {\n//       console.warn(\"Already in a room. Please leave the current room first.\");\n//       return;\n//     }\n\n//     try {\n//       // 指定されたルーム名でP2Pルームを作成または検索\n//       const room = await SkyWayRoom.FindOrCreate(skywayContext, {\n//         type: \"p2p\", // P2Pルームタイプ\n//         name: roomName,\n//       });\n\n//       // roomオブジェクトが有効であることを確認\n//       if (!room) {\n//         console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\n//         throw new Error(\"Failed to create or find SkyWayRoom.\");\n//       }\n\n//       setSkywayRoom(room);\n//       console.log(`SkyWayRoom '${roomName}' found or created.`);\n\n//       // ルームに参加し、自分のメンバー情報を取得\n//       const localMember = await room.join();\n//       // localMemberが有効であることを確認\n//       if (!localMember) {\n//         console.error(\"room.join() returned null or undefined localMember.\");\n//         throw new Error(\"Failed to join the room.\");\n//       }\n//       setMe(localMember);\n//       console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\n//       // ルームIDと自分のIDをコンソールに表示\n//       console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\n\n//       // 自分のカメラとマイクのストリームを作成し、公開\n//       const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\n//       localStreamRef.current = video; // ローカルビデオストリームを保存\n//       await localMember.publish(video);\n//       const publication_audio = await localMember.publish(audio);\n//       audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\n//       setIsMuted(false);\n//       console.log(\"Published local camera and microphone stream.\");\n\n//       // 自分のデータストリームを作成し、公開\n//       const dataStream = await SkyWayStreamFactory.createDataStream();\n//       localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\n//       await localMember.publish(dataStream);\n//       console.log(\"Published local data stream.\");\n\n//       // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\n//       setIsMoveInProgress(false);\n\n//       // --- 既存のストリームを購読するロジック ---\n//       // ルーム内の既存の公開ストリームをすべて購読する\n//       for (const publication of room.publications) {\n//         // 自分のストリームは購読しない\n//         if (localMember.id === publication.publisher.id) {\n//           continue;\n//         }\n//         try {\n//           const { stream } = await localMember.subscribe(publication.id);\n//           console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\n\n//           if (publication.contentType === 'video' || publication.contentType === 'audio') {\n//             attachRemoteStream(stream, publication.publisher.id);\n//           } else if (publication.contentType === 'data') {\n//             handleDataStream(stream, publication.publisher.id);\n//           } else {\n//             console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\n//           }\n//         } catch (subscribeError) {\n//           console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\n//         }\n//       }\n\n//       // --- ルームイベントリスナーの設定 ---\n\n//       // メンバーがルームに参加したときのイベント\n//       if (room.onMemberJoined) {\n//         room.onMemberJoined.add((e) => {\n//           console.log(`Member joined: ${e.member.id}`);\n//         });\n//       } else {\n//         console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\n//       }\n\n//       // メンバーがルームを離脱したときのイベント\n//       if (room.onMemberLeft) {\n//         room.onMemberLeft.add((e) => {\n//           console.log(`Member left: ${e.member.id}`);\n//           // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\n//           const videoElement = remoteVideoElements.current.get(e.member.id);\n//           if (videoElement && robotDisplayRef.current) {\n//             robotDisplayRef.current.removeChild(videoElement);\n//             remoteVideoElements.current.delete(e.member.id);\n//             console.log(`Removed video for member ${e.member.id}`);\n//           }\n//           // データストリーム関連のクリーンアップもここに追加可能ですが、\n//           // onDataリスナーはストリームが閉じられると自動的に停止します。\n//         });\n//       } else {\n//         console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\n//       }\n\n//       // ストリームが公開されたときのイベント\n//       if (room.onStreamPublished) {\n//         room.onStreamPublished.add(async (e) => {\n//           console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\n//           // 自分のストリームは購読しない\n//           if (localMember.id !== e.publication.publisher.id) {\n//             try {\n//               // リモートストリームを購読\n//               const { stream } = await localMember.subscribe(e.publication.id);\n//               console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\n\n//               if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\n//                 attachRemoteStream(stream, e.publication.publisher.id);\n//               } else if (e.publication.contentType === 'data') {\n//                 handleDataStream(stream, e.publication.publisher.id);\n//               } else {\n//                 console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\n//               }\n//             } catch (subscribeError) {\n//               console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\n//             }\n//           } else {\n//             console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\n//           }\n//         });\n//       } else {\n//         console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\n//       }\n\n//       // ストリームが非公開になったときのイベント\n//       if (room.onStreamUnpublished) {\n//         room.onStreamUnpublished.add((e) => {\n//           console.log(`Stream unpublished by ${e.publication.publisher.id}`);\n//           // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\n//           const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\n//           if (videoElement && robotDisplayRef.current) {\n//             robotDisplayRef.current.removeChild(videoElement);\n//             remoteVideoElements.current.delete(e.publication.publisher.id);\n//             console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\n//           }\n//         });\n//       } else {\n//         console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\n//       }\n\n//     } catch (error) {\n//       console.error(\"Failed to join room:\", error);\n//       // エラー発生時に状態をリセットして再試行可能にする\n//       setSkywayRoom(null);\n//       setMe(null);\n//       // エラー時に既存のビデオ要素をクリーンアップ\n//       if (robotDisplayRef.current) {\n//         Array.from(robotDisplayRef.current.children).forEach(child => {\n//           if (child.tagName === 'VIDEO') {\n//             // ビデオ要素のsrcObjectをクリアし、トラックを停止\n//             if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\n//               child.srcObject.getTracks().forEach(track => track.stop());\n//               child.srcObject = null;\n//             }\n//             child.remove(); // DOMから要素を削除\n//           }\n//         });\n//       }\n//       remoteVideoElements.current.clear();\n//       if (localStreamRef.current) {\n//         // LocalVideoStreamのstop()メソッドを呼び出す\n//         if (typeof localStreamRef.current.stop === 'function') {\n//           localStreamRef.current.stop();\n//           console.log(\"Stopped local media stream during join error cleanup.\");\n//         } else {\n//           console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\n//         }\n//         localStreamRef.current = null;\n//       }\n//       // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\n//       localDataStreamRef.current = null; // 参照をクリア\n//       console.log(\"Local data stream reference cleared during join error cleanup.\");\n\n//       // ミュート状態もリセット\n//       setIsMuted(false);\n//       audioPublicationRef.current = null;\n//       setIsMoveInProgress(false); // エラー時もモーション状態をリセット\n//       setTranslatedText(\"\"); // 翻訳テキストをクリア\n//     }\n//   };\n\n//   /**\n//    * ルームから退出するハンドラ\n//    */\n//   const handleLeaveRoom = async () => {\n//     if (skywayRoom && me) {\n//       try {\n//         // ローカルストリームを停止し、公開を解除\n//         if (localStreamRef.current) {\n//           // LocalVideoStreamのstop()メソッドを呼び出す\n//           if (typeof localStreamRef.current.stop === 'function') {\n//             localStreamRef.current.stop();\n//             console.log(\"Stopped local media stream.\");\n//           } else {\n//             console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during leave.\");\n//           }\n//           localStreamRef.current = null;\n//         }\n//         // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\n//         localDataStreamRef.current = null; // 参照をクリア\n//         console.log(\"Local data stream reference cleared.\");\n\n//         // オーディオPublicationの参照をクリア\n//         audioPublicationRef.current = null;\n//         setIsMuted(false); // ミュート状態をリセット\n//         setTranslatedText(\"\"); // 翻訳テキストをクリア\n//         // �追加: ルーム退出時に音声認識を停止\n//         if (isListening) {\n//           recognition.current.stop();\n//           setIsListening(false);\n//         }\n\n//         await me.leave(); // ルームから退出\n//         console.log(`Left room '${roomName}'`);\n//         // ルーム退出をコンソールに表示\n//         console.log(`Left room: ${roomName}`);\n\n//         // room.dispose()を使用\n//         if (skywayRoom) {\n//           await skywayRoom.dispose(); // ルームを閉じる (これはルームの作成者のみが効果的です)\n//           console.log(\"SkyWay Room disposed.\");\n//         }\n//         // SkyWay SDKに関するすべての操作が不要になった場合にcontext.dispose()を呼び出す\n//         // このコンポーネントがアンマウントされる際にuseEffectのクリーンアップ関数で処理されるため、ここでは呼び出さない\n\n//       } catch (error) {\n//       } finally {\n//         // 状態をリセット\n//         setMe(null);\n//         setSkywayRoom(null);\n//         setReceivedMessages([]); // 受信メッセージもクリア\n//         // すべてのリモートビデオ要素をDOMから削除\n//         if (robotDisplayRef.current) {\n//           Array.from(robotDisplayRef.current.children).forEach(child => {\n//             if (child.tagName === 'VIDEO') {\n//               // ビデオ要素のsrcObjectをクリアし、トラックを停止\n//               if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\n//                 child.srcObject.getTracks().forEach(track => track.stop());\n//                 child.srcObject = null;\n//               }\n//               child.remove(); // DOMから要素を削除\n//             }\n//           });\n//         }\n//         remoteVideoElements.current.clear();\n//         // AIモードもオフにする\n//         setIsAiModeOn(false);\n//         setAiSuggestions([null, null]); // 提案もクリア\n//         setIsMoveInProgress(false); // ルーム退出時もモーション状態をリセット\n//       }\n//     }\n//   };\n\n//   /**\n//    * モーションを操作するボタンを押した時の処理\n//    * @param {string | object} messageOrKey - 送信するメッセージのキー (messagesオブジェクトのキー) またはAI提案オブジェクト\n//    */\n//   const handleSend = async (messageOrKey) => {\n//     if (me && skywayRoom && localDataStreamRef.current) {\n//       try {\n//         let messageToSend;\n//         let shouldSetMoveInProgress = false; // モーション進行中フラグを制御するための新しい変数\n\n//         if (typeof messageOrKey === 'string') {\n//           // サイドボタンからの送信の場合、直接メッセージ文字列を使用\n//           if (messageOrKey.startsWith(\"template_motion_\")) {\n//             messageToSend = messageOrKey;\n//             shouldSetMoveInProgress = true; // モーションコマンドの場合のみフラグを立てる\n//           } else if (messageOrKey.startsWith(\"template_voice_\")) {\n//             messageToSend = messageOrKey;\n//             // ボイスコマンドの場合はshouldSetMoveInProgressをtrueにしない\n//           } else if (messageOrKey.startsWith(\"robot_reset\")){\n//             messageToSend = messageOrKey;\n//           } else {\n//             // 既存のmessagesオブジェクトからのルックアップ (AI提案以外でキーが渡された場合など)\n//             messageToSend = messages[messageOrKey];\n//           }\n//         } else if (typeof messageOrKey === 'object' && messageOrKey.key) { // messageOrKey.text から messageOrKey.key に変更\n//           // AI提案ボタンからの送信\n//           messageToSend = messageOrKey.key; // 提案のキー（ai_assist_1など）を送信\n//           // AI提案の場合はshouldSetMoveInProgressをtrueにしない\n//         }\n\n//         if (!messageToSend) {\n//           console.warn(`Message to send is empty or not found.`);\n//           return;\n//         }\n\n//         localDataStreamRef.current.write(messageToSend);\n//         console.log(`Sent message: \"${messageToSend}\"`);\n//         // 送信したメッセージも自身の画面に表示\n//         setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: messageToSend, isLocal: true }]);\n//         setAiSuggestions([null, null]); // 送信したら提案をクリア\n\n//         // shouldSetMoveInProgressがtrueの場合のみモーション進行中状態にする\n//         if (shouldSetMoveInProgress) {\n//           setIsMoveInProgress(true);\n//         }\n//         // AI提案やボイスコマンドの場合は、isMoveInProgressは変更しない\n//         // (以前のモーションが進行中であればそのまま、そうでなければfalseのまま)\n\n//       } catch (error) {\n//         console.error(\"Failed to send data:\", error);\n//       }\n//     } else {\n//       console.warn(\"Cannot send message: Not in a room, 'me' object is not available, or data stream is not ready.\");\n//     }\n//   };\n\n//   /**\n//    * マイクのミュート/ミュート解除を切り替えるハンドラ\n//    */\n//   const handleMute = async () => {\n//     console.log(\"start\");\n//     if (!audioPublicationRef.current) {\n//       console.warn(\"Audio publication not available. Cannot toggle mute.\");\n//       return;\n//     }\n\n//     try {\n//       if (isMuted) {\n//         // 現在ミュート状態なら、ミュートを解除\n//         await audioPublicationRef.current.enable();\n//         console.log(\"Microphone unmuted.\");\n//       } else {\n//         // 現在ミュート状態でないなら、ミュート\n//         await audioPublicationRef.current.disable();\n//         console.log(\"Microphone muted.\");\n//       }\n//       setIsMuted(!isMuted); // ミュート状態をトグル\n//     } catch (error) {\n//       console.error(\"Failed to toggle microphone mute state:\", error);\n//     }\n//   };\n\n//   // AIモードが変更されたときにシグナルを送信するためのフラグ\n//   const isInitialAiModeRender = useRef(true);\n\n//   /**\n//    * AIモードの状態変更を監視し、シグナルを送信するuseEffect\n//    */\n//   useEffect(() => {\n//     // 初回レンダリング時はシグナルを送信しない\n//     if (isInitialAiModeRender.current) {\n//       isInitialAiModeRender.current = false;\n//       return;\n//     }\n\n//     // me オブジェクトとデータストリームが利用可能であることを確認\n//     if (!me || !localDataStreamRef.current) {\n//       return;\n//     }\n\n//     if (isAiModeOn) {\n//       // AIモードがONになったら、AIに提案を要求するメッセージを送信\n//       localDataStreamRef.current.write(\"ai_assist_on\");\n//       console.log(\"Sent AI_MODE_REQUEST_SUGGESTIONS signal.\");\n//       setAiSuggestions([null, null]); // 新しいセッションのために提案をクリア\n//     } else {\n//       // AIモードがOFFになったら提案をクリアし、AIモード終了のシグナルを送信\n//       localDataStreamRef.current.write(\"ai_assist_off\");\n//       console.log(\"Sent AI_MODE_OFF_SIGNAL.\");\n//       setAiSuggestions([null, null]); // 提案をクリア\n//     }\n//   }, [isAiModeOn, me, localDataStreamRef]); // isAiModeOn, me, localDataStreamRef の変更に反応\n\n//   /**\n//    * AIモードを切り替えるハンドラ\n//    * この関数はAIモードの状態をトグルするのみで、シグナル送信はuseEffectに任せる\n//    */\n//   /* eslint-disable */\n//   const handleAiModeToggle = () => {\n//     setIsAiModeOn(prev => !prev);\n//   };\n//   /* eslint-enable */\n\n//   // 🌟追加: 音声認識の開始・停止を切り替えるハンドラ\n//   const handleToggleListening = () => {\n//     if (!recognition.current) {\n//       console.error(\"SpeechRecognition API is not initialized.\");\n//       return;\n//     }\n\n//     if (isListening) {\n//       // 認識を停止\n//       recognition.current.stop();\n//       console.log(\"Stopped speech recognition.\");\n//     } else {\n//       // 認識を開始\n//       recognition.current.start();\n//       console.log(\"Started speech recognition.\");\n//     }\n//     setIsListening(!isListening);\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"header\">\n//         <div className=\"header-left\">\n//           <button className=\"motion-btn\" disabled={isAiModeOn || isMoveInProgress}>モーション</button>\n//           {/* 翻訳されたテキストを表示する要素を追加 */}\n//           {translatedText && (\n//             <div className=\"translated-text\">\n//               <span className=\"translated-text-label\">翻訳: </span>\n//               <span className=\"translated-text-content\">{translatedText}</span>\n//             </div>\n//           )}\n//         </div>\n//         <div className=\"header-right\">\n//           <button onClick={handleLogout} className=\"logout-btn\">ログアウト</button>\n//           <button className=\"voice-btn\" disabled={isAiModeOn || isMoveInProgress}>ボイス</button>\n//         </div>\n//       </div>\n//       <div className=\"main-container\">\n//         <div className=\"side-panel\">\n//           <div className=\"side-panel-content\">\n//             {Object.keys(messages).slice(0, 14).map(key => ( // 左側のボタン数を調整\n//               <button\n//                 key={key}\n//                 // 左側のボタンは \"template_motion_〇〇\" 形式で送信\n//                 onClick={() => handleSend(`template_motion_${messages[key].japanese}`)}\n//                 className=\"side-btn\"\n//                 disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\n//               >\n//                 {messages[key].japanese} {/* 常に日本語表示 */}\n//               </button>\n//             ))}\n//           </div>\n//         </div>\n//         <div className=\"main-area\">\n//           <div className=\"room-controls\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"ルーム名を入力\"\n//               value={roomName}\n//               onChange={(e) => setRoomName(e.target.value)}\n//               className=\"room-input\"\n//               disabled={!!me} // ルーム参加中は入力不可にする\n//             />\n//             {!me ? ( // ルームに参加していない場合\n//               <button onClick={handleJoinRoom} className=\"join-room-btn\" disabled={!skywayContext || !roomName}>\n//                 ルームに参加\n//               </button>\n//             ) : ( // ルームに参加している場合\n//               <button onClick={handleLeaveRoom} className=\"leave-room-btn\">\n//                 ルームを退出\n//               </button>\n//             )}\n//           </div>\n//           <div className=\"robot-display\" ref={robotDisplayRef}>\n//             {/* リモートのビデオストリームがここに動的に追加されます */}\n//             {/* ルーム情報はコンソールに表示されるため、ここでは表示しません */}\n\n//             {/* AIからの提案表示 */}\n//             {(aiSuggestions[0] || aiSuggestions[1]) && (\n//               <div className=\"ai-suggestions\">\n//                 {aiSuggestions[0] && (\n//                   <button\n//                     onClick={() => handleSend(aiSuggestions[0])}\n//                     className=\"ai-suggestion-btn\"\n//                     disabled={isMoveInProgress} // モーション中は無効化\n//                   >\n//                     {aiSuggestions[0].text}\n//                   </button>\n//                 )}\n//                 {aiSuggestions[1] && (\n//                   <button\n//                     onClick={() => handleSend(aiSuggestions[1])}\n//                     className=\"ai-suggestion-btn\"\n//                     disabled={isMoveInProgress} // モーション中は無効化\n//                   >\n//                     {aiSuggestions[1].text}\n//                   </button>\n//                 )}\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//         <div className=\"side-panel right\">\n//           <div className=\"side-panel-content\">\n//             {Object.keys(messages).slice(14).map(key => ( // 右側のボタン数を調整\n//               <button\n//                 key={key}\n//                 // 右側のボタンは \"template_voice_〇〇\" 形式で送信\n//                 onClick={() => handleSend(`template_voice_${messages[key].japanese}`)}\n//                 className=\"side-btn\"\n//                 disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\n//               >\n//                 {messages[key].japanese} {/* 常に日本語表示 */}\n//               </button>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//       <div className=\"bottom-controls\">\n//         <button\n//           className={`control-btn ai-btn`}\n//           onClick={() => handleAiModeToggle()}\n//           disabled={!me} // ルームに参加していない場合は無効\n//         >\n//           {isAiModeOn ? 'AIモードOFF' : 'AIモードON'}\n//         </button>\n//         {/* 🌟追加: 音声認識ボタン */}\n//         <button\n//           className={`control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`}\n//           onClick={handleToggleListening}\n//           disabled={!me || !localDataStreamRef.current || isAiModeOn} // ルーム未参加、データストリーム未準備、AIモード中は無効\n//         >\n//           {isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'}\n//         </button>\n//         <button\n//           className={`control-btn mic-btn ${isMuted ? 'muted' : ''}`} // ミュート状態に応じてクラスを追加\n//           onClick={handleMute}\n//           id=\"micBtn\"\n//           disabled={!me || !audioPublicationRef.current || isAiModeOn} // ルームに参加していない、またはオーディオが公開されていない、AIモード中は無効\n//         >\n//           {isMuted ? '🔇 マイクミュート' : '🎤 マイクON'} {/* ミュート状態に応じてアイコンとテキストを変更 */}\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Home;\n\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport './style.css'; // style.cssを再度有効化\nimport { nowInSec, SkyWayAuthToken, SkyWayContext, SkyWayRoom, SkyWayStreamFactory, uuidV4, RemoteDataStream,\n// RemoteDataStreamをインポート\nRemoteVideoStream,\n// RemoteVideoStreamをインポート\nRemoteAudioStream // RemoteAudioStreamをインポート\n} from '@skyway-sdk/room';\n\n/**\r\n * ホーム画面コンポーネント\r\n * @param {object} props - プロパティ\r\n * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home({\n  setIsLoggedIn\n}) {\n  _s();\n  // ルーム名\n  const [roomName, setRoomName] = useState(\"\");\n  // 自分の参加者情報 (ルームに参加すると設定されます)\n  const [me, setMe] = useState(null);\n  // SkyWayコンテキストのインスタンス\n  const [skywayContext, setSkywayContext] = useState(null);\n  // SkyWayルームのインスタンス\n  const [skywayRoom, setSkywayRoom] = useState(null);\n  // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\n  const remoteVideoElements = useRef(new Map());\n  // リモートビデオを表示するDOM要素への参照\n  const robotDisplayRef = useRef(null);\n  // ローカルストリームの参照を保持\n  const localStreamRef = useRef(null);\n  // 受信したメッセージを表示するための状態\n  // src/home.js\n  // eslint-disable-next-line no-unused-vars\n  const [receivedMessages, setReceivedMessages] = useState([]);\n  // 送信したデータストリームの参照を保持\n  const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\n  // マイクの状態を表示するための状態 (ミュート状態を管理)\n  const [isMuted, setIsMuted] = useState(false);\n  // オーディオストリームのPublicationを保持するための参照\n  const audioPublicationRef = useRef(null);\n  // AIモードがONかどうかを管理する状態\n  const [isAiModeOn, setIsAiModeOn] = useState(false);\n  // AIからの提案を保持する状態\n  // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\n  const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\n  // モーションが進行中かどうかを管理する状態\n  const [isMoveInProgress, setIsMoveInProgress] = useState(false);\n  // 翻訳されたテキストを保持する状態を追加\n  const [translatedText, setTranslatedText] = useState(\"\");\n  // 🌟追加: 音声認識が実行中かどうかを管理する状態\n  const [isListening, setIsListening] = useState(false);\n  // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\n  const recognition = useRef(null);\n\n  // メッセージとモーションの多言語マッピング\n  const messages = useMemo(() => ({\n    hello: {\n      japanese: 'リセット',\n      english: 'Hello'\n    },\n    goodbye: {\n      japanese: '決めポーズ',\n      english: 'Goodbye'\n    },\n    bow: {\n      japanese: 'バイバイ',\n      english: 'Bow'\n    },\n    flap: {\n      japanese: 'YES',\n      english: 'Flap'\n    },\n    lookUp: {\n      japanese: 'NO',\n      english: 'Look up'\n    },\n    lookDown: {\n      japanese: '右手を上げる',\n      english: 'Look down'\n    },\n    lookRight: {\n      japanese: '右手を下げる',\n      english: 'Look right'\n    },\n    lookLeft: {\n      japanese: '左手を上げる',\n      english: 'Left hand up' // Changed from 'Look left' for clarity\n    },\n    nod: {\n      japanese: '左手を下げる',\n      english: 'Left hand down' // Changed from 'Nod' for clarity\n    },\n    tiltHead: {\n      japanese: '上を向く',\n      english: 'Look up' // Changed from 'Tilt head' for clarity\n    },\n    spin: {\n      japanese: '下を向く',\n      english: 'Look down' // Changed from 'Spin' for clarity\n    },\n    jump: {\n      japanese: '右を向く',\n      english: 'Look right' // Changed from 'Jump' for clarity\n    },\n    dance: {\n      japanese: '左を向く',\n      english: 'Look left' // Changed from 'Dance' for clarity\n    },\n    bowDeep: {\n      japanese: 'パタパタ',\n      english: 'Flap arms' // Changed from 'Deep bow' for clarity\n    },\n    doingSomething: {\n      japanese: 'こんにちは',\n      english: 'Hello'\n    },\n    thankYou: {\n      japanese: 'バイバイ',\n      english: 'Goodbye' // Changed from 'Thank you' for clarity\n    },\n    good: {\n      japanese: 'ようこそ',\n      english: 'Welcome' // Changed from 'Good' for clarity\n    },\n    ookini: {\n      japanese: 'ありがとう',\n      english: 'Thank you (Kansai dialect)'\n    },\n    amazing: {\n      japanese: '楽しんでね',\n      english: 'Enjoy' // Changed from 'Amazing' for clarity\n    }\n  }), []);\n\n  /**\r\n   * ログアウトボタンクリック時のハンドラ\r\n   */\n  const handleLogout = () => {\n    setIsLoggedIn(false); // ログイン状態をfalseに設定\n  };\n\n  // SkyWay App ID と Secret Key\n  // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\n  // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\n  const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\n  const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\n\n  // SkyWay認証トークンの生成\n  const token = useMemo(() => {\n    if (appId == null || secretKey == null) return undefined;\n    return new SkyWayAuthToken({\n      jti: uuidV4(),\n      // JWT ID\n      iat: nowInSec(),\n      // 発行時刻\n      exp: nowInSec() + 60 * 60 * 24,\n      // 有効期限 (24時間)\n      version: 3,\n      scope: {\n        appId: appId,\n        rooms: [{\n          name: \"*\",\n          // すべてのルーム名に適用\n          methods: [\"create\", \"close\", \"updateMetadata\"],\n          // ルーム操作の権限\n          member: {\n            name: \"*\",\n            // すべてのメンバーに適用\n            methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\n          }\n        }],\n        turn: {\n          enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\n        }\n      }\n    }).encode(secretKey);\n  }, [appId, secretKey]);\n\n  /**\r\n   * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n   * トークンが利用可能になったときに一度だけ実行されます。\r\n   */\n  useEffect(() => {\n    if (!token) return;\n    let currentContext;\n    const initContext = async () => {\n      try {\n        currentContext = await SkyWayContext.Create(token);\n        setSkywayContext(currentContext);\n        console.log(\"SkyWayContext created successfully.\");\n      } catch (error) {\n        console.error(\"Failed to create SkyWayContext:\", error);\n      }\n    };\n    initContext();\n\n    // コンポーネントのアンマウント時にコンテキストを破棄\n    return () => {\n      if (currentContext) {\n        currentContext.dispose();\n        console.log(\"SkyWayContext disposed.\");\n      }\n    };\n  }, [token]); // tokenが変更されたときにのみ実行\n\n  // 🌟追加: SpeechRecognition APIの初期化\n  useEffect(() => {\n    // ブラウザがSpeechRecognitionに対応しているか確認\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      console.error(\"SpeechRecognition API is not supported by this browser.\");\n      return;\n    }\n\n    // SpeechRecognitionオブジェクトを初期化\n    recognition.current = new SpeechRecognition();\n    recognition.current.continuous = true; // 連続的な認識\n    recognition.current.interimResults = true; // 中間結果を返す\n    recognition.current.lang = 'ja-JP'; // 日本語を指定\n\n    // 音声認識の結果を処理するハンドラ\n    recognition.current.onresult = async event => {\n      let finalTranscript = '';\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\n        if (event.results[i].isFinal) {\n          finalTranscript = event.results[i][0].transcript;\n          break; // 最初の確定した結果のみを取得\n        }\n      }\n\n      // 確定した結果が空でなければ翻訳してSkywayで送信\n      if (finalTranscript.trim() !== '') {\n        console.log(\"Transcription final result:\", finalTranscript);\n\n        // -- 翻訳処理の追加 --\n        // ここではGoogle Translate WebAPIを模倣したfetch API呼び出しを記述します。\n        // 実際のAPIキーやエンドポイントは環境に合わせて変更してください。\n        try {\n          const translationApiUrl = \"https://translation-api-endpoint.com/translate\"; // 適切な翻訳APIエンドポイントに置き換える\n          // Fetch APIを使って翻訳APIを呼び出す\n          // NOTE: この部分は架空のAPI呼び出しです。\n          // 実際のGoogle Translate Web APIの利用には、認証キーや適切なエンドポイントが必要です。\n          // もし実際のAPIを利用する場合は、こちらを実際のコードに置き換えてください。\n          // 例:\n          // const response = await fetch(translationApiUrl, {\n          //   method: 'POST',\n          //   headers: {\n          //     'Content-Type': 'application/json',\n          //     'Authorization': 'Bearer YOUR_API_KEY'\n          //   },\n          //   body: JSON.stringify({\n          //     text: finalTranscript,\n          //     target_lang: 'en'\n          //   })\n          // });\n          // const data = await response.json();\n          // const translatedText = data.translatedText;\n          const translatedText = await translateText(finalTranscript, 'ja', 'en'); // 新しく作成する関数を呼び出す\n          setTranslatedText(translatedText); // 翻訳結果を状態に保存\n\n          // Skywayのデータストリームで送信\n          if (localDataStreamRef.current && me) {\n            // 指定されたフォーマットでデータを送信\n            const formattedMessage = `translate_data_web:${translatedText}`;\n            localDataStreamRef.current.write(formattedMessage);\n            console.log(`Sent translated text: \"${formattedMessage}\"`);\n          }\n        } catch (error) {\n          console.error(\"Translation failed:\", error);\n          // 翻訳に失敗した場合は、元の日本語をそのまま送信するなどのフォールバック処理を検討\n          if (localDataStreamRef.current && me) {\n            localDataStreamRef.current.write(finalTranscript);\n            console.log(`Sent transcription (no translation): \"${finalTranscript}\"`);\n          }\n        }\n        // -- 翻訳処理の追加ここまで --\n\n        // 自分の画面にも表示\n        setReceivedMessages(prevMessages => [...prevMessages, {\n          senderId: me.id,\n          message: finalTranscript,\n          isLocal: true\n        }]);\n      }\n    };\n\n    // 認識エラー時のハンドラ\n    recognition.current.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n      setIsListening(false); // エラー時はリスニング状態を停止\n    };\n\n    // 認識終了時のハンドラ\n    recognition.current.onend = () => {\n      console.log(\"Speech recognition ended.\");\n      // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\n      // if (isListening) {\n      //   recognition.current.start();\n      // }\n    };\n\n    // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\n    return () => {\n      if (recognition.current) {\n        recognition.current.stop();\n      }\n    };\n  }, [me, localDataStreamRef]);\n\n  // 🌟追加: テキストを翻訳する関数 (Google Translate APIを模倣)\n  async function translateText(text, sourceLang, targetLang) {\n    try {\n      const chatHistory = [];\n      chatHistory.push({\n        role: \"user\",\n        parts: [{\n          text: `Translate the following Japanese text to English: \"${text}\"`\n        }]\n      });\n      const payload = {\n        contents: chatHistory\n      };\n      const apiKey = \"\";\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const result = await response.json();\n      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {\n        const translatedText = result.candidates[0].content.parts[0].text;\n        // APIから返される余分な文字を削除\n        const cleanedText = translatedText.replace(/['\"]$/, '').replace(/^['\"]/, '');\n        return cleanedText;\n      } else {\n        console.error(\"Translation API response is malformed.\");\n        return text;\n      }\n    } catch (error) {\n      console.error(\"Error during translation:\", error);\n      return text; // エラー時は元のテキストを返す\n    }\n  }\n\n  /**\r\n   * リモートストリームをDOMに追加するヘルパー関数\r\n   * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\n  const attachRemoteStream = (stream, memberId) => {\n    if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\n      // 既存のビデオ要素があれば削除\n      const existingVideo = remoteVideoElements.current.get(memberId);\n      if (existingVideo) {\n        robotDisplayRef.current.removeChild(existingVideo);\n        remoteVideoElements.current.delete(memberId);\n      }\n      const video = document.createElement(\"video\");\n      video.autoplay = true; // 自動再生\n      video.playsInline = true; // インライン再生 (iOSなどで必要)\n      video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\n      video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\n      stream.attach(video); // ストリームをビデオ要素のソースに設定\n      robotDisplayRef.current.appendChild(video);\n      remoteVideoElements.current.set(memberId, video);\n      console.log(`Attached stream from ${memberId} to DOM.`);\n    } else {\n      console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\n    }\n  };\n\n  /**\r\n   * データストリームの受信を処理するヘルパー関数\r\n   * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\n  const handleDataStream = (stream, memberId) => {\n    if (stream instanceof RemoteDataStream) {\n      stream.onData.add(data => {\n        console.log(`Received data from ${memberId}:`, data);\n        // 受信したメッセージを状態に追加\n        setReceivedMessages(prevMessages => [...prevMessages, {\n          senderId: memberId,\n          message: data\n        }]);\n\n        // \"move_finish\" シグナルをチェック\n        if (data === \"move_finish\") {\n          console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\n          setIsMoveInProgress(false); // モーション終了\n        }\n\n        // AI提案のフォーマットをチェック\n        // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\n        const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\n        const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\n        if (combinedMatch) {\n          const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\n          const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\n\n          setAiSuggestions([{\n            key: 'ai_assist_1',\n            text: suggestion1Content\n          },\n          // キーをai_assist_1に修正\n          {\n            key: 'ai_assist_2',\n            text: suggestion2Content\n          } // キーをai_assist_2に修正\n          ]);\n          console.log(\"Received combined AI suggestions.\");\n        } else {\n          // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\n          const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\n          const singleMatch = String(data).match(aiSingleSuggestionRegex);\n          if (singleMatch) {\n            const suggestionNumber = parseInt(singleMatch[1], 10);\n            const suggestionContent = singleMatch[2];\n            if (suggestionNumber === 1 || suggestionNumber === 2) {\n              setAiSuggestions(prevSuggestions => {\n                const newSuggestions = [...prevSuggestions];\n                newSuggestions[suggestionNumber - 1] = {\n                  key: `ai_assist_${suggestionNumber}`,\n                  // キーをai_assist_Nに修正\n                  text: suggestionContent\n                };\n                return newSuggestions;\n              });\n              console.log(`Received single AI suggestion ${suggestionNumber}.`);\n            }\n          }\n        }\n\n        // 新しい翻訳フォーマットをチェック\n        const translateRegex = /^translate_request:(.*)$/;\n        const translateMatch = String(data).match(translateRegex);\n        if (translateMatch) {\n          const translatedContent = translateMatch[1];\n          setTranslatedText(translatedContent); // 状態を更新\n          console.log(`Received translated text: ${translatedContent}`);\n        } else {\n          // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\n          // setTranslatedText(\"\");\n        }\n      });\n      console.log(`Listening for data from ${memberId}.`);\n    } else {\n      console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\n    }\n  };\n\n  /**\r\n   * ルームに参加するハンドラ\r\n   * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n   */\n  const handleJoinRoom = async () => {\n    if (!skywayContext) {\n      console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\n      return;\n    }\n    if (!roomName) {\n      console.error(\"Room name is empty. Please enter a room name to join.\");\n      return;\n    }\n    if (skywayRoom && me) {\n      console.warn(\"Already in a room. Please leave the current room first.\");\n      return;\n    }\n    try {\n      // 指定されたルーム名でP2Pルームを作成または検索\n      const room = await SkyWayRoom.FindOrCreate(skywayContext, {\n        type: \"p2p\",\n        // P2Pルームタイプ\n        name: roomName\n      });\n\n      // roomオブジェクトが有効であることを確認\n      if (!room) {\n        console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\n        throw new Error(\"Failed to create or find SkyWayRoom.\");\n      }\n      setSkywayRoom(room);\n      console.log(`SkyWayRoom '${roomName}' found or created.`);\n\n      // ルームに参加し、自分のメンバー情報を取得\n      const localMember = await room.join();\n      // localMemberが有効であることを確認\n      if (!localMember) {\n        console.error(\"room.join() returned null or undefined localMember.\");\n        throw new Error(\"Failed to join the room.\");\n      }\n      setMe(localMember);\n      console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\n      // ルームIDと自分のIDをコンソールに表示\n      console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\n\n      // 自分のカメラとマイクのストリームを作成し、公開\n      const {\n        audio,\n        video\n      } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\n      localStreamRef.current = video; // ローカルビデオストリームを保存\n      await localMember.publish(video);\n      const publication_audio = await localMember.publish(audio);\n      audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\n      setIsMuted(false);\n      console.log(\"Published local camera and microphone stream.\");\n\n      // 自分のデータストリームを作成し、公開\n      const dataStream = await SkyWayStreamFactory.createDataStream();\n      localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\n      await localMember.publish(dataStream);\n      console.log(\"Published local data stream.\");\n\n      // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\n      setIsMoveInProgress(false);\n\n      // --- 既存のストリームを購読するロジック ---\n      // ルーム内の既存の公開ストリームをすべて購読する\n      for (const publication of room.publications) {\n        // 自分のストリームは購読しない\n        if (localMember.id === publication.publisher.id) {\n          continue;\n        }\n        try {\n          const {\n            stream\n          } = await localMember.subscribe(publication.id);\n          console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\n          if (publication.contentType === 'video' || publication.contentType === 'audio') {\n            attachRemoteStream(stream, publication.publisher.id);\n          } else if (publication.contentType === 'data') {\n            handleDataStream(stream, publication.publisher.id);\n          } else {\n            console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\n          }\n        } catch (subscribeError) {\n          console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\n        }\n      }\n\n      // --- ルームイベントリスナーの設定 ---\n      // メンバーがルームに参加したときのイベント\n      if (room.onMemberJoined) {\n        room.onMemberJoined.add(e => {\n          console.log(`Member joined: ${e.member.id}`);\n        });\n      } else {\n        console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\n      }\n\n      // メンバーがルームを離脱したときのイベント\n      if (room.onMemberLeft) {\n        room.onMemberLeft.add(e => {\n          console.log(`Member left: ${e.member.id}`);\n          // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\n          const videoElement = remoteVideoElements.current.get(e.member.id);\n          if (videoElement && robotDisplayRef.current) {\n            robotDisplayRef.current.removeChild(videoElement);\n            remoteVideoElements.current.delete(e.member.id);\n            console.log(`Removed video for member ${e.member.id}`);\n          }\n          // データストリーム関連のクリーンアップもここに追加可能ですが、\n          // onDataリスナーはストリームが閉じられると自動的に停止します。\n        });\n      } else {\n        console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\n      }\n\n      // ストリームが公開されたときのイベント\n      if (room.onStreamPublished) {\n        room.onStreamPublished.add(async e => {\n          console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\n          // 自分のストリームは購読しない\n          if (localMember.id !== e.publication.publisher.id) {\n            try {\n              // リモートストリームを購読\n              const {\n                stream\n              } = await localMember.subscribe(e.publication.id);\n              console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\n              if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\n                attachRemoteStream(stream, e.publication.publisher.id);\n              } else if (e.publication.contentType === 'data') {\n                handleDataStream(stream, e.publication.publisher.id);\n              } else {\n                console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\n              }\n            } catch (subscribeError) {\n              console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\n            }\n          } else {\n            console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\n          }\n        });\n      } else {\n        console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\n      }\n\n      // ストリームが非公開になったときのイベント\n      if (room.onStreamUnpublished) {\n        room.onStreamUnpublished.add(e => {\n          console.log(`Stream unpublished by ${e.publication.publisher.id}`);\n          // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\n          const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\n          if (videoElement && robotDisplayRef.current) {\n            robotDisplayRef.current.removeChild(videoElement);\n            remoteVideoElements.current.delete(e.publication.publisher.id);\n            console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\n          }\n        });\n      } else {\n        console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\n      }\n    } catch (error) {\n      console.error(\"Failed to join room:\", error);\n      // エラー発生時に状態をリセットして再試行可能にする\n      setSkywayRoom(null);\n      setMe(null);\n      // エラー時に既存のビデオ要素をクリーンアップ\n      if (robotDisplayRef.current) {\n        Array.from(robotDisplayRef.current.children).forEach(child => {\n          if (child.tagName === 'VIDEO') {\n            // ビデオ要素のsrcObjectをクリアし、トラックを停止\n            if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\n              child.srcObject.getTracks().forEach(track => track.stop());\n              child.srcObject = null;\n            }\n            child.remove(); // DOMから要素を削除\n          }\n        });\n      }\n      remoteVideoElements.current.clear();\n      if (localStreamRef.current) {\n        // LocalVideoStreamのstop()メソッドを呼び出す\n        if (typeof localStreamRef.current.stop === 'function') {\n          localStreamRef.current.stop();\n          console.log(\"Stopped local media stream during join error cleanup.\");\n        } else {\n          console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\n        }\n        localStreamRef.current = null;\n      }\n      // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\n      localDataStreamRef.current = null; // 参照をクリア\n      console.log(\"Local data stream reference cleared during join error cleanup.\");\n      // ミュート状態もリセット\n      setIsMuted(false);\n      audioPublicationRef.current = null;\n      setIsMoveInProgress(false);\n      // エラー時もモーション状態をリセット\n      setTranslatedText(\"\"); // 翻訳テキストをクリア\n    }\n  };\n\n  /**\r\n   * ルームから退出するハンドラ\r\n   */\n  const handleLeaveRoom = async () => {\n    if (skywayRoom) {\n      await skywayRoom.close();\n      console.log(`Left room '${roomName}'.`);\n      setSkywayRoom(null);\n      setMe(null);\n      // アンマウント時のクリーンアップ処理と同様\n      if (robotDisplayRef.current) {\n        Array.from(robotDisplayRef.current.children).forEach(child => {\n          if (child.tagName === 'VIDEO') {\n            if (child.srcObject) {\n              const tracks = child.srcObject.getTracks();\n              tracks.forEach(track => track.stop());\n            }\n            child.remove();\n          }\n        });\n      }\n      remoteVideoElements.current.clear();\n      if (localStreamRef.current) {\n        if (typeof localStreamRef.current.stop === 'function') {\n          localStreamRef.current.stop();\n          console.log(\"Stopped local media stream during leave.\");\n        }\n        localStreamRef.current = null;\n      }\n      localDataStreamRef.current = null;\n      setIsMuted(false);\n      audioPublicationRef.current = null;\n      setIsMoveInProgress(false);\n      setTranslatedText(\"\"); // 翻訳テキストをクリア\n      // ルームを離脱したため、AI提案もリセット\n      setAiSuggestions([null, null]);\n    }\n  };\n\n  /**\r\n   * データストリームでメッセージを送信するハンドラ\r\n   * @param {string} message - 送信するメッセージ\r\n   */\n  const handleSend = message => {\n    if (localDataStreamRef.current && me) {\n      localDataStreamRef.current.write(message);\n      console.log(`Sent message: \"${message}\"`);\n      // 送信したメッセージを画面に追加\n      setReceivedMessages(prevMessages => [...prevMessages, {\n        senderId: me.id,\n        message: message,\n        isLocal: true\n      }]);\n\n      // \"move_*\" または \"ai_assist_*\" で始まる場合はモーション中と判断\n      if (message.startsWith(\"move_\") || message.startsWith(\"ai_assist_\")) {\n        console.log(\"Motion command sent. Disabling side panel buttons.\");\n        setIsMoveInProgress(true);\n      }\n    } else {\n      console.error(\"Local data stream is not available or not in a room.\");\n    }\n  };\n\n  /**\r\n   * マイクのミュート/ミュート解除を切り替えるハンドラ\r\n   */\n  const handleMute = async () => {\n    if (!audioPublicationRef.current) {\n      console.error(\"Audio publication is not available.\");\n      return;\n    }\n    try {\n      if (isMuted) {\n        // ミュート解除\n        await audioPublicationRef.current.unmute();\n        console.log(\"Audio unmuted.\");\n        setIsMuted(false);\n      } else {\n        // ミュート\n        await audioPublicationRef.current.mute();\n        console.log(\"Audio muted.\");\n        setIsMuted(true);\n      }\n    } catch (error) {\n      console.error(\"Failed to toggle mute state:\", error);\n    }\n  };\n\n  /**\r\n   * AIモードを切り替えるハンドラ\r\n   */\n  const handleAiModeToggle = () => {\n    setIsAiModeOn(prev => !prev);\n    console.log(`AI mode toggled: ${!isAiModeOn}`);\n  };\n\n  // 🌟追加: 音声認識の開始/停止を切り替えるハンドラ\n  const handleToggleListening = () => {\n    if (!recognition.current) {\n      console.error(\"Speech recognition is not initialized.\");\n      return;\n    }\n    if (isListening) {\n      recognition.current.stop();\n      console.log(\"Speech recognition stopped.\");\n    } else {\n      recognition.current.start();\n      console.log(\"Speech recognition started.\");\n    }\n    setIsListening(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1689,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1688,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"remote-video-container\",\n          ref: robotDisplayRef,\n          children: me && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Room ID: \", roomName, \" / My ID: \", me.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1697,\n            columnNumber: 20\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1695,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-display\",\n          children: receivedMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-message ${msg.isLocal ? 'local-message' : 'remote-message'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [msg.senderId, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1704,\n              columnNumber: 17\n            }, this), \" \", msg.message]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1703,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1701,\n          columnNumber: 11\n        }, this), translatedText && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"translation-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Translated Text:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1712,\n            columnNumber: 15\n          }, this), \" \", translatedText]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1711,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"room-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"\\u30EB\\u30FC\\u30E0\\u540D\\u3092\\u5165\\u529B\",\n            value: roomName,\n            onChange: e => setRoomName(e.target.value),\n            disabled: !!me // ルーム参加中は無効\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1718,\n            columnNumber: 13\n          }, this), me ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLeaveRoom,\n            children: \"\\u9000\\u51FA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1726,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleJoinRoom,\n            disabled: !skywayContext || !roomName,\n            children: \"\\u53C2\\u52A0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1728,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1717,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1693,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"AI\\u63D0\\u6848\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1736,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-suggestions\",\n          children: aiSuggestions.map((suggestion, index) => suggestion && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSend(`template_voice_${suggestion.text}`),\n            className: \"side-btn\",\n            disabled: !me || isMoveInProgress // 未参加、モーション中は無効化\n            ,\n            children: suggestion.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1740,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1737,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u30C6\\u30F3\\u30D7\\u30EC\\u30FC\\u30C8\\u30DC\\u30A4\\u30B9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1751,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"template-voices\",\n          children: Object.keys(messages).map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n            // 送信フォーマットを \"template_voice_〇〇\" 形式で送信\n            onClick: () => handleSend(`template_voice_${messages[key].japanese}`),\n            className: \"side-btn\",\n            disabled: isAiModeOn || !me || isMoveInProgress // AIモード中、未参加、モーション中は無効化\n            ,\n            children: [messages[key].japanese, \" \"]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1754,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1752,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1735,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1692,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn ai-btn`,\n        onClick: () => handleAiModeToggle(),\n        disabled: !me // ルームに参加していない場合は無効\n        ,\n        children: isAiModeOn ? 'AIモードOFF' : 'AIモードON'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1768,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`,\n        onClick: handleToggleListening,\n        disabled: !me || !localDataStreamRef.current || isAiModeOn // ルーム未参加、データストリーム未準備、AIモード中は無効\n        ,\n        children: isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1776,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `control-btn mic-btn ${isMuted ? 'muted' : ''}` // ミュート状態に応じてクラスを追加\n        ,\n        onClick: handleMute,\n        id: \"micBtn\",\n        disabled: !me || !audioPublicationRef.current // ルーム未参加、オーディオが公開されていない場合は無効\n        ,\n        children: isMuted ? 'マイクミュート中' : 'マイクON'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1783,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1767,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1687,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"NWNpkQGfcah/H07YYObfVlDojho=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","nowInSec","SkyWayAuthToken","SkyWayContext","SkyWayRoom","SkyWayStreamFactory","uuidV4","RemoteDataStream","RemoteVideoStream","RemoteAudioStream","jsxDEV","_jsxDEV","Home","setIsLoggedIn","_s","roomName","setRoomName","me","setMe","skywayContext","setSkywayContext","skywayRoom","setSkywayRoom","remoteVideoElements","Map","robotDisplayRef","localStreamRef","receivedMessages","setReceivedMessages","localDataStreamRef","isMuted","setIsMuted","audioPublicationRef","isAiModeOn","setIsAiModeOn","aiSuggestions","setAiSuggestions","isMoveInProgress","setIsMoveInProgress","translatedText","setTranslatedText","isListening","setIsListening","recognition","messages","hello","japanese","english","goodbye","bow","flap","lookUp","lookDown","lookRight","lookLeft","nod","tiltHead","spin","jump","dance","bowDeep","doingSomething","thankYou","good","ookini","amazing","handleLogout","appId","secretKey","token","undefined","jti","iat","exp","version","scope","rooms","name","methods","member","turn","enabled","encode","currentContext","initContext","Create","console","log","error","dispose","SpeechRecognition","window","webkitSpeechRecognition","current","continuous","interimResults","lang","onresult","event","finalTranscript","i","resultIndex","results","length","isFinal","transcript","trim","translationApiUrl","translateText","formattedMessage","write","prevMessages","senderId","id","message","isLocal","onerror","onend","stop","text","sourceLang","targetLang","chatHistory","push","role","parts","payload","contents","apiKey","apiUrl","response","fetch","method","headers","body","JSON","stringify","result","json","candidates","content","cleanedText","replace","attachRemoteStream","stream","memberId","existingVideo","get","removeChild","delete","video","document","createElement","autoplay","playsInline","className","dataset","attach","appendChild","set","warn","handleDataStream","onData","add","data","aiCombinedSuggestionRegex","combinedMatch","String","match","suggestion1Content","suggestion2Content","key","aiSingleSuggestionRegex","singleMatch","suggestionNumber","parseInt","suggestionContent","prevSuggestions","newSuggestions","translateRegex","translateMatch","translatedContent","handleJoinRoom","room","FindOrCreate","type","Error","localMember","join","audio","createMicrophoneAudioAndCameraStream","publish","publication_audio","dataStream","createDataStream","publication","publications","publisher","subscribe","contentType","subscribeError","onMemberJoined","e","onMemberLeft","videoElement","onStreamPublished","onStreamUnpublished","Array","from","children","forEach","child","tagName","srcObject","getTracks","track","remove","clear","handleLeaveRoom","close","tracks","handleSend","startsWith","handleMute","unmute","mute","handleAiModeToggle","prev","handleToggleListening","start","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","msg","index","placeholder","value","onChange","target","disabled","suggestion","Object","keys","_c","$RefreshReg$"],"sources":["C:/banpaku_2025/banpaku/src/home.js"],"sourcesContent":["\r\n// import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\n// import './style.css'; // style.cssを再度有効化\r\n// import {\r\n//   nowInSec,\r\n//   SkyWayAuthToken,\r\n//   SkyWayContext,\r\n//   SkyWayRoom,\r\n//   SkyWayStreamFactory,\r\n//   uuidV4,\r\n//   RemoteDataStream, // RemoteDataStreamをインポート\r\n//   RemoteVideoStream, // RemoteVideoStreamをインポート\r\n//   RemoteAudioStream, // RemoteAudioStreamをインポート\r\n// } from '@skyway-sdk/room';\r\n\r\n// /**\r\n//  * ホーム画面コンポーネント\r\n//  * @param {object} props - プロパティ\r\n//  * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n//  */\r\n// function Home({ setIsLoggedIn }) {\r\n//   // ルーム名\r\n//   const [roomName, setRoomName] = useState(\"\");\r\n//   // 自分の参加者情報 (ルームに参加すると設定されます)\r\n//   const [me, setMe] = useState(null);\r\n//   // SkyWayコンテキストのインスタンス\r\n//   const [skywayContext, setSkywayContext] = useState(null);\r\n//   // SkyWayルームのインスタンス\r\n//   const [skywayRoom, setSkywayRoom] = useState(null);\r\n//   // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\r\n//   const remoteVideoElements = useRef(new Map());\r\n//   // リモートビデオを表示するDOM要素への参照\r\n//   const robotDisplayRef = useRef(null);\r\n//   // ローカルストリームの参照を保持\r\n//   const localStreamRef = useRef(null);\r\n//   // 受信したメッセージを表示するための状態\r\n//   // src/home.js\r\n//   // eslint-disable-next-line no-unused-vars\r\n//   const [receivedMessages, setReceivedMessages] = useState([]);\r\n//   // 送信したデータストリームの参照を保持\r\n//   const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\r\n//   // マイクの状態を表示するための状態 (ミュート状態を管理)\r\n//   const [isMuted, setIsMuted] = useState(false);\r\n//   // オーディオストリームのPublicationを保持するための参照\r\n//   const audioPublicationRef = useRef(null);\r\n//   // AIモードがONかどうかを管理する状態\r\n//   const [isAiModeOn, setIsAiModeOn] = useState(false);\r\n//   // AIからの提案を保持する状態\r\n//   // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\r\n//   const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\r\n//   // モーションが進行中かどうかを管理する状態\r\n//   const [isMoveInProgress, setIsMoveInProgress] = useState(false);\r\n//   // 翻訳されたテキストを保持する状態を追加\r\n//   const [translatedText, setTranslatedText] = useState(\"\");\r\n//   // 🌟追加: 音声認識が実行中かどうかを管理する状態\r\n//   const [isListening, setIsListening] = useState(false);\r\n//   // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\r\n//   const recognition = useRef(null);\r\n\r\n\r\n//   // メッセージとモーションの多言語マッピング\r\n//   const messages = useMemo(() => ({\r\n//     hello: {\r\n//       japanese: 'リセット',\r\n//       english: 'Hello'\r\n//     },\r\n//     goodbye: {\r\n//       japanese: '決めポーズ',\r\n//       english: 'Goodbye'\r\n//     },\r\n//     bow: {\r\n//       japanese: 'バイバイ',\r\n//       english: 'Bow'\r\n//     },\r\n//     flap: {\r\n//       japanese: 'YES',\r\n//       english: 'Flap'\r\n//     },\r\n//     lookUp: {\r\n//       japanese: 'NO',\r\n//       english: 'Look up'\r\n//     },\r\n//     lookDown: {\r\n//       japanese: '右手を上げる',\r\n//       english: 'Look down'\r\n//     },\r\n//     lookRight: {\r\n//       japanese: '右手を下げる',\r\n//       english: 'Look right'\r\n//     },\r\n//     lookLeft: {\r\n//       japanese: '左手を上げる',\r\n//       english: 'Left hand up' // Changed from 'Look left' for clarity\r\n//     },\r\n//     nod: {\r\n//       japanese: '左手を下げる',\r\n//       english: 'Left hand down' // Changed from 'Nod' for clarity\r\n//     },\r\n//     tiltHead: {\r\n//       japanese: '上を向く',\r\n//       english: 'Look up' // Changed from 'Tilt head' for clarity\r\n//     },\r\n//     spin: {\r\n//       japanese: '下を向く',\r\n//       english: 'Look down' // Changed from 'Spin' for clarity\r\n//     },\r\n//     jump: {\r\n//       japanese: '右を向く',\r\n//       english: 'Look right' // Changed from 'Jump' for clarity\r\n//     },\r\n//     dance: {\r\n//       japanese: '左を向く',\r\n//       english: 'Look left' // Changed from 'Dance' for clarity\r\n//     },\r\n//     bowDeep: {\r\n//       japanese: 'パタパタ',\r\n//       english: 'Flap arms' // Changed from 'Deep bow' for clarity\r\n//     },\r\n//     doingSomething: {\r\n//       japanese: 'こんにちは',\r\n//       english: 'Hello'\r\n//     },\r\n//     thankYou: {\r\n//       japanese: 'バイバイ',\r\n//       english: 'Goodbye' // Changed from 'Thank you' for clarity\r\n//     },\r\n//     good: {\r\n//       japanese: 'ようこそ',\r\n//       english: 'Welcome' // Changed from 'Good' for clarity\r\n//     },\r\n//     ookini: {\r\n//       japanese: 'ありがとう',\r\n//       english: 'Thank you (Kansai dialect)'\r\n//     },\r\n//     amazing: {\r\n//       japanese: '楽しんでね',\r\n//       english: 'Enjoy' // Changed from 'Amazing' for clarity\r\n//     }\r\n//   }), []);\r\n\r\n\r\n//   /**\r\n//    * ログアウトボタンクリック時のハンドラ\r\n//    */\r\n//   const handleLogout = () => {\r\n//     setIsLoggedIn(false); // ログイン状態をfalseに設定\r\n//   };\r\n\r\n//   // SkyWay App ID と Secret Key\r\n//   // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\r\n//   // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\r\n//   const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\r\n//   const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\r\n\r\n//   // SkyWay認証トークンの生成\r\n//   const token = useMemo(() => {\r\n//     if (appId == null || secretKey == null) return undefined;\r\n\r\n//     return new SkyWayAuthToken({\r\n//       jti: uuidV4(), // JWT ID\r\n//       iat: nowInSec(), // 発行時刻\r\n//       exp: nowInSec() + 60 * 60 * 24, // 有効期限 (24時間)\r\n//       version: 3,\r\n//       scope: {\r\n//         appId: appId,\r\n//         rooms: [\r\n//           {\r\n//             name: \"*\", // すべてのルーム名に適用\r\n//             methods: [\"create\", \"close\", \"updateMetadata\"], // ルーム操作の権限\r\n//             member: {\r\n//               name: \"*\", // すべてのメンバーに適用\r\n//               methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\r\n//             }\r\n//           }],\r\n//         turn: {\r\n//           enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\r\n//         }\r\n//       }\r\n//     }).encode(secretKey);\r\n\r\n//   }, [appId, secretKey]);\r\n\r\n//   /**\r\n//    * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n//    * トークンが利用可能になったときに一度だけ実行されます。\r\n//    */\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n\r\n//     let currentContext;\r\n//     const initContext = async () => {\r\n//       try {\r\n//         currentContext = await SkyWayContext.Create(token);\r\n//         setSkywayContext(currentContext);\r\n//         console.log(\"SkyWayContext created successfully.\");\r\n//       } catch (error) {\r\n//         console.error(\"Failed to create SkyWayContext:\", error);\r\n//       }\r\n//     };\r\n\r\n//     initContext();\r\n\r\n//     // コンポーネントのアンマウント時にコンテキストを破棄\r\n//     return () => {\r\n//       if (currentContext) {\r\n//         currentContext.dispose();\r\n//         console.log(\"SkyWayContext disposed.\");\r\n//       }\r\n//     };\r\n//   }, [token]); // tokenが変更されたときにのみ実行\r\n\r\n//   // 🌟追加: SpeechRecognition APIの初期化\r\n//   useEffect(() => {\r\n//     // ブラウザがSpeechRecognitionに対応しているか確認\r\n//     const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n//     if (!SpeechRecognition) {\r\n//       console.error(\"SpeechRecognition API is not supported by this browser.\");\r\n//       return;\r\n//     }\r\n\r\n//     // SpeechRecognitionオブジェクトを初期化\r\n//     recognition.current = new SpeechRecognition();\r\n//     recognition.current.continuous = true; // 連続的な認識\r\n//     recognition.current.interimResults = true; // 中間結果を返す\r\n//     recognition.current.lang = 'ja-JP'; // 日本語を指定\r\n\r\n//     // 音声認識の結果を処理するハンドラ\r\n//     recognition.current.onresult = (event) => {\r\n//       let finalTranscript = '';\r\n//       for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n//         if (event.results[i].isFinal) {\r\n//           finalTranscript = event.results[i][0].transcript;\r\n//           break; // 最初の確定した結果のみを取得\r\n//         }\r\n//       }\r\n\r\n//       // 確定した結果が空でなければSkywayで送信\r\n//       if (finalTranscript.trim() !== '') {\r\n//         console.log(\"Transcription final result:\", finalTranscript);\r\n//         // Skywayのデータストリームで送信\r\n//         if (localDataStreamRef.current && me) {\r\n//           localDataStreamRef.current.write(finalTranscript);\r\n//           console.log(`Sent transcription: \"${finalTranscript}\"`);\r\n//           // 自分の画面にも表示\r\n//           setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: finalTranscript, isLocal: true }]);\r\n//         }\r\n//       }\r\n//     };\r\n\r\n//     // 認識エラー時のハンドラ\r\n//     recognition.current.onerror = (event) => {\r\n//       console.error(\"Speech recognition error:\", event.error);\r\n//       setIsListening(false); // エラー時はリスニング状態を停止\r\n//     };\r\n\r\n//     // 認識終了時のハンドラ\r\n//     recognition.current.onend = () => {\r\n//       console.log(\"Speech recognition ended.\");\r\n//       // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\r\n//       // if (isListening) {\r\n//       //   recognition.current.start();\r\n//       // }\r\n//     };\r\n\r\n//     // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\r\n//     return () => {\r\n//       if (recognition.current) {\r\n//         recognition.current.stop();\r\n//       }\r\n//     };\r\n//   }, [me, localDataStreamRef]);\r\n\r\n//   /**\r\n//    * リモートストリームをDOMに追加するヘルパー関数\r\n//    * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n//    * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n//    */\r\n//   const attachRemoteStream = (stream, memberId) => {\r\n//     if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\r\n//       // 既存のビデオ要素があれば削除\r\n//       const existingVideo = remoteVideoElements.current.get(memberId);\r\n//       if (existingVideo) {\r\n//         robotDisplayRef.current.removeChild(existingVideo);\r\n//         remoteVideoElements.current.delete(memberId);\r\n//       }\r\n\r\n//       const video = document.createElement(\"video\");\r\n//       video.autoplay = true; // 自動再生\r\n//       video.playsInline = true; // インライン再生 (iOSなどで必要)\r\n//       video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\r\n//       video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\r\n//       stream.attach(video); // ストリームをビデオ要素のソースに設定\r\n//       robotDisplayRef.current.appendChild(video);\r\n//       remoteVideoElements.current.set(memberId, video);\r\n//       console.log(`Attached stream from ${memberId} to DOM.`);\r\n//     } else {\r\n//       console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * データストリームの受信を処理するヘルパー関数\r\n//    * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n//    * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n//    */\r\n//   const handleDataStream = (stream, memberId) => {\r\n//     if (stream instanceof RemoteDataStream) {\r\n//       stream.onData.add((data) => {\r\n//         console.log(`Received data from ${memberId}:`, data);\r\n//         // 受信したメッセージを状態に追加\r\n//         setReceivedMessages(prevMessages => [...prevMessages, { senderId: memberId, message: data }]);\r\n\r\n//         // \"move_finish\" シグナルをチェック\r\n//         if (data === \"move_finish\") {\r\n//           console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\r\n//           setIsMoveInProgress(false); // モーション終了\r\n//         }\r\n\r\n//         // AI提案のフォーマットをチェック\r\n//         // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\r\n//         const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\r\n//         const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\r\n\r\n//         if (combinedMatch) {\r\n//           const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\r\n//           const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\r\n\r\n//           setAiSuggestions([\r\n//             { key: 'ai_assist_1', text: suggestion1Content }, // キーをai_assist_1に修正\r\n//             { key: 'ai_assist_2', text: suggestion2Content }  // キーをai_assist_2に修正\r\n//           ]);\r\n//           console.log(\"Received combined AI suggestions.\");\r\n//         } else {\r\n//           // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\r\n//           const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\r\n//           const singleMatch = String(data).match(aiSingleSuggestionRegex);\r\n\r\n//           if (singleMatch) {\r\n//             const suggestionNumber = parseInt(singleMatch[1], 10);\r\n//             const suggestionContent = singleMatch[2];\r\n\r\n//             if (suggestionNumber === 1 || suggestionNumber === 2) {\r\n//               setAiSuggestions(prevSuggestions => {\r\n//                 const newSuggestions = [...prevSuggestions];\r\n//                 newSuggestions[suggestionNumber - 1] = {\r\n//                   key: `ai_assist_${suggestionNumber}`, // キーをai_assist_Nに修正\r\n//                   text: suggestionContent\r\n//                 };\r\n//                 return newSuggestions;\r\n//               });\r\n//               console.log(`Received single AI suggestion ${suggestionNumber}.`);\r\n//             }\r\n//           }\r\n//         }\r\n\r\n//         // 新しい翻訳フォーマットをチェック\r\n//         const translateRegex = /^translate_request:(.*)$/;\r\n//         const translateMatch = String(data).match(translateRegex);\r\n\r\n//         if (translateMatch) {\r\n//           const translatedContent = translateMatch[1];\r\n//           setTranslatedText(translatedContent); // 状態を更新\r\n//           console.log(`Received translated text: ${translatedContent}`);\r\n//         } else {\r\n//           // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\r\n//           // setTranslatedText(\"\");\r\n//         }\r\n//       });\r\n//       console.log(`Listening for data from ${memberId}.`);\r\n//     } else {\r\n//       console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * ルームに参加するハンドラ\r\n//    * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n//    */\r\n//   const handleJoinRoom = async () => {\r\n//     if (!skywayContext) {\r\n//       console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\r\n//       return;\r\n//     }\r\n//     if (!roomName) {\r\n//       console.error(\"Room name is empty. Please enter a room name to join.\");\r\n//       return;\r\n//     }\r\n//     if (skywayRoom && me) {\r\n//       console.warn(\"Already in a room. Please leave the current room first.\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       // 指定されたルーム名でP2Pルームを作成または検索\r\n//       const room = await SkyWayRoom.FindOrCreate(skywayContext, {\r\n//         type: \"p2p\", // P2Pルームタイプ\r\n//         name: roomName,\r\n//       });\r\n\r\n//       // roomオブジェクトが有効であることを確認\r\n//       if (!room) {\r\n//         console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\r\n//         throw new Error(\"Failed to create or find SkyWayRoom.\");\r\n//       }\r\n\r\n//       setSkywayRoom(room);\r\n//       console.log(`SkyWayRoom '${roomName}' found or created.`);\r\n\r\n//       // ルームに参加し、自分のメンバー情報を取得\r\n//       const localMember = await room.join();\r\n//       // localMemberが有効であることを確認\r\n//       if (!localMember) {\r\n//         console.error(\"room.join() returned null or undefined localMember.\");\r\n//         throw new Error(\"Failed to join the room.\");\r\n//       }\r\n//       setMe(localMember);\r\n//       console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\r\n//       // ルームIDと自分のIDをコンソールに表示\r\n//       console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\r\n\r\n\r\n//       // 自分のカメラとマイクのストリームを作成し、公開\r\n//       const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\r\n//       localStreamRef.current = video; // ローカルビデオストリームを保存\r\n//       await localMember.publish(video);\r\n//       const publication_audio = await localMember.publish(audio);\r\n//       audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\r\n//       setIsMuted(false);\r\n//       console.log(\"Published local camera and microphone stream.\");\r\n\r\n//       // 自分のデータストリームを作成し、公開\r\n//       const dataStream = await SkyWayStreamFactory.createDataStream();\r\n//       localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\r\n//       await localMember.publish(dataStream);\r\n//       console.log(\"Published local data stream.\");\r\n\r\n//       // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\r\n//       setIsMoveInProgress(false);\r\n\r\n\r\n//       // --- 既存のストリームを購読するロジック ---\r\n//       // ルーム内の既存の公開ストリームをすべて購読する\r\n//       for (const publication of room.publications) {\r\n//         // 自分のストリームは購読しない\r\n//         if (localMember.id === publication.publisher.id) {\r\n//           continue;\r\n//         }\r\n//         try {\r\n//           const { stream } = await localMember.subscribe(publication.id);\r\n//           console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\r\n\r\n//           if (publication.contentType === 'video' || publication.contentType === 'audio') {\r\n//             attachRemoteStream(stream, publication.publisher.id);\r\n//           } else if (publication.contentType === 'data') {\r\n//             handleDataStream(stream, publication.publisher.id);\r\n//           } else {\r\n//             console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\r\n//           }\r\n//         } catch (subscribeError) {\r\n//           console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\r\n//         }\r\n//       }\r\n\r\n//       // --- ルームイベントリスナーの設定 ---\r\n\r\n//       // メンバーがルームに参加したときのイベント\r\n//       if (room.onMemberJoined) {\r\n//         room.onMemberJoined.add((e) => {\r\n//           console.log(`Member joined: ${e.member.id}`);\r\n//         });\r\n//       } else {\r\n//         console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\r\n//       }\r\n\r\n//       // メンバーがルームを離脱したときのイベント\r\n//       if (room.onMemberLeft) {\r\n//         room.onMemberLeft.add((e) => {\r\n//           console.log(`Member left: ${e.member.id}`);\r\n//           // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\r\n//           const videoElement = remoteVideoElements.current.get(e.member.id);\r\n//           if (videoElement && robotDisplayRef.current) {\r\n//             robotDisplayRef.current.removeChild(videoElement);\r\n//             remoteVideoElements.current.delete(e.member.id);\r\n//             console.log(`Removed video for member ${e.member.id}`);\r\n//           }\r\n//           // データストリーム関連のクリーンアップもここに追加可能ですが、\r\n//           // onDataリスナーはストリームが閉じられると自動的に停止します。\r\n//         });\r\n//       } else {\r\n//         console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\r\n//       }\r\n\r\n//       // ストリームが公開されたときのイベント\r\n//       if (room.onStreamPublished) {\r\n//         room.onStreamPublished.add(async (e) => {\r\n//           console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\r\n//           // 自分のストリームは購読しない\r\n//           if (localMember.id !== e.publication.publisher.id) {\r\n//             try {\r\n//               // リモートストリームを購読\r\n//               const { stream } = await localMember.subscribe(e.publication.id);\r\n//               console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\r\n\r\n//               if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\r\n//                 attachRemoteStream(stream, e.publication.publisher.id);\r\n//               } else if (e.publication.contentType === 'data') {\r\n//                 handleDataStream(stream, e.publication.publisher.id);\r\n//               } else {\r\n//                 console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\r\n//               }\r\n//             } catch (subscribeError) {\r\n//               console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\r\n//             }\r\n//           } else {\r\n//             console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\r\n//           }\r\n//         });\r\n//       } else {\r\n//         console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\r\n//       }\r\n\r\n//       // ストリームが非公開になったときのイベント\r\n//       if (room.onStreamUnpublished) {\r\n//         room.onStreamUnpublished.add((e) => {\r\n//           console.log(`Stream unpublished by ${e.publication.publisher.id}`);\r\n//           // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\r\n//           const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\r\n//           if (videoElement && robotDisplayRef.current) {\r\n//             robotDisplayRef.current.removeChild(videoElement);\r\n//             remoteVideoElements.current.delete(e.publication.publisher.id);\r\n//             console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\r\n//           }\r\n//         });\r\n//       } else {\r\n//         console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\r\n//       }\r\n\r\n//     } catch (error) {\r\n//       console.error(\"Failed to join room:\", error);\r\n//       // エラー発生時に状態をリセットして再試行可能にする\r\n//       setSkywayRoom(null);\r\n//       setMe(null);\r\n//       // エラー時に既存のビデオ要素をクリーンアップ\r\n//       if (robotDisplayRef.current) {\r\n//         Array.from(robotDisplayRef.current.children).forEach(child => {\r\n//           if (child.tagName === 'VIDEO') {\r\n//             // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n//             if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n//               child.srcObject.getTracks().forEach(track => track.stop());\r\n//               child.srcObject = null;\r\n//             }\r\n//             child.remove(); // DOMから要素を削除\r\n//           }\r\n//         });\r\n//       }\r\n//       remoteVideoElements.current.clear();\r\n//       if (localStreamRef.current) {\r\n//         // LocalVideoStreamのstop()メソッドを呼び出す\r\n//         if (typeof localStreamRef.current.stop === 'function') {\r\n//           localStreamRef.current.stop();\r\n//           console.log(\"Stopped local media stream during join error cleanup.\");\r\n//         } else {\r\n//           console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\r\n//         }\r\n//         localStreamRef.current = null;\r\n//       }\r\n//       // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n//       localDataStreamRef.current = null; // 参照をクリア\r\n//       console.log(\"Local data stream reference cleared during join error cleanup.\");\r\n\r\n//       // ミュート状態もリセット\r\n//       setIsMuted(false);\r\n//       audioPublicationRef.current = null;\r\n//       setIsMoveInProgress(false); // エラー時もモーション状態をリセット\r\n//       setTranslatedText(\"\"); // 翻訳テキストをクリア\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * ルームから退出するハンドラ\r\n//    */\r\n//   const handleLeaveRoom = async () => {\r\n//     if (skywayRoom && me) {\r\n//       try {\r\n//         // ローカルストリームを停止し、公開を解除\r\n//         if (localStreamRef.current) {\r\n//           // LocalVideoStreamのstop()メソッドを呼び出す\r\n//           if (typeof localStreamRef.current.stop === 'function') {\r\n//             localStreamRef.current.stop();\r\n//             console.log(\"Stopped local media stream.\");\r\n//           } else {\r\n//             console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during leave.\");\r\n//           }\r\n//           localStreamRef.current = null;\r\n//         }\r\n//         // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n//         localDataStreamRef.current = null; // 参照をクリア\r\n//         console.log(\"Local data stream reference cleared.\");\r\n\r\n//         // オーディオPublicationの参照をクリア\r\n//         audioPublicationRef.current = null;\r\n//         setIsMuted(false); // ミュート状態をリセット\r\n//         setTranslatedText(\"\"); // 翻訳テキストをクリア\r\n//         // �追加: ルーム退出時に音声認識を停止\r\n//         if (isListening) {\r\n//           recognition.current.stop();\r\n//           setIsListening(false);\r\n//         }\r\n\r\n//         await me.leave(); // ルームから退出\r\n//         console.log(`Left room '${roomName}'`);\r\n//         // ルーム退出をコンソールに表示\r\n//         console.log(`Left room: ${roomName}`);\r\n\r\n\r\n//         // room.dispose()を使用\r\n//         if (skywayRoom) {\r\n//           await skywayRoom.dispose(); // ルームを閉じる (これはルームの作成者のみが効果的です)\r\n//           console.log(\"SkyWay Room disposed.\");\r\n//         }\r\n//         // SkyWay SDKに関するすべての操作が不要になった場合にcontext.dispose()を呼び出す\r\n//         // このコンポーネントがアンマウントされる際にuseEffectのクリーンアップ関数で処理されるため、ここでは呼び出さない\r\n\r\n//       } catch (error) {\r\n//       } finally {\r\n//         // 状態をリセット\r\n//         setMe(null);\r\n//         setSkywayRoom(null);\r\n//         setReceivedMessages([]); // 受信メッセージもクリア\r\n//         // すべてのリモートビデオ要素をDOMから削除\r\n//         if (robotDisplayRef.current) {\r\n//           Array.from(robotDisplayRef.current.children).forEach(child => {\r\n//             if (child.tagName === 'VIDEO') {\r\n//               // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n//               if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n//                 child.srcObject.getTracks().forEach(track => track.stop());\r\n//                 child.srcObject = null;\r\n//               }\r\n//               child.remove(); // DOMから要素を削除\r\n//             }\r\n//           });\r\n//         }\r\n//         remoteVideoElements.current.clear();\r\n//         // AIモードもオフにする\r\n//         setIsAiModeOn(false);\r\n//         setAiSuggestions([null, null]); // 提案もクリア\r\n//         setIsMoveInProgress(false); // ルーム退出時もモーション状態をリセット\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * モーションを操作するボタンを押した時の処理\r\n//    * @param {string | object} messageOrKey - 送信するメッセージのキー (messagesオブジェクトのキー) またはAI提案オブジェクト\r\n//    */\r\n//   const handleSend = async (messageOrKey) => {\r\n//     if (me && skywayRoom && localDataStreamRef.current) {\r\n//       try {\r\n//         let messageToSend;\r\n//         let shouldSetMoveInProgress = false; // モーション進行中フラグを制御するための新しい変数\r\n\r\n//         if (typeof messageOrKey === 'string') {\r\n//           // サイドボタンからの送信の場合、直接メッセージ文字列を使用\r\n//           if (messageOrKey.startsWith(\"template_motion_\")) {\r\n//             messageToSend = messageOrKey;\r\n//             shouldSetMoveInProgress = true; // モーションコマンドの場合のみフラグを立てる\r\n//           } else if (messageOrKey.startsWith(\"template_voice_\")) {\r\n//             messageToSend = messageOrKey;\r\n//             // ボイスコマンドの場合はshouldSetMoveInProgressをtrueにしない\r\n//           } else if (messageOrKey.startsWith(\"robot_reset\")){\r\n//             messageToSend = messageOrKey;\r\n//           } else {\r\n//             // 既存のmessagesオブジェクトからのルックアップ (AI提案以外でキーが渡された場合など)\r\n//             messageToSend = messages[messageOrKey];\r\n//           }\r\n//         } else if (typeof messageOrKey === 'object' && messageOrKey.key) { // messageOrKey.text から messageOrKey.key に変更\r\n//           // AI提案ボタンからの送信\r\n//           messageToSend = messageOrKey.key; // 提案のキー（ai_assist_1など）を送信\r\n//           // AI提案の場合はshouldSetMoveInProgressをtrueにしない\r\n//         }\r\n\r\n//         if (!messageToSend) {\r\n//           console.warn(`Message to send is empty or not found.`);\r\n//           return;\r\n//         }\r\n\r\n//         localDataStreamRef.current.write(messageToSend);\r\n//         console.log(`Sent message: \"${messageToSend}\"`);\r\n//         // 送信したメッセージも自身の画面に表示\r\n//         setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: messageToSend, isLocal: true }]);\r\n//         setAiSuggestions([null, null]); // 送信したら提案をクリア\r\n\r\n//         // shouldSetMoveInProgressがtrueの場合のみモーション進行中状態にする\r\n//         if (shouldSetMoveInProgress) {\r\n//           setIsMoveInProgress(true);\r\n//         }\r\n//         // AI提案やボイスコマンドの場合は、isMoveInProgressは変更しない\r\n//         // (以前のモーションが進行中であればそのまま、そうでなければfalseのまま)\r\n\r\n//       } catch (error) {\r\n//         console.error(\"Failed to send data:\", error);\r\n//       }\r\n//     } else {\r\n//       console.warn(\"Cannot send message: Not in a room, 'me' object is not available, or data stream is not ready.\");\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    * マイクのミュート/ミュート解除を切り替えるハンドラ\r\n//    */\r\n//   const handleMute = async () => {\r\n//     console.log(\"start\");\r\n//     if (!audioPublicationRef.current) {\r\n//       console.warn(\"Audio publication not available. Cannot toggle mute.\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       if (isMuted) {\r\n//         // 現在ミュート状態なら、ミュートを解除\r\n//         await audioPublicationRef.current.enable();\r\n//         console.log(\"Microphone unmuted.\");\r\n//       } else {\r\n//         // 現在ミュート状態でないなら、ミュート\r\n//         await audioPublicationRef.current.disable();\r\n//         console.log(\"Microphone muted.\");\r\n//       }\r\n//       setIsMuted(!isMuted); // ミュート状態をトグル\r\n//     } catch (error) {\r\n//       console.error(\"Failed to toggle microphone mute state:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // AIモードが変更されたときにシグナルを送信するためのフラグ\r\n//   const isInitialAiModeRender = useRef(true);\r\n\r\n//   /**\r\n//    * AIモードの状態変更を監視し、シグナルを送信するuseEffect\r\n//    */\r\n//   useEffect(() => {\r\n//     // 初回レンダリング時はシグナルを送信しない\r\n//     if (isInitialAiModeRender.current) {\r\n//       isInitialAiModeRender.current = false;\r\n//       return;\r\n//     }\r\n\r\n//     // me オブジェクトとデータストリームが利用可能であることを確認\r\n//     if (!me || !localDataStreamRef.current) {\r\n//       return;\r\n//     }\r\n\r\n//     if (isAiModeOn) {\r\n//       // AIモードがONになったら、AIに提案を要求するメッセージを送信\r\n//       localDataStreamRef.current.write(\"ai_assist_on\");\r\n//       console.log(\"Sent AI_MODE_REQUEST_SUGGESTIONS signal.\");\r\n//       setAiSuggestions([null, null]); // 新しいセッションのために提案をクリア\r\n//     } else {\r\n//       // AIモードがOFFになったら提案をクリアし、AIモード終了のシグナルを送信\r\n//       localDataStreamRef.current.write(\"ai_assist_off\");\r\n//       console.log(\"Sent AI_MODE_OFF_SIGNAL.\");\r\n//       setAiSuggestions([null, null]); // 提案をクリア\r\n//     }\r\n//   }, [isAiModeOn, me, localDataStreamRef]); // isAiModeOn, me, localDataStreamRef の変更に反応\r\n\r\n//   /**\r\n//    * AIモードを切り替えるハンドラ\r\n//    * この関数はAIモードの状態をトグルするのみで、シグナル送信はuseEffectに任せる\r\n//    */\r\n//   /* eslint-disable */\r\n//   const handleAiModeToggle = () => {\r\n//     setIsAiModeOn(prev => !prev);\r\n//   };\r\n//   /* eslint-enable */\r\n\r\n//   // 🌟追加: 音声認識の開始・停止を切り替えるハンドラ\r\n//   const handleToggleListening = () => {\r\n//     if (!recognition.current) {\r\n//       console.error(\"SpeechRecognition API is not initialized.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (isListening) {\r\n//       // 認識を停止\r\n//       recognition.current.stop();\r\n//       console.log(\"Stopped speech recognition.\");\r\n//     } else {\r\n//       // 認識を開始\r\n//       recognition.current.start();\r\n//       console.log(\"Started speech recognition.\");\r\n//     }\r\n//     setIsListening(!isListening);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"app-container\">\r\n//       <div className=\"header\">\r\n//         <div className=\"header-left\">\r\n//           <button className=\"motion-btn\" disabled={isAiModeOn || isMoveInProgress}>モーション</button>\r\n//           {/* 翻訳されたテキストを表示する要素を追加 */}\r\n//           {translatedText && (\r\n//             <div className=\"translated-text\">\r\n//               <span className=\"translated-text-label\">翻訳: </span>\r\n//               <span className=\"translated-text-content\">{translatedText}</span>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <div className=\"header-right\">\r\n//           <button onClick={handleLogout} className=\"logout-btn\">ログアウト</button>\r\n//           <button className=\"voice-btn\" disabled={isAiModeOn || isMoveInProgress}>ボイス</button>\r\n//         </div>\r\n//       </div>\r\n//       <div className=\"main-container\">\r\n//         <div className=\"side-panel\">\r\n//           <div className=\"side-panel-content\">\r\n//             {Object.keys(messages).slice(0, 14).map(key => ( // 左側のボタン数を調整\r\n//               <button\r\n//                 key={key}\r\n//                 // 左側のボタンは \"template_motion_〇〇\" 形式で送信\r\n//                 onClick={() => handleSend(`template_motion_${messages[key].japanese}`)}\r\n//                 className=\"side-btn\"\r\n//                 disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\r\n//               >\r\n//                 {messages[key].japanese} {/* 常に日本語表示 */}\r\n//               </button>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"main-area\">\r\n//           <div className=\"room-controls\">\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"ルーム名を入力\"\r\n//               value={roomName}\r\n//               onChange={(e) => setRoomName(e.target.value)}\r\n//               className=\"room-input\"\r\n//               disabled={!!me} // ルーム参加中は入力不可にする\r\n//             />\r\n//             {!me ? ( // ルームに参加していない場合\r\n//               <button onClick={handleJoinRoom} className=\"join-room-btn\" disabled={!skywayContext || !roomName}>\r\n//                 ルームに参加\r\n//               </button>\r\n//             ) : ( // ルームに参加している場合\r\n//               <button onClick={handleLeaveRoom} className=\"leave-room-btn\">\r\n//                 ルームを退出\r\n//               </button>\r\n//             )}\r\n//           </div>\r\n//           <div className=\"robot-display\" ref={robotDisplayRef}>\r\n//             {/* リモートのビデオストリームがここに動的に追加されます */}\r\n//             {/* ルーム情報はコンソールに表示されるため、ここでは表示しません */}\r\n\r\n//             {/* AIからの提案表示 */}\r\n//             {(aiSuggestions[0] || aiSuggestions[1]) && (\r\n//               <div className=\"ai-suggestions\">\r\n//                 {aiSuggestions[0] && (\r\n//                   <button\r\n//                     onClick={() => handleSend(aiSuggestions[0])}\r\n//                     className=\"ai-suggestion-btn\"\r\n//                     disabled={isMoveInProgress} // モーション中は無効化\r\n//                   >\r\n//                     {aiSuggestions[0].text}\r\n//                   </button>\r\n//                 )}\r\n//                 {aiSuggestions[1] && (\r\n//                   <button\r\n//                     onClick={() => handleSend(aiSuggestions[1])}\r\n//                     className=\"ai-suggestion-btn\"\r\n//                     disabled={isMoveInProgress} // モーション中は無効化\r\n//                   >\r\n//                     {aiSuggestions[1].text}\r\n//                   </button>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"side-panel right\">\r\n//           <div className=\"side-panel-content\">\r\n//             {Object.keys(messages).slice(14).map(key => ( // 右側のボタン数を調整\r\n//               <button\r\n//                 key={key}\r\n//                 // 右側のボタンは \"template_voice_〇〇\" 形式で送信\r\n//                 onClick={() => handleSend(`template_voice_${messages[key].japanese}`)}\r\n//                 className=\"side-btn\"\r\n//                 disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\r\n//               >\r\n//                 {messages[key].japanese} {/* 常に日本語表示 */}\r\n//               </button>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       <div className=\"bottom-controls\">\r\n//         <button\r\n//           className={`control-btn ai-btn`}\r\n//           onClick={() => handleAiModeToggle()}\r\n//           disabled={!me} // ルームに参加していない場合は無効\r\n//         >\r\n//           {isAiModeOn ? 'AIモードOFF' : 'AIモードON'}\r\n//         </button>\r\n//         {/* 🌟追加: 音声認識ボタン */}\r\n//         <button\r\n//           className={`control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`}\r\n//           onClick={handleToggleListening}\r\n//           disabled={!me || !localDataStreamRef.current || isAiModeOn} // ルーム未参加、データストリーム未準備、AIモード中は無効\r\n//         >\r\n//           {isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'}\r\n//         </button>\r\n//         <button\r\n//           className={`control-btn mic-btn ${isMuted ? 'muted' : ''}`} // ミュート状態に応じてクラスを追加\r\n//           onClick={handleMute}\r\n//           id=\"micBtn\"\r\n//           disabled={!me || !audioPublicationRef.current || isAiModeOn} // ルームに参加していない、またはオーディオが公開されていない、AIモード中は無効\r\n//         >\r\n//           {isMuted ? '🔇 マイクミュート' : '🎤 マイクON'} {/* ミュート状態に応じてアイコンとテキストを変更 */}\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Home;\r\n\r\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport './style.css'; // style.cssを再度有効化\r\nimport {\r\n  nowInSec,\r\n  SkyWayAuthToken,\r\n  SkyWayContext,\r\n  SkyWayRoom,\r\n  SkyWayStreamFactory,\r\n  uuidV4,\r\n  RemoteDataStream, // RemoteDataStreamをインポート\r\n  RemoteVideoStream, // RemoteVideoStreamをインポート\r\n  RemoteAudioStream, // RemoteAudioStreamをインポート\r\n} from '@skyway-sdk/room';\r\n\r\n/**\r\n * ホーム画面コンポーネント\r\n * @param {object} props - プロパティ\r\n * @param {function} props.setIsLoggedIn - ログイン状態を設定する関数\r\n */\r\nfunction Home({ setIsLoggedIn }) {\r\n  // ルーム名\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  // 自分の参加者情報 (ルームに参加すると設定されます)\r\n  const [me, setMe] = useState(null);\r\n  // SkyWayコンテキストのインスタンス\r\n  const [skywayContext, setSkywayContext] = useState(null);\r\n  // SkyWayルームのインスタンス\r\n  const [skywayRoom, setSkywayRoom] = useState(null);\r\n  // リモートビデオ要素を管理するためのMap (memberId -> videoElement)\r\n  const remoteVideoElements = useRef(new Map());\r\n  // リモートビデオを表示するDOM要素への参照\r\n  const robotDisplayRef = useRef(null);\r\n  // ローカルストリームの参照を保持\r\n  const localStreamRef = useRef(null);\r\n  // 受信したメッセージを表示するための状態\r\n  // src/home.js\r\n  // eslint-disable-next-line no-unused-vars\r\n  const [receivedMessages, setReceivedMessages] = useState([]);\r\n  // 送信したデータストリームの参照を保持\r\n  const localDataStreamRef = useRef(null); // LocalDataStreamの参照を保持\r\n  // マイクの状態を表示するための状態 (ミュート状態を管理)\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  // オーディオストリームのPublicationを保持するための参照\r\n  const audioPublicationRef = useRef(null);\r\n  // AIモードがONかどうかを管理する状態\r\n  const [isAiModeOn, setIsAiModeOn] = useState(false);\r\n  // AIからの提案を保持する状態\r\n  // { key: 'ai_assist_1', text: '提案内容' } の形式で格納\r\n  const [aiSuggestions, setAiSuggestions] = useState([null, null]); // 2つの提案を保持するため、初期値をnullで埋める\r\n  // モーションが進行中かどうかを管理する状態\r\n  const [isMoveInProgress, setIsMoveInProgress] = useState(false);\r\n  // 翻訳されたテキストを保持する状態を追加\r\n  const [translatedText, setTranslatedText] = useState(\"\");\r\n  // 🌟追加: 音声認識が実行中かどうかを管理する状態\r\n  const [isListening, setIsListening] = useState(false);\r\n  // 🌟追加: SpeechRecognitionオブジェクトの参照を保持\r\n  const recognition = useRef(null);\r\n\r\n\r\n  // メッセージとモーションの多言語マッピング\r\n  const messages = useMemo(() => ({\r\n    hello: {\r\n      japanese: 'リセット',\r\n      english: 'Hello'\r\n    },\r\n    goodbye: {\r\n      japanese: '決めポーズ',\r\n      english: 'Goodbye'\r\n    },\r\n    bow: {\r\n      japanese: 'バイバイ',\r\n      english: 'Bow'\r\n    },\r\n    flap: {\r\n      japanese: 'YES',\r\n      english: 'Flap'\r\n    },\r\n    lookUp: {\r\n      japanese: 'NO',\r\n      english: 'Look up'\r\n    },\r\n    lookDown: {\r\n      japanese: '右手を上げる',\r\n      english: 'Look down'\r\n    },\r\n    lookRight: {\r\n      japanese: '右手を下げる',\r\n      english: 'Look right'\r\n    },\r\n    lookLeft: {\r\n      japanese: '左手を上げる',\r\n      english: 'Left hand up' // Changed from 'Look left' for clarity\r\n    },\r\n    nod: {\r\n      japanese: '左手を下げる',\r\n      english: 'Left hand down' // Changed from 'Nod' for clarity\r\n    },\r\n    tiltHead: {\r\n      japanese: '上を向く',\r\n      english: 'Look up' // Changed from 'Tilt head' for clarity\r\n    },\r\n    spin: {\r\n      japanese: '下を向く',\r\n      english: 'Look down' // Changed from 'Spin' for clarity\r\n    },\r\n    jump: {\r\n      japanese: '右を向く',\r\n      english: 'Look right' // Changed from 'Jump' for clarity\r\n    },\r\n    dance: {\r\n      japanese: '左を向く',\r\n      english: 'Look left' // Changed from 'Dance' for clarity\r\n    },\r\n    bowDeep: {\r\n      japanese: 'パタパタ',\r\n      english: 'Flap arms' // Changed from 'Deep bow' for clarity\r\n    },\r\n    doingSomething: {\r\n      japanese: 'こんにちは',\r\n      english: 'Hello'\r\n    },\r\n    thankYou: {\r\n      japanese: 'バイバイ',\r\n      english: 'Goodbye' // Changed from 'Thank you' for clarity\r\n    },\r\n    good: {\r\n      japanese: 'ようこそ',\r\n      english: 'Welcome' // Changed from 'Good' for clarity\r\n    },\r\n    ookini: {\r\n      japanese: 'ありがとう',\r\n      english: 'Thank you (Kansai dialect)'\r\n    },\r\n    amazing: {\r\n      japanese: '楽しんでね',\r\n      english: 'Enjoy' // Changed from 'Amazing' for clarity\r\n    }\r\n  }), []);\r\n\r\n\r\n  /**\r\n   * ログアウトボタンクリック時のハンドラ\r\n   */\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false); // ログイン状態をfalseに設定\r\n  };\r\n\r\n  // SkyWay App ID と Secret Key\r\n  // 注意: 本番環境では、これらのキーをクライアントサイドにハードコードせず、\r\n  // サーバーサイドでトークンを生成してクライアントに安全に渡すことを強く推奨します。\r\n  const appId = useMemo(() => \"4490dcb5-dbe8-4028-ba0a-6d0d143e4515\", []);\r\n  const secretKey = useMemo(() => \"40HHGEIOx0BRByPdxqwUswK0a+7v2JaeaJ9CcFjMdAQ=\", []);\r\n\r\n  // SkyWay認証トークンの生成\r\n  const token = useMemo(() => {\r\n    if (appId == null || secretKey == null) return undefined;\r\n\r\n    return new SkyWayAuthToken({\r\n      jti: uuidV4(), // JWT ID\r\n      iat: nowInSec(), // 発行時刻\r\n      exp: nowInSec() + 60 * 60 * 24, // 有効期限 (24時間)\r\n      version: 3,\r\n      scope: {\r\n        appId: appId,\r\n        rooms: [\r\n          {\r\n            name: \"*\", // すべてのルーム名に適用\r\n            methods: [\"create\", \"close\", \"updateMetadata\"], // ルーム操作の権限\r\n            member: {\r\n              name: \"*\", // すべてのメンバーに適用\r\n              methods: [\"publish\", \"subscribe\", \"updateMetadata\"] // メンバー操作の権限\r\n            }\r\n          }],\r\n        turn: {\r\n          enabled: true // TURNサーバーの使用を許可 (NAT越えのため)\r\n        }\r\n      }\r\n    }).encode(secretKey);\r\n\r\n  }, [appId, secretKey]);\r\n\r\n  /**\r\n   * SkyWayContextの初期化とクリーンアップを行うuseEffect\r\n   * トークンが利用可能になったときに一度だけ実行されます。\r\n   */\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    let currentContext;\r\n    const initContext = async () => {\r\n      try {\r\n        currentContext = await SkyWayContext.Create(token);\r\n        setSkywayContext(currentContext);\r\n        console.log(\"SkyWayContext created successfully.\");\r\n      } catch (error) {\r\n        console.error(\"Failed to create SkyWayContext:\", error);\r\n      }\r\n    };\r\n\r\n    initContext();\r\n\r\n    // コンポーネントのアンマウント時にコンテキストを破棄\r\n    return () => {\r\n      if (currentContext) {\r\n        currentContext.dispose();\r\n        console.log(\"SkyWayContext disposed.\");\r\n      }\r\n    };\r\n  }, [token]); // tokenが変更されたときにのみ実行\r\n\r\n  // 🌟追加: SpeechRecognition APIの初期化\r\n  useEffect(() => {\r\n    // ブラウザがSpeechRecognitionに対応しているか確認\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    if (!SpeechRecognition) {\r\n      console.error(\"SpeechRecognition API is not supported by this browser.\");\r\n      return;\r\n    }\r\n\r\n    // SpeechRecognitionオブジェクトを初期化\r\n    recognition.current = new SpeechRecognition();\r\n    recognition.current.continuous = true; // 連続的な認識\r\n    recognition.current.interimResults = true; // 中間結果を返す\r\n    recognition.current.lang = 'ja-JP'; // 日本語を指定\r\n\r\n    // 音声認識の結果を処理するハンドラ\r\n    recognition.current.onresult = async (event) => {\r\n      let finalTranscript = '';\r\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n        if (event.results[i].isFinal) {\r\n          finalTranscript = event.results[i][0].transcript;\r\n          break; // 最初の確定した結果のみを取得\r\n        }\r\n      }\r\n\r\n      // 確定した結果が空でなければ翻訳してSkywayで送信\r\n      if (finalTranscript.trim() !== '') {\r\n        console.log(\"Transcription final result:\", finalTranscript);\r\n\r\n        // -- 翻訳処理の追加 --\r\n        // ここではGoogle Translate WebAPIを模倣したfetch API呼び出しを記述します。\r\n        // 実際のAPIキーやエンドポイントは環境に合わせて変更してください。\r\n        try {\r\n          const translationApiUrl = \"https://translation-api-endpoint.com/translate\"; // 適切な翻訳APIエンドポイントに置き換える\r\n          // Fetch APIを使って翻訳APIを呼び出す\r\n          // NOTE: この部分は架空のAPI呼び出しです。\r\n          // 実際のGoogle Translate Web APIの利用には、認証キーや適切なエンドポイントが必要です。\r\n          // もし実際のAPIを利用する場合は、こちらを実際のコードに置き換えてください。\r\n          // 例:\r\n          // const response = await fetch(translationApiUrl, {\r\n          //   method: 'POST',\r\n          //   headers: {\r\n          //     'Content-Type': 'application/json',\r\n          //     'Authorization': 'Bearer YOUR_API_KEY'\r\n          //   },\r\n          //   body: JSON.stringify({\r\n          //     text: finalTranscript,\r\n          //     target_lang: 'en'\r\n          //   })\r\n          // });\r\n          // const data = await response.json();\r\n          // const translatedText = data.translatedText;\r\n          const translatedText = await translateText(finalTranscript, 'ja', 'en'); // 新しく作成する関数を呼び出す\r\n          setTranslatedText(translatedText); // 翻訳結果を状態に保存\r\n\r\n          // Skywayのデータストリームで送信\r\n          if (localDataStreamRef.current && me) {\r\n            // 指定されたフォーマットでデータを送信\r\n            const formattedMessage = `translate_data_web:${translatedText}`;\r\n            localDataStreamRef.current.write(formattedMessage);\r\n            console.log(`Sent translated text: \"${formattedMessage}\"`);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Translation failed:\", error);\r\n          // 翻訳に失敗した場合は、元の日本語をそのまま送信するなどのフォールバック処理を検討\r\n          if (localDataStreamRef.current && me) {\r\n            localDataStreamRef.current.write(finalTranscript);\r\n            console.log(`Sent transcription (no translation): \"${finalTranscript}\"`);\r\n          }\r\n        }\r\n        // -- 翻訳処理の追加ここまで --\r\n\r\n        // 自分の画面にも表示\r\n        setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: finalTranscript, isLocal: true }]);\r\n      }\r\n    };\r\n\r\n    // 認識エラー時のハンドラ\r\n    recognition.current.onerror = (event) => {\r\n      console.error(\"Speech recognition error:\", event.error);\r\n      setIsListening(false); // エラー時はリスニング状態を停止\r\n    };\r\n\r\n    // 認識終了時のハンドラ\r\n    recognition.current.onend = () => {\r\n      console.log(\"Speech recognition ended.\");\r\n      // 連続認識モードでは、自動的に再起動されるため、特別な処理は不要\r\n      // if (isListening) {\r\n      //   recognition.current.start();\r\n      // }\r\n    };\r\n\r\n    // コンポーネントのアンマウント時にイベントリスナーをクリーンアップ\r\n    return () => {\r\n      if (recognition.current) {\r\n        recognition.current.stop();\r\n      }\r\n    };\r\n  }, [me, localDataStreamRef]);\r\n\r\n\r\n  // 🌟追加: テキストを翻訳する関数 (Google Translate APIを模倣)\r\n  async function translateText(text, sourceLang, targetLang) {\r\n    try {\r\n      const chatHistory = [];\r\n      chatHistory.push({ role: \"user\", parts: [{ text: `Translate the following Japanese text to English: \"${text}\"` }] });\r\n      const payload = { contents: chatHistory };\r\n      const apiKey = \"\" \r\n      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;\r\n      const response = await fetch(apiUrl, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(payload)\r\n      });\r\n      const result = await response.json();\r\n      if (result.candidates && result.candidates.length > 0 &&\r\n          result.candidates[0].content && result.candidates[0].content.parts &&\r\n          result.candidates[0].content.parts.length > 0) {\r\n        const translatedText = result.candidates[0].content.parts[0].text;\r\n        // APIから返される余分な文字を削除\r\n        const cleanedText = translatedText.replace(/['\"]$/, '').replace(/^['\"]/, '');\r\n        return cleanedText;\r\n      } else {\r\n        console.error(\"Translation API response is malformed.\");\r\n        return text;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during translation:\", error);\r\n      return text; // エラー時は元のテキストを返す\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * リモートストリームをDOMに追加するヘルパー関数\r\n   * @param {RemoteVideoStream | RemoteAudioStream} stream - 追加するメディアストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\r\n  const attachRemoteStream = (stream, memberId) => {\r\n    if (robotDisplayRef.current && (stream instanceof RemoteVideoStream || stream instanceof RemoteAudioStream)) {\r\n      // 既存のビデオ要素があれば削除\r\n      const existingVideo = remoteVideoElements.current.get(memberId);\r\n      if (existingVideo) {\r\n        robotDisplayRef.current.removeChild(existingVideo);\r\n        remoteVideoElements.current.delete(memberId);\r\n      }\r\n\r\n      const video = document.createElement(\"video\");\r\n      video.autoplay = true; // 自動再生\r\n      video.playsInline = true; // インライン再生 (iOSなどで必要)\r\n      video.className = \"remote-video object-cover\"; // スタイリング用のクラスとobject-coverを追加\r\n      video.dataset.memberId = memberId; // メンバーIDをデータ属性に保存\r\n      stream.attach(video); // ストリームをビデオ要素のソースに設定\r\n      robotDisplayRef.current.appendChild(video);\r\n      remoteVideoElements.current.set(memberId, video);\r\n      console.log(`Attached stream from ${memberId} to DOM.`);\r\n    } else {\r\n      console.warn(`Attempted to attach non-media stream or robotDisplayRef is null for member ${memberId}.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * データストリームの受信を処理するヘルパー関数\r\n   * @param {RemoteDataStream} stream - 受信するデータストリーム\r\n   * @param {string} memberId - ストリームのパブリッシャーのメンバーID\r\n   */\r\n  const handleDataStream = (stream, memberId) => {\r\n    if (stream instanceof RemoteDataStream) {\r\n      stream.onData.add((data) => {\r\n        console.log(`Received data from ${memberId}:`, data);\r\n        // 受信したメッセージを状態に追加\r\n        setReceivedMessages(prevMessages => [...prevMessages, { senderId: memberId, message: data }]);\r\n\r\n        // \"move_finish\" シグナルをチェック\r\n        if (data === \"move_finish\") {\r\n          console.log(\"Received 'move_finish' signal. Enabling side panel buttons.\");\r\n          setIsMoveInProgress(false); // モーション終了\r\n        }\r\n\r\n        // AI提案のフォーマットをチェック\r\n        // 新しいフォーマット \"ai_assist_1:data:ai_assist_2:data\" を解析\r\n        const aiCombinedSuggestionRegex = /^ai_assist_1:(.*):ai_assist_2:(.*)$/;\r\n        const combinedMatch = String(data).match(aiCombinedSuggestionRegex);\r\n\r\n        if (combinedMatch) {\r\n          const suggestion1Content = combinedMatch[1]; // キャプチャグループ1が最初の提案\r\n          const suggestion2Content = combinedMatch[2]; // キャプチャグループ2が2番目の提案\r\n\r\n          setAiSuggestions([\r\n            { key: 'ai_assist_1', text: suggestion1Content }, // キーをai_assist_1に修正\r\n            { key: 'ai_assist_2', text: suggestion2Content }  // キーをai_assist_2に修正\r\n          ]);\r\n          console.log(\"Received combined AI suggestions.\");\r\n        } else {\r\n          // 以前の単一提案フォーマットも考慮する場合（もし両方のフォーマットが混在する可能性があるなら）\r\n          const aiSingleSuggestionRegex = /^ai_assist_(\\d+):(.*)$/;\r\n          const singleMatch = String(data).match(aiSingleSuggestionRegex);\r\n\r\n          if (singleMatch) {\r\n            const suggestionNumber = parseInt(singleMatch[1], 10);\r\n            const suggestionContent = singleMatch[2];\r\n\r\n            if (suggestionNumber === 1 || suggestionNumber === 2) {\r\n              setAiSuggestions(prevSuggestions => {\r\n                const newSuggestions = [...prevSuggestions];\r\n                newSuggestions[suggestionNumber - 1] = {\r\n                  key: `ai_assist_${suggestionNumber}`, // キーをai_assist_Nに修正\r\n                  text: suggestionContent\r\n                };\r\n                return newSuggestions;\r\n              });\r\n              console.log(`Received single AI suggestion ${suggestionNumber}.`);\r\n            }\r\n          }\r\n        }\r\n\r\n        // 新しい翻訳フォーマットをチェック\r\n        const translateRegex = /^translate_request:(.*)$/;\r\n        const translateMatch = String(data).match(translateRegex);\r\n\r\n        if (translateMatch) {\r\n          const translatedContent = translateMatch[1];\r\n          setTranslatedText(translatedContent); // 状態を更新\r\n          console.log(`Received translated text: ${translatedContent}`);\r\n        } else {\r\n          // 翻訳データではない場合、翻訳テキストをクリアするかは要検討\r\n          // setTranslatedText(\"\");\r\n        }\r\n      });\r\n      console.log(`Listening for data from ${memberId}.`);\r\n    } else {\r\n      console.warn(`Attempted to handle non-data stream as data stream for member ${memberId}.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ルームに参加するハンドラ\r\n   * SkyWayContextが初期化され、ルーム名が入力されている場合に実行されます。\r\n   */\r\n  const handleJoinRoom = async () => {\r\n    if (!skywayContext) {\r\n      console.error(\"SkyWayContext is not initialized. Please wait or check token.\");\r\n      return;\r\n    }\r\n    if (!roomName) {\r\n      console.error(\"Room name is empty. Please enter a room name to join.\");\r\n      return;\r\n    }\r\n    if (skywayRoom && me) {\r\n      console.warn(\"Already in a room. Please leave the current room first.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // 指定されたルーム名でP2Pルームを作成または検索\r\n      const room = await SkyWayRoom.FindOrCreate(skywayContext, {\r\n        type: \"p2p\", // P2Pルームタイプ\r\n        name: roomName,\r\n      });\r\n\r\n      // roomオブジェクトが有効であることを確認\r\n      if (!room) {\r\n        console.error(\"SkyWayRoom.FindOrCreate returned null or undefined room.\");\r\n        throw new Error(\"Failed to create or find SkyWayRoom.\");\r\n      }\r\n\r\n      setSkywayRoom(room);\r\n      console.log(`SkyWayRoom '${roomName}' found or created.`);\r\n\r\n      // ルームに参加し、自分のメンバー情報を取得\r\n      const localMember = await room.join();\r\n      // localMemberが有効であることを確認\r\n      if (!localMember) {\r\n        console.error(\"room.join() returned null or undefined localMember.\");\r\n        throw new Error(\"Failed to join the room.\");\r\n      }\r\n      setMe(localMember);\r\n      console.log(`Joined room '${roomName}' as member ID: ${localMember.id}`);\r\n      // ルームIDと自分のIDをコンソールに表示\r\n      console.log(`Room ID: ${roomName} / My ID: ${localMember.id}`);\r\n\r\n\r\n      // 自分のカメラとマイクのストリームを作成し、公開\r\n      const { audio, video } = await SkyWayStreamFactory.createMicrophoneAudioAndCameraStream();\r\n      localStreamRef.current = video; // ローカルビデオストリームを保存\r\n      await localMember.publish(video);\r\n      const publication_audio = await localMember.publish(audio);\r\n      audioPublicationRef.current = publication_audio; // オーディオPublicationを保存\r\n      setIsMuted(false);\r\n      console.log(\"Published local camera and microphone stream.\");\r\n\r\n      // 自分のデータストリームを作成し、公開\r\n      const dataStream = await SkyWayStreamFactory.createDataStream();\r\n      localDataStreamRef.current = dataStream; // ローカルデータストリームを保存\r\n      await localMember.publish(dataStream);\r\n      console.log(\"Published local data stream.\");\r\n\r\n      // ルーム参加時はボタンを有効にする（モーションはまだ始まっていないため）\r\n      setIsMoveInProgress(false);\r\n\r\n\r\n      // --- 既存のストリームを購読するロジック ---\r\n      // ルーム内の既存の公開ストリームをすべて購読する\r\n      for (const publication of room.publications) {\r\n        // 自分のストリームは購読しない\r\n        if (localMember.id === publication.publisher.id) {\r\n          continue;\r\n        }\r\n\r\n        try {\r\n          const { stream } = await localMember.subscribe(publication.id);\r\n          console.log(`Subscribed to existing stream from ${publication.publisher.id}, type: ${publication.contentType}`);\r\n\r\n          if (publication.contentType === 'video' || publication.contentType === 'audio') {\r\n            attachRemoteStream(stream, publication.publisher.id);\r\n          } else if (publication.contentType === 'data') {\r\n            handleDataStream(stream, publication.publisher.id);\r\n          } else {\r\n            console.warn(`Unknown stream content type: ${publication.contentType} from ${publication.publisher.id}`);\r\n          }\r\n        } catch (subscribeError) {\r\n          console.error(`Failed to subscribe to existing stream from ${publication.publisher.id}:`, subscribeError);\r\n        }\r\n      }\r\n\r\n      // --- ルームイベントリスナーの設定 ---\r\n      // メンバーがルームに参加したときのイベント\r\n      if (room.onMemberJoined) {\r\n        room.onMemberJoined.add((e) => {\r\n          console.log(`Member joined: ${e.member.id}`);\r\n        });\r\n      } else {\r\n        console.error(\"room.onMemberJoined is undefined. This is unexpected.\");\r\n      }\r\n\r\n      // メンバーがルームを離脱したときのイベント\r\n      if (room.onMemberLeft) {\r\n        room.onMemberLeft.add((e) => {\r\n          console.log(`Member left: ${e.member.id}`);\r\n          // 該当メンバーのビデオ要素をDOMから削除し、Mapからも削除\r\n          const videoElement = remoteVideoElements.current.get(e.member.id);\r\n          if (videoElement && robotDisplayRef.current) {\r\n            robotDisplayRef.current.removeChild(videoElement);\r\n            remoteVideoElements.current.delete(e.member.id);\r\n            console.log(`Removed video for member ${e.member.id}`);\r\n          }\r\n          // データストリーム関連のクリーンアップもここに追加可能ですが、\r\n          // onDataリスナーはストリームが閉じられると自動的に停止します。\r\n        });\r\n      } else {\r\n        console.error(\"room.onMemberLeft is undefined. This is unexpected.\");\r\n      }\r\n\r\n      // ストリームが公開されたときのイベント\r\n      if (room.onStreamPublished) {\r\n        room.onStreamPublished.add(async (e) => {\r\n          console.log(`Stream published by ${e.publication.publisher.id}, type: ${e.publication.contentType}`);\r\n          // 自分のストリームは購読しない\r\n          if (localMember.id !== e.publication.publisher.id) {\r\n            try {\r\n              // リモートストリームを購読\r\n              const { stream } = await localMember.subscribe(e.publication.id);\r\n              console.log(`Subscribed to stream from ${e.publication.publisher.id}`);\r\n\r\n              if (e.publication.contentType === 'video' || e.publication.contentType === 'audio') {\r\n                attachRemoteStream(stream, e.publication.publisher.id);\r\n              } else if (e.publication.contentType === 'data') {\r\n                handleDataStream(stream, e.publication.publisher.id);\r\n              } else {\r\n                console.warn(`Unknown stream content type: ${e.publication.contentType} from ${e.publication.publisher.id}`);\r\n              }\r\n            } catch (subscribeError) {\r\n              console.error(`Failed to subscribe to stream from ${e.publication.publisher.id}:`, subscribeError);\r\n            }\r\n          } else {\r\n            console.log(`Skipping subscription for own stream: ${e.publication.publisher.id}`);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"room.onStreamPublished is undefined. This is unexpected.\");\r\n      }\r\n\r\n      // ストリームが非公開になったときのイベント\r\n      if (room.onStreamUnpublished) {\r\n        room.onStreamUnpublished.add((e) => {\r\n          console.log(`Stream unpublished by ${e.publication.publisher.id}`);\r\n          // 該当ストリームのビデオ要素をDOMから削除し、Mapからも削除\r\n          const videoElement = remoteVideoElements.current.get(e.publication.publisher.id);\r\n          if (videoElement && robotDisplayRef.current) {\r\n            robotDisplayRef.current.removeChild(videoElement);\r\n            remoteVideoElements.current.delete(e.publication.publisher.id);\r\n            console.log(`Removed unpublished video for member ${e.publication.publisher.id}`);\r\n          }\r\n        });\r\n      } else {\r\n        console.error(\"room.onStreamUnpublished is undefined. This is unexpected.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to join room:\", error);\r\n      // エラー発生時に状態をリセットして再試行可能にする\r\n      setSkywayRoom(null);\r\n      setMe(null);\r\n      // エラー時に既存のビデオ要素をクリーンアップ\r\n      if (robotDisplayRef.current) {\r\n        Array.from(robotDisplayRef.current.children).forEach(child => {\r\n          if (child.tagName === 'VIDEO') {\r\n            // ビデオ要素のsrcObjectをクリアし、トラックを停止\r\n            if (child.srcObject && typeof child.srcObject.getTracks === 'function') {\r\n              child.srcObject.getTracks().forEach(track => track.stop());\r\n              child.srcObject = null;\r\n            }\r\n            child.remove(); // DOMから要素を削除\r\n          }\r\n        });\r\n      }\r\n      remoteVideoElements.current.clear();\r\n      if (localStreamRef.current) {\r\n        // LocalVideoStreamのstop()メソッドを呼び出す\r\n        if (typeof localStreamRef.current.stop === 'function') {\r\n          localStreamRef.current.stop();\r\n          console.log(\"Stopped local media stream during join error cleanup.\");\r\n        } else {\r\n          console.warn(\"localStreamRef.current is not a valid LocalVideoStream or stop is not a function during join error cleanup.\");\r\n        }\r\n        localStreamRef.current = null;\r\n      }\r\n      // LocalDataStreamは自動的にクリーンアップされるため、明示的なclose()は不要\r\n      localDataStreamRef.current = null; // 参照をクリア\r\n      console.log(\"Local data stream reference cleared during join error cleanup.\");\r\n      // ミュート状態もリセット\r\n      setIsMuted(false);\r\n      audioPublicationRef.current = null;\r\n      setIsMoveInProgress(false);\r\n      // エラー時もモーション状態をリセット\r\n      setTranslatedText(\"\"); // 翻訳テキストをクリア\r\n    }\r\n  };\r\n\r\n  /**\r\n   * ルームから退出するハンドラ\r\n   */\r\n  const handleLeaveRoom = async () => {\r\n    if (skywayRoom) {\r\n      await skywayRoom.close();\r\n      console.log(`Left room '${roomName}'.`);\r\n      setSkywayRoom(null);\r\n      setMe(null);\r\n      // アンマウント時のクリーンアップ処理と同様\r\n      if (robotDisplayRef.current) {\r\n        Array.from(robotDisplayRef.current.children).forEach(child => {\r\n          if (child.tagName === 'VIDEO') {\r\n            if (child.srcObject) {\r\n              const tracks = child.srcObject.getTracks();\r\n              tracks.forEach(track => track.stop());\r\n            }\r\n            child.remove();\r\n          }\r\n        });\r\n      }\r\n      remoteVideoElements.current.clear();\r\n      if (localStreamRef.current) {\r\n        if (typeof localStreamRef.current.stop === 'function') {\r\n          localStreamRef.current.stop();\r\n          console.log(\"Stopped local media stream during leave.\");\r\n        }\r\n        localStreamRef.current = null;\r\n      }\r\n      localDataStreamRef.current = null;\r\n      setIsMuted(false);\r\n      audioPublicationRef.current = null;\r\n      setIsMoveInProgress(false);\r\n      setTranslatedText(\"\"); // 翻訳テキストをクリア\r\n      // ルームを離脱したため、AI提案もリセット\r\n      setAiSuggestions([null, null]);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * データストリームでメッセージを送信するハンドラ\r\n   * @param {string} message - 送信するメッセージ\r\n   */\r\n  const handleSend = (message) => {\r\n    if (localDataStreamRef.current && me) {\r\n      localDataStreamRef.current.write(message);\r\n      console.log(`Sent message: \"${message}\"`);\r\n      // 送信したメッセージを画面に追加\r\n      setReceivedMessages(prevMessages => [...prevMessages, { senderId: me.id, message: message, isLocal: true }]);\r\n\r\n      // \"move_*\" または \"ai_assist_*\" で始まる場合はモーション中と判断\r\n      if (message.startsWith(\"move_\") || message.startsWith(\"ai_assist_\")) {\r\n        console.log(\"Motion command sent. Disabling side panel buttons.\");\r\n        setIsMoveInProgress(true);\r\n      }\r\n    } else {\r\n      console.error(\"Local data stream is not available or not in a room.\");\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * マイクのミュート/ミュート解除を切り替えるハンドラ\r\n   */\r\n  const handleMute = async () => {\r\n    if (!audioPublicationRef.current) {\r\n      console.error(\"Audio publication is not available.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (isMuted) {\r\n        // ミュート解除\r\n        await audioPublicationRef.current.unmute();\r\n        console.log(\"Audio unmuted.\");\r\n        setIsMuted(false);\r\n      } else {\r\n        // ミュート\r\n        await audioPublicationRef.current.mute();\r\n        console.log(\"Audio muted.\");\r\n        setIsMuted(true);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to toggle mute state:\", error);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * AIモードを切り替えるハンドラ\r\n   */\r\n  const handleAiModeToggle = () => {\r\n    setIsAiModeOn(prev => !prev);\r\n    console.log(`AI mode toggled: ${!isAiModeOn}`);\r\n  };\r\n\r\n  // 🌟追加: 音声認識の開始/停止を切り替えるハンドラ\r\n  const handleToggleListening = () => {\r\n    if (!recognition.current) {\r\n      console.error(\"Speech recognition is not initialized.\");\r\n      return;\r\n    }\r\n    if (isListening) {\r\n      recognition.current.stop();\r\n      console.log(\"Speech recognition stopped.\");\r\n    } else {\r\n      recognition.current.start();\r\n      console.log(\"Speech recognition started.\");\r\n    }\r\n    setIsListening(prev => !prev);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"top-bar\">\r\n        <button onClick={handleLogout}>ログアウト</button>\r\n      </div>\r\n\r\n      <div className=\"main-content\">\r\n        <div className=\"center-panel\">\r\n          {/* リモートビデオ表示エリア */}\r\n          <div className=\"remote-video-container\" ref={robotDisplayRef}>\r\n            {/* ここにロボットのビデオストリームが表示される */}\r\n            {me && <p>Room ID: {roomName} / My ID: {me.id}</p>}\r\n          </div>\r\n\r\n          {/* チャット履歴表示エリア */}\r\n          <div className=\"chat-display\">\r\n            {receivedMessages.map((msg, index) => (\r\n              <div key={index} className={`chat-message ${msg.isLocal ? 'local-message' : 'remote-message'}`}>\r\n                <strong>{msg.senderId}:</strong> {msg.message}\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* 翻訳されたテキストの表示エリア */}\r\n          {translatedText && (\r\n            <div className=\"translation-display\">\r\n              <strong>Translated Text:</strong> {translatedText}\r\n            </div>\r\n          )}\r\n\r\n          {/* ルームコントロールエリア */}\r\n          <div className=\"room-controls\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"ルーム名を入力\"\r\n              value={roomName}\r\n              onChange={(e) => setRoomName(e.target.value)}\r\n              disabled={!!me} // ルーム参加中は無効\r\n            />\r\n            {me ? (\r\n              <button onClick={handleLeaveRoom}>退出</button>\r\n            ) : (\r\n              <button onClick={handleJoinRoom} disabled={!skywayContext || !roomName}>\r\n                参加\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"side-panel\">\r\n          <h3>AI提案</h3>\r\n          <div className=\"ai-suggestions\">\r\n            {aiSuggestions.map((suggestion, index) => (\r\n              suggestion && (\r\n                <button\r\n                  key={index}\r\n                  onClick={() => handleSend(`template_voice_${suggestion.text}`)}\r\n                  className=\"side-btn\"\r\n                  disabled={!me || isMoveInProgress} // 未参加、モーション中は無効化\r\n                >\r\n                  {suggestion.text}\r\n                </button>\r\n              )\r\n            ))}\r\n          </div>\r\n          <h3>テンプレートボイス</h3>\r\n          <div className=\"template-voices\">\r\n            {Object.keys(messages).map(key => (\r\n              <button\r\n                key={key}\r\n                // 送信フォーマットを \"template_voice_〇〇\" 形式で送信\r\n                onClick={() => handleSend(`template_voice_${messages[key].japanese}`)}\r\n                className=\"side-btn\"\r\n                disabled={isAiModeOn || !me || isMoveInProgress} // AIモード中、未参加、モーション中は無効化\r\n              >\r\n                {messages[key].japanese} {/* 常に日本語表示 */}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-controls\">\r\n        <button\r\n          className={`control-btn ai-btn`}\r\n          onClick={() => handleAiModeToggle()}\r\n          disabled={!me} // ルームに参加していない場合は無効\r\n        >\r\n          {isAiModeOn ? 'AIモードOFF' : 'AIモードON'}\r\n        </button>\r\n        {/* 🌟追加: 音声認識ボタン */}\r\n        <button\r\n          className={`control-btn speech-recognition-btn ${isListening ? 'listening' : ''}`}\r\n          onClick={handleToggleListening}\r\n          disabled={!me || !localDataStreamRef.current || isAiModeOn} // ルーム未参加、データストリーム未準備、AIモード中は無効\r\n        >\r\n          {isListening ? '🔴 音声認識を停止' : '🎤 音声認識を開始'}\r\n        </button>\r\n        <button\r\n          className={`control-btn mic-btn ${isMuted ? 'muted' : ''}`} // ミュート状態に応じてクラスを追加\r\n          onClick={handleMute}\r\n          id=\"micBtn\"\r\n          disabled={!me || !audioPublicationRef.current} // ルーム未参加、オーディオが公開されていない場合は無効\r\n        >\r\n          {isMuted ? 'マイクミュート中' : 'マイクON'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}